id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/__roofit_8pyzdoc_source.html:28234,Modifiability,variab,variable,28234,"oCmdArg& arg5, const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 542 ; 543\anchor _roodataset_to_numpy; 544### RooDataSet.to_numpy; 545Export a RooDataSet to a dictionary of numpy arrays.; 546 ; 547Args:; 548 copy (bool): If False, the data will not be copied. Use with; 549 caution, as the numpy arrays and the RooAbsData now; 550 own the same memory. If the dataset uses a; 551 RooTreeDataStore, there will always be a copy and the; 552 copy argument is ignored.; 553 ; 554Returns:; 555 dict: A dictionary with the variable or weight names as keys and; 556 the numpy arrays as values.; 557 ; 558\anchor _roodataset_to_pandas; 559### RooDataSet.to_pandas; 560Export a RooDataSet to a pandas DataFrame.; 561 ; 562Args:; 563 ; 564Note:; 565 Pandas copies the data from the numpy arrays when creating a; 566 DataFrame. That's why we can disable copying in the to_numpy call.; 567 ; 568Returns:; 569 pandas.DataFrame: A dataframe with the variable or weight names as; 570 column names and the a row for each variable or; 571 weight in the dataset.; 572 ; 573\anchor _roodecay; 574## RooDecay; 575\see RooDecay; 576 ; 577Some constructors of classes like RooDecay, RooBDecay, RooBCPGenDecay, RooBCPEffDecay and RooBMixDecay that take an enum; 578DecayType as argument also support keyword arguments.; 579For example, the following code is equivalent in PyROOT:; 580\code{.py}; 581# Directly passing keyword argument with string corresponding to enum value name:; 582decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, ROOT.RooDecay.DoubleSided); 583 ; 584# With enum value:; 585decay_tm = ROOT.RooDecay(""decay_tm"", ""decay"", dt, tau, tm, type=""DoubleSided""); 586\endcode; 587 ; 588\anchor _roodecay___init__; 589### RooDecay.__init__; 590The RooDecay constructor is pythonized with enum values.; 591 ; 592\see RooDecay(const char *name, const char *title, RooRealVar& t, RooAbsReal& tau, const RooResolutionModel& model, DecayType type); 593 ; 594\anchor _roogenfitstudy; ",MatchSource.WIKI,doc/master/__roofit_8pyzdoc_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/__roofit_8pyzdoc_source.html
https://root.cern/doc/v604/release-notes.html:10742,Availability,avail,available,10742,"ed simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::Merge",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13893,Availability,error,error,13893,"o factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14808,Availability,avail,available,14808,"e cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automaticall",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14888,Availability,avail,available,14888,"eSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14960,Availability,avail,available,14960,"eSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:21734,Availability,error,error,21734,"a backend. (see https://sft.its.cern.ch/jira/browse/ROOT-6561); Interactive update of TText position did not work in NDC mode. (se https://sft.its.cern.ch/jira/browse/ROOT-7284). TLegend. Use the new TStyle global attribute gStyle->GetLegendTextSize() to set the legend item text size. If this value is 0 and if the text size directly set on the TLegend object is also 0, then the text size is automatically computed to fit the legend box. If gStyle->GetLegendTextSize() is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement transparent colors using TiKZ “opacity”.; Implement TStyle::SetLineScalePS() to control le global basic line width.; Offer 0 as line width option. Useful to make a line invisible. TPostScript. Small fix for fill patterns 1, 2 and 3.; With TMathtext, only the fonts really used are now loaded in the PostScript file. Typically it reduces the file size by a factor 10 (compare to the previous implementation) for normal plots with math formulae and greek characters.; Offer 0 as line width option. Useful to make a line invisible. TPDF. When a text size was equal or smaller than 0 the PDF file was corrupted.; Small fix for fill patterns 1, 2 and 3.; When printing a coloured 2D histograms (with option COLZ) into a PDF or PostScript file, the preview on screen using many standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:26903,Availability,error,errors,26903,"y::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in callin",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:27536,Availability,down,down,27536,"mplement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29114,Availability,recover,recover,29114,"tour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29152,Availability,failure,failure,29152,"tour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29533,Availability,error,error,29533,rts vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Ac,MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29539,Availability,recover,recovery,29539,rts vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Ac,MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:31439,Availability,failure,failure,31439,"rintf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Activating prefetching makes TTree iteration slower when reading through HTTP; [ROOT-7475] - TTreeReader is retrieving the containers properly, but when used in a for loop, the elements get somehow “overridden”; [ROOT-7478] - Generating PCH fails with CXX flags with spaces; [ROOT-7491] - TLatex display issues with root 6.04; [ROOT-7509] - Build Failure on FreeBSD 10.1; [ROOT-7515] - C++14 needs GCC 5.1; [ROOT-7536] - Missing include file; [ROOT-7537] - Root tries to find include files in ROOTINCDIR/include instead of ROOTINCDIR; [ROOT-7575] - ROOT 6 can’t compile with python 3.3; [ROOT-7586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentatio",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:34920,Availability,down,down,34920,"hread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interprete",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:34989,Availability,down,down,34989,"Make][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated call",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:35801,Availability,error,error,35801," 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDire",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:1554,Deployability,patch,patches,1554,"l. 2D Graphics Libraries; TText; TLegend; TTexDump; TPostScript; TPDF; TSVG; TASImage; TPadPainter; TPad; TCanvas; TLatex; TMathText; Cocoa backend. 3D Graphics Libraries; GL Viewer. Tutorials; Build, Configuration and Testing Infrastructure; New functionalities. Patch Releases; Release 6.04/02; Platform Support; Build System; Core; I/O; Proof; Interpreter; PyROOT; TFormula, TF1; RooFit; Dictionary Generation; Tree; Graphics. Release 6.04/04; Build System; Core; Interpreter; I/O; Tree; Geom; Bugs; Improvements; Tasks. Release 6.04/06; Build; Core; Bugs. Release 6.04/08; Build; Core; Interpreter; IO; Histograms; Minuit. Patches Release 6.04/08; Bugs; Improvement; Task. Release 6.04/10; Core; Interpreter; Hist; TNetXNGFileStager. Release 6.04/12; I/O; Interpreter; Documentation; Bugs and Improvements. Release 6.04/14; Build system; GL; Interpreter; PyROOT. Release 6.04/16; Core; Meta Library; Dictionaries; I/O; TTree. Release 6.04/18; Core; TTree; Bugs and issues fixed. HEAD of the v6-04-00-patches branch. Introduction; ROOT version 6.04/10 was released on 18 November, 2015. Changes with respect to 6.04/00 are listed at the end of the document.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Aurelie Flandi, CERN/SFT,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/Alice,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/SFT,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke,",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:1609,Deployability,release,released,1609,"; TSVG; TASImage; TPadPainter; TPad; TCanvas; TLatex; TMathText; Cocoa backend. 3D Graphics Libraries; GL Viewer. Tutorials; Build, Configuration and Testing Infrastructure; New functionalities. Patch Releases; Release 6.04/02; Platform Support; Build System; Core; I/O; Proof; Interpreter; PyROOT; TFormula, TF1; RooFit; Dictionary Generation; Tree; Graphics. Release 6.04/04; Build System; Core; Interpreter; I/O; Tree; Geom; Bugs; Improvements; Tasks. Release 6.04/06; Build; Core; Bugs. Release 6.04/08; Build; Core; Interpreter; IO; Histograms; Minuit. Patches Release 6.04/08; Bugs; Improvement; Task. Release 6.04/10; Core; Interpreter; Hist; TNetXNGFileStager. Release 6.04/12; I/O; Interpreter; Documentation; Bugs and Improvements. Release 6.04/14; Build system; GL; Interpreter; PyROOT. Release 6.04/16; Core; Meta Library; Dictionaries; I/O; TTree. Release 6.04/18; Core; TTree; Bugs and issues fixed. HEAD of the v6-04-00-patches branch. Introduction; ROOT version 6.04/10 was released on 18 November, 2015. Changes with respect to 6.04/00 are listed at the end of the document.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Aurelie Flandi, CERN/SFT,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/Alice,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/SFT,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Yue Shi Lai, MIT,; Maciej Zimnoch, GSOC; Cor",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:7174,Deployability,update,updated,7174," 87; kLightTerrain = 88; kMint = 89; kNeon = 90; kPastel = 91; kPearl = 92; kPigeon = 93; kPlum = 94; kRedBlue = 95; kRose = 96; kRust = 97; kSandyTerrain = 98; kSienna = 99; kSolar = 100; kSouthWest = 101; kStarryNight = 102; kSunset = 103; kTemperatureMap = 104; kThermometer = 105; kValentine = 106; kVisibleSpectrum = 107; kWaterMelon = 108; kCool = 109; kCopper = 110; kGistEarth = 111. ; Interpreter Library; Many, many bugs have been fixed; thanks to everyone who has reported them!; Cling; Cling is now using a new just-in-time compilation engine called OrcJIT, a development based on MCJIT. It enables interpretation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:7238,Deployability,release,release,7238," kPigeon = 93; kPlum = 94; kRedBlue = 95; kRose = 96; kRust = 97; kSandyTerrain = 98; kSienna = 99; kSolar = 100; kSouthWest = 101; kStarryNight = 102; kSunset = 103; kTemperatureMap = 104; kThermometer = 105; kValentine = 106; kVisibleSpectrum = 107; kWaterMelon = 108; kCool = 109; kCopper = 110; kGistEarth = 111. ; Interpreter Library; Many, many bugs have been fixed; thanks to everyone who has reported them!; Cling; Cling is now using a new just-in-time compilation engine called OrcJIT, a development based on MCJIT. It enables interpretation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One sig",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:16634,Deployability,install,installed,16634,"more. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range. TF1NormSum. New helper class computing the normalized sum of TF1 objects. It is a functor class which can be used as input to a global TF1 for fitting a sum of normalized components. This is useful for example in signal plus background fit, where one can fit directly the number of signal and background events, without the need to use something like TF1::IntegralError. See the tutorial tutorials/fit/fitNormSum.C as an example on how to use the TF1NormSum and perform such a fit. TF1Convolution. Another helper functor class for performing numerical convolution of functions, expressed as TF1 objects, using Fast Fourier Transform. The class requires the FFTW package installed in ROOT. The tutorial tutorials/fit/fitConvolution.C provides an example on how to create a TF1 based on the convolution of two others TF1 objects and used it to fit some data. TGraph2DPainter. In some case and extra point was drawn in the center od the plot when a TGRaph2dwas drawn with P, P0, or PCOL options. THistPainter. It was possible to interactively zoom outside the histograms’ limits. Protections have been added.; When an histogram was drawn with the option E0 and log scale along the Y axis, some additional markers were drawn at the bottom line of the plot. This was reported <a href=“http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18778”>here.; Implement the option 0 combined with the option COL as requested <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19046”>here. When the minimum of the histogram is set to a greater value than the real minimum, the bins having a value between the real minimum and the new minimum are not drawn unless the option 0",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:20812,Deployability,update,update,20812,"dd(h1);. TH1F *h2 = new TH1F(""h2"",""h2"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""h3"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);. hs->Draw(""nostackb"");; return cst0;; }. NOSTACKB plot example. GUI Libraries; TGTextViewostream. A new TGTextViewostream class has been added. It is a text viewer widget and is a specialization of TGTextView and std::ostream. It uses a TGTextViewStreamBuf, which inherits from std::streambuf, allowing to stream text directly to the text view in a cout - like fashion. A new tutorial showing how to use the TGTextViewostream widget has also been added. FitPanel. Add the functionality for composing function using convolution and for normalized sums using the new TF1NormSum and TF1Convolution classes. 2D Graphics Libraries; TText. The character position was not correct with the Cocoa backend. (see https://sft.its.cern.ch/jira/browse/ROOT-6561); Interactive update of TText position did not work in NDC mode. (se https://sft.its.cern.ch/jira/browse/ROOT-7284). TLegend. Use the new TStyle global attribute gStyle->GetLegendTextSize() to set the legend item text size. If this value is 0 and if the text size directly set on the TLegend object is also 0, then the text size is automatically computed to fit the legend box. If gStyle->GetLegendTextSize() is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:25133,Deployability,configurat,configuration,25133,"quare-root drawing in case it is small.; Better adjustment of the tilde accent position in case of Cocoa backend. TMathText. \mu is now working for Postscript output.; \splitline is now implemented. Cocoa backend. Line width and line style were not applied on boxes. 3D Graphics Libraries; GL Viewer. New option “Rotate scene” in the “Extras” tab of the GL Viewer. It allows to do a real rotation instead of a wobbling when the “Auto Rotator” is launched.; New methods from Jeremi Niedziela jeremi.niedziela at cern dot ch to return the image in memory. Tutorials. New tutorial textviewostream.C showing how to use the TGTextViewostream widget. Build, Configuration and Testing Infrastructure. Backport Python3 compatibility of build scripts. New functionalities. Support ARM 64 bits architecture.; Partial support for PPC 64 bits Little Endian architecture.; Add “Optimized” CMAKE_BUILD_TYPE: allow highest level of optimisation of the GCC and Clang compilers (-Ofast).; Support ccache activation with cmake configuration switch.; Support link to jemalloc and tcmalloc allocators.; Careful suppression of known and understood warnings, e.g. coming from external packages. Patch Releases; Release 6.04/02; Platform Support. Added support for Intel icc 15. Build System. Define ROOT_XXX_FLAGS in ROOTConfig.cmake for use by client packages ROOT-7401; Enabled c++14 in CLING when compiling ROOT with c++14 enabled (CMake: -Dcxx14=ON, classic: –enable-cxx14). Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current direc",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:31185,Deployability,install,installer,31185,"T-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Activating prefetching makes TTree iteration slower when reading through HTTP; [ROOT-7475] - TTreeReader is retrieving the containers properly, but when used in a for loop, the elements get somehow “overridden”; [ROOT-7478] - Generating PCH fails with CXX flags with spaces; [ROOT-7491] - TLatex display issues with root 6.04; [ROOT-7509] - Build Failure on FreeBSD 10.1; [ROOT-7515] - C++14 needs GCC 5.1; [ROOT-7536] - Missing include file; [ROOT-7537] - Root tries to find include files in ROOTINCDIR/include instead of ROOTINCDIR; [ROOT-7575] - ROOT 6 can’t compile with python 3.3; [ROOT-7586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collec",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:31993,Deployability,install,installation,31993,"e files in ROOTINCDIR/include instead of ROOTINCDIR; [ROOT-7575] - ROOT 6 can’t compile with python 3.3; [ROOT-7586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building wi",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32675,Deployability,install,installation,32675,"OT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO const",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32872,Deployability,configurat,configuration,32872,"ption gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:34827,Deployability,release,released,34827," case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:36261,Deployability,install,install,36261," ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:36656,Deployability,configurat,configuration,36656," ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collec",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38484,Deployability,update,updated,38484,"h lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTre",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38967,Deployability,update,update,38967,"048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:40105,Deployability,patch,patches,40105,"d the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of the future 6.04/20. ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:8106,Energy Efficiency,schedul,scheduling,8106," clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9297,Energy Efficiency,monitor,monitoring,9297,"sequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Impleme",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:10073,Energy Efficiency,monitor,monitor,10073," in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:11279,Energy Efficiency,reduce,reduce,11279,"ed stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too ma",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:22147,Energy Efficiency,reduce,reduces,22147,"is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement transparent colors using TiKZ “opacity”.; Implement TStyle::SetLineScalePS() to control le global basic line width.; Offer 0 as line width option. Useful to make a line invisible. TPostScript. Small fix for fill patterns 1, 2 and 3.; With TMathtext, only the fonts really used are now loaded in the PostScript file. Typically it reduces the file size by a factor 10 (compare to the previous implementation) for normal plots with math formulae and greek characters.; Offer 0 as line width option. Useful to make a line invisible. TPDF. When a text size was equal or smaller than 0 the PDF file was corrupted.; Small fix for fill patterns 1, 2 and 3.; When printing a coloured 2D histograms (with option COLZ) into a PDF or PostScript file, the preview on screen using many standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG. Use float numbers instead of integer to describe graphics paths to avoid rounding problems.; Implement missing math",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:27593,Energy Efficiency,reduce,reduce,27593,"mplement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:37179,Energy Efficiency,consumption,consumption,37179,"ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38756,Energy Efficiency,reduce,reduce,38756,"has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memp",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:3634,Integrability,interface,interfaces,3634,"OOT now works on linuxarm64 / AArch64 / ARMv8 64-bit - thanks, David Abdurachmanov!; ROOT supports GCC 5.0 (using the GCC4 ABI) and XCode 6.3, Mac OSX 10.10.3; Thread-Safety; A lot of effort went into improving the thread-safety of Core and Meta classes / functions. A special thanks to Chris Jones from CMS!; std::string_view; Introduce a preview of C++17’s std::string_view. To take advantage of this new class use:; #include ""RStringView.h""; The documentation of this can be found at http://en.cppreference.com/w/cpp/experimental/basic_string_view The implementation provided is extracted from libcxx. Whenever the current compiler and standard library provide an implmentation, it is used.; The type string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");;",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:4195,Integrability,interface,interface,4195," from libcxx. Whenever the current compiler and standard library provide an implmentation, it is used.; The type string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:33521,Integrability,rout,routine,33521,"OOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly se",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38913,Integrability,interface,interfaces,38913,"ny user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags f",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:5200,Modifiability,config,configuring,5200,"nterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been taken from here. Except for the kBird palette. These palettes can be accessed with gStyle->SetPalette(num). num can be taken within the following enum:. kDeepSea = 51; kGreyScale = 52; kDarkBodyRadiator = 53; kBlueYellow = 54; kRainBow = 55; kInvertedDarkBodyRadiator = 56; kBird = 57; kCubehelix = 58; kGreenRedViolet = 59; kBlueRedYellow = 60; kOcean = 61; kColorPrintableOnGrey = 62; kAlpine = 63; kAquamarine = 64; kArmy = 65; kAtlantic = 66; kAurora = 67; kAvocado = 68; kBeach = 69; kBlackBody = 70; kBlueGreenYellow = 71; kBrownCyan = 72; kCMYK = 73; kCandy = 74; kCherry = 75; kCoffee = 76; kDarkRainBow = 77; kDarkTerrain = 78; kFall = 79; kFruitPunch = 80; kFuchsia = 81; kGreyYellow = 82; kGreenBrownTerrain = 83; kGreenPink = 84; kIsland = 85; kLake = 86; kLightTemperature = 87; kLightTerrain = 88; kMint = 89; kNeo",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:7380,Modifiability,variab,variable,7380,"hWest = 101; kStarryNight = 102; kSunset = 103; kTemperatureMap = 104; kThermometer = 105; kValentine = 106; kVisibleSpectrum = 107; kWaterMelon = 108; kCool = 109; kCopper = 110; kGistEarth = 111. ; Interpreter Library; Many, many bugs have been fixed; thanks to everyone who has reported them!; Cling; Cling is now using a new just-in-time compilation engine called OrcJIT, a development based on MCJIT. It enables interpretation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:7793,Modifiability,portab,portability,7793,"retation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:8994,Modifiability,config,configured,8994,"I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9056,Modifiability,config,configure,9056,"m the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9287,Modifiability,config,configure,9287,"sequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Impleme",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:11246,Modifiability,extend,extend,11246,"nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or s",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:11271,Modifiability,extend,extend,11271,"ed stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too ma",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12406,Modifiability,variab,variables,12406,"out jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12510,Modifiability,variab,variable,12510,"ays drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTree",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12941,Modifiability,config,configured,12941,"mated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an err",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13069,Modifiability,variab,variable,13069,"individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learni",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13114,Modifiability,variab,variable,13114,"hus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. a",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13307,Modifiability,variab,variable,13307,"dating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14318,Modifiability,variab,variables,14318,"variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined funct",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:15437,Modifiability,inherit,inheritance,15437," based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range. TF1NormSum. New helper class computing the normalized sum of TF1 objects. It is a functor class which can be used as input to a global TF1 for fitting a sum of normalized components. This is useful for example in signal plus background fit, where one can fit directly the number of signal and background events, without the need to use something like TF1::IntegralError. See the tutorial tutorials/fit/fitNormSum.C as an example on how to use the TF1NormSum and perform such a ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:20314,Modifiability,inherit,inherits,20314,"603&p=83973#p83973”>here. THStack. Implement GetNhists() to return the number of histograms in the stack.; New drawing option NOSTACKB. histograms are drawn next to each other as bar charts.; Example:; TCanvas* nostackb() {; TCanvas *cst0 = new TCanvas(""cst0"",""cst0"",600,400);; THStack *hs = new THStack(""hs"",""Stacked 1D histograms: option #font[82]{\""nostackb\""}"");. TH1F *h1 = new TH1F(""h1"",""h1"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);. TH1F *h2 = new TH1F(""h2"",""h2"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);. TH1F *h3 = new TH1F(""h3"",""h3"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);. hs->Draw(""nostackb"");; return cst0;; }. NOSTACKB plot example. GUI Libraries; TGTextViewostream. A new TGTextViewostream class has been added. It is a text viewer widget and is a specialization of TGTextView and std::ostream. It uses a TGTextViewStreamBuf, which inherits from std::streambuf, allowing to stream text directly to the text view in a cout - like fashion. A new tutorial showing how to use the TGTextViewostream widget has also been added. FitPanel. Add the functionality for composing function using convolution and for normalized sums using the new TF1NormSum and TF1Convolution classes. 2D Graphics Libraries; TText. The character position was not correct with the Cocoa backend. (see https://sft.its.cern.ch/jira/browse/ROOT-6561); Interactive update of TText position did not work in NDC mode. (se https://sft.its.cern.ch/jira/browse/ROOT-7284). TLegend. Use the new TStyle global attribute gStyle->GetLegendTextSize() to set the legend item text size. If this value is 0 and if the text size directly set on the TLegend object is also 0, then the text size is automatically computed to fit the legend box. If gStyle->GetLegendTextSize() is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the tex",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:25133,Modifiability,config,configuration,25133,"quare-root drawing in case it is small.; Better adjustment of the tilde accent position in case of Cocoa backend. TMathText. \mu is now working for Postscript output.; \splitline is now implemented. Cocoa backend. Line width and line style were not applied on boxes. 3D Graphics Libraries; GL Viewer. New option “Rotate scene” in the “Extras” tab of the GL Viewer. It allows to do a real rotation instead of a wobbling when the “Auto Rotator” is launched.; New methods from Jeremi Niedziela jeremi.niedziela at cern dot ch to return the image in memory. Tutorials. New tutorial textviewostream.C showing how to use the TGTextViewostream widget. Build, Configuration and Testing Infrastructure. Backport Python3 compatibility of build scripts. New functionalities. Support ARM 64 bits architecture.; Partial support for PPC 64 bits Little Endian architecture.; Add “Optimized” CMAKE_BUILD_TYPE: allow highest level of optimisation of the GCC and Clang compilers (-Ofast).; Support ccache activation with cmake configuration switch.; Support link to jemalloc and tcmalloc allocators.; Careful suppression of known and understood warnings, e.g. coming from external packages. Patch Releases; Release 6.04/02; Platform Support. Added support for Intel icc 15. Build System. Define ROOT_XXX_FLAGS in ROOTConfig.cmake for use by client packages ROOT-7401; Enabled c++14 in CLING when compiling ROOT with c++14 enabled (CMake: -Dcxx14=ON, classic: –enable-cxx14). Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current direc",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:31685,Modifiability,config,configure,31685,"n a for loop, the elements get somehow “overridden”; [ROOT-7478] - Generating PCH fails with CXX flags with spaces; [ROOT-7491] - TLatex display issues with root 6.04; [ROOT-7509] - Build Failure on FreeBSD 10.1; [ROOT-7515] - C++14 needs GCC 5.1; [ROOT-7536] - Missing include file; [ROOT-7537] - Root tries to find include files in ROOTINCDIR/include instead of ROOTINCDIR; [ROOT-7575] - ROOT 6 can’t compile with python 3.3; [ROOT-7586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with i",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32613,Modifiability,config,configure,32613,"OT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO const",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32722,Modifiability,config,configure,32722,"o CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer sh",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32872,Modifiability,config,configuration,32872,"ption gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:34554,Modifiability,variab,variables,34554,"parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc; [ROOT-7708] - Failure in dictionary generation of HEPMC3; [ROOT-7713] - Menus not highlighted under mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, in",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:36656,Modifiability,config,configuration,36656," ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collec",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:36821,Modifiability,variab,variables,36821,"han going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being s",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:37208,Modifiability,plugin,plugins,37208,"ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core. Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes [ROOT-8019].; Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:4396,Performance,perform,performed,4396,"ribes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been t",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:4448,Performance,load,load,4448,"ce of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been taken from here. Except for the kBird palette. These palettes ca",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9276,Performance,load,loaded,9276,"sequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Impleme",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9744,Performance,load,loaded,9744,"ace; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command avai",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:10912,Performance,load,loaded,10912," menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluste",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12685,Performance,cache,cache,12685," IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12727,Performance,cache,cache,12727,"ree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several method",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12770,Performance,cache,cache,12770,"ree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several method",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12855,Performance,cache,cache,12855,"mated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an err",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12921,Performance,cache,caches,12921,"mated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an err",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12977,Performance,cache,cache,12977,"by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cache",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13014,Performance,cache,cache,13014,"phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously l",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13576,Performance,cache,cache,13576,"ize for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will g",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13630,Performance,cache,cache,13630,"ize for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will g",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13708,Performance,cache,cache,13708,"ize for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will g",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13786,Performance,cache,cache,13786,"o factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:13977,Performance,cache,cached,13977,"ic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in t",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14093,Performance,cache,cache,14093,"T_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14139,Performance,cache,cache,14139,"l sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:16426,Performance,perform,perform,16426,"mials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range. TF1NormSum. New helper class computing the normalized sum of TF1 objects. It is a functor class which can be used as input to a global TF1 for fitting a sum of normalized components. This is useful for example in signal plus background fit, where one can fit directly the number of signal and background events, without the need to use something like TF1::IntegralError. See the tutorial tutorials/fit/fitNormSum.C as an example on how to use the TF1NormSum and perform such a fit. TF1Convolution. Another helper functor class for performing numerical convolution of functions, expressed as TF1 objects, using Fast Fourier Transform. The class requires the FFTW package installed in ROOT. The tutorial tutorials/fit/fitConvolution.C provides an example on how to create a TF1 based on the convolution of two others TF1 objects and used it to fit some data. TGraph2DPainter. In some case and extra point was drawn in the center od the plot when a TGRaph2dwas drawn with P, P0, or PCOL options. THistPainter. It was possible to interactively zoom outside the histograms’ limits. Protections have been added.; When an histogram was drawn with the option E0 and log scale along the Y axis, some additional markers were drawn at the bottom line of the plot. This was reported <a href=“http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18778”>here.; Implement the option 0 combined with the option COL as requested <a href=“https://root.cern.ch/phpBB3/view",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:16495,Performance,perform,performing,16495,"= new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range. TF1NormSum. New helper class computing the normalized sum of TF1 objects. It is a functor class which can be used as input to a global TF1 for fitting a sum of normalized components. This is useful for example in signal plus background fit, where one can fit directly the number of signal and background events, without the need to use something like TF1::IntegralError. See the tutorial tutorials/fit/fitNormSum.C as an example on how to use the TF1NormSum and perform such a fit. TF1Convolution. Another helper functor class for performing numerical convolution of functions, expressed as TF1 objects, using Fast Fourier Transform. The class requires the FFTW package installed in ROOT. The tutorial tutorials/fit/fitConvolution.C provides an example on how to create a TF1 based on the convolution of two others TF1 objects and used it to fit some data. TGraph2DPainter. In some case and extra point was drawn in the center od the plot when a TGRaph2dwas drawn with P, P0, or PCOL options. THistPainter. It was possible to interactively zoom outside the histograms’ limits. Protections have been added.; When an histogram was drawn with the option E0 and log scale along the Y axis, some additional markers were drawn at the bottom line of the plot. This was reported <a href=“http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18778”>here.; Implement the option 0 combined with the option COL as requested <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19046”>here. When the minimum of the histogram is set to a greater value than the real minimum, the bi",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:22103,Performance,load,loaded,22103,"bject is also 0, then the text size is automatically computed to fit the legend box. If gStyle->GetLegendTextSize() is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement transparent colors using TiKZ “opacity”.; Implement TStyle::SetLineScalePS() to control le global basic line width.; Offer 0 as line width option. Useful to make a line invisible. TPostScript. Small fix for fill patterns 1, 2 and 3.; With TMathtext, only the fonts really used are now loaded in the PostScript file. Typically it reduces the file size by a factor 10 (compare to the previous implementation) for normal plots with math formulae and greek characters.; Offer 0 as line width option. Useful to make a line invisible. TPDF. When a text size was equal or smaller than 0 the PDF file was corrupted.; Small fix for fill patterns 1, 2 and 3.; When printing a coloured 2D histograms (with option COLZ) into a PDF or PostScript file, the preview on screen using many standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:36022,Performance,perform,performance,36022,"r calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set CMAKE_MODULE_PATH nor install FindX modules; [ROOT-7809] - TWebFile infinite loop for 301 redirects without Location; [ROOT-7817] - Avoid a crash under some circumstances when trying to open an invalid path.; [ROOT-7787] - CMake: allow disabling ncurses. Release 6.04/14; Build system. Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the lastest Mac OSX (El Capitan); Fix configuration of threading in LLVM.; Fix issue with inconsistent visibility ROOT-7896. GL. Mattias Ellert fixed a memory leak [PR114]. Interpreter. Update automatic variables if gDirectory changes ROOT-7830; Fix issue with initialization of statics in interpreter ROOT-7901. PyROOT. Fix handling of vector<enums> ROOT-7916. Release 6.04/16; Published on 2016-03-17.; Core.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38607,Performance,cache,cache,38607,"look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38681,Performance,cache,cache,38681,"has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memp",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38840,Performance,cache,cache,38840,"ny user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags f",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38934,Performance,cache,cache,38934," by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38990,Performance,cache,cache,38990,"048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:39111,Performance,cache,cachesize,39111,"048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:39168,Performance,cache,cachesize,39168,"048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:39366,Performance,cache,cache,39366,"d the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of the future 6.04/20. ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:2882,Safety,safe,safety,2882,", CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Aurelie Flandi, CERN/SFT,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/Alice,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/SFT,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Yue Shi Lai, MIT,; Maciej Zimnoch, GSOC; Core Libraries; General; Platform support; ROOT now works on linuxarm64 / AArch64 / ARMv8 64-bit - thanks, David Abdurachmanov!; ROOT supports GCC 5.0 (using the GCC4 ABI) and XCode 6.3, Mac OSX 10.10.3; Thread-Safety; A lot of effort went into improving the thread-safety of Core and Meta classes / functions. A special thanks to Chris Jones from CMS!; std::string_view; Introduce a preview of C++17’s std::string_view. To take advantage of this new class use:; #include ""RStringView.h""; The documentation of this can be found at http://en.cppreference.com/w/cpp/experimental/basic_string_view The implementation provided is extracted from libcxx. Whenever the current compiler and standard library provide an implmentation, it is used.; The type string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; ob",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:3570,Safety,avoid,avoid,3570,"OOT now works on linuxarm64 / AArch64 / ARMv8 64-bit - thanks, David Abdurachmanov!; ROOT supports GCC 5.0 (using the GCC4 ABI) and XCode 6.3, Mac OSX 10.10.3; Thread-Safety; A lot of effort went into improving the thread-safety of Core and Meta classes / functions. A special thanks to Chris Jones from CMS!; std::string_view; Introduce a preview of C++17’s std::string_view. To take advantage of this new class use:; #include ""RStringView.h""; The documentation of this can be found at http://en.cppreference.com/w/cpp/experimental/basic_string_view The implementation provided is extracted from libcxx. Whenever the current compiler and standard library provide an implmentation, it is used.; The type string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");;",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:7701,Safety,avoid,avoiding,7701," is now using a new just-in-time compilation engine called OrcJIT, a development based on MCJIT. It enables interpretation of inline assembly and exceptions; it will hopefully in the near future also support interpreting thread local storage (but doesn’t at the moment).; Thanks to the new JIT, cling also comes with debug symbols for interpreted code; you can enable them with “.debug”.; Function evaluation; Function calls through TMethodCall etc have been accelerated.; llvm / clang; llvm / clang were updated to r227800. This includes everything from the clang 3.6 release.; Dictionary Generation; Detect usage of #pragma once for inlined headers.; Turn on verbosity of genreflex if the VERBOSE environment variable is defined.; Optimise forward declarations in rootmap files in order to make their interpretation faster.; Propagate attributes specified in xml selection files to selected classes even when selected through typedefs.; Optimise selection procedure caching selected declarations in the selection rules, therewith avoiding to query the AST twice.; Include in the PCH all the STL and C headers to guarantee portability of binaries from SLC6 to CC7.; I/O Libraries; I/O New functionalities. Support for forward_list and I/O of unordered stl containers.; Support for std::complex. I/O Behavior change. The I/O now properly skip the content of base class onfile that have been removed from the in-memory class layout.; The scheduling the I/O customization rules within a StreamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile bei",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:23160,Safety,avoid,avoid,23160,"cally it reduces the file size by a factor 10 (compare to the previous implementation) for normal plots with math formulae and greek characters.; Offer 0 as line width option. Useful to make a line invisible. TPDF. When a text size was equal or smaller than 0 the PDF file was corrupted.; Small fix for fill patterns 1, 2 and 3.; When printing a coloured 2D histograms (with option COLZ) into a PDF or PostScript file, the preview on screen using many standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG. Use float numbers instead of integer to describe graphics paths to avoid rounding problems.; Implement missing math symbols.; Offer 0 as line width option. Useful to make a line invisible. TASImage. In the animated gif it is now possible to specify the delay between the last image and the fist image in case of infinite loop. (Fernando Hueso González f.gonzalez at hzdr dot de). TPadPainter. Offer 0 as line width option. Useful to make a line invisible. TPad. In TPad::ShowGuidelines the number of guide lines is limited to 15. Above that they become useless.; Print a warning if one of the pad limit is a NaN.; Fix https://sft.its.cern.ch/jira/browse/ROOT-6703. TCanvas. Make sure that “/” and “.” are not part of the method name when a canvas is saved as a .C file. TLatex. With the Cocoa backend the PDF and PS output produced miss-aligned exponents because the GetTextExtend method behaved differently in batch mode and “screen” mode. This is now fixed. See http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18883; Improve the square-root dra",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:25983,Safety,safe,safety,25983,"AKE_BUILD_TYPE: allow highest level of optimisation of the GCC and Clang compilers (-Ofast).; Support ccache activation with cmake configuration switch.; Support link to jemalloc and tcmalloc allocators.; Careful suppression of known and understood warnings, e.g. coming from external packages. Patch Releases; Release 6.04/02; Platform Support. Added support for Intel icc 15. Build System. Define ROOT_XXX_FLAGS in ROOTConfig.cmake for use by client packages ROOT-7401; Enabled c++14 in CLING when compiling ROOT with c++14 enabled (CMake: -Dcxx14=ON, classic: –enable-cxx14). Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:28086,Safety,avoid,avoid,28086,"ocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROO",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29114,Safety,recover,recover,29114,"tour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29539,Safety,recover,recovery,29539,rts vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Ac,MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32077,Safety,safe,safety,32077,"586] - CMS missing symbol / function body of template; [ROOT-7598] - Size shown in dmg installer is wrong; [ROOT-7602] - CMake: Touching core/meta/inc/Linkdef.h, core/base/G__Base.cxx does not get regenerated; [ROOT-7605] - cmake -Dminimal=ON not working; [ROOT-7606] - cmake -Dfail-on-missing=ON -Dmathmore=ON not consistent; [ROOT-7663] - failure to compile master branch on ubuntu 15.04; [ROOT-7683] - Memory leak in ROOT::TSchemaRuleSet reported in ATLAS job; [ROOT-7706] - thisroot.sh not working properly for zsh. Improvements. [ROOT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new Streame",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32642,Safety,avoid,avoid,32642,"OT-7480] - improvement of the occincdir search in configure. Tasks. [ROOT-7583] - Let thisroot add ROOT to CMAKE_PREFIX_PATH. Release 6.04/06; Build. Building ROOT with cmake command not in my PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO const",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32836,Safety,detect,detect,32836," PATH now fixed ROOT-7715; Fix builtin_xrootd option that was not working for XROOTD version 4.2.2.; Option gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Pois",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:32969,Safety,avoid,avoid,32969,"ption gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:35209,Safety,safe,safety,35209,"der mouse cursor using Cocoa backend in OS X El Capitan; [ROOT-7723] - allow IOCtors to have as argument a ref to a type called void; [ROOT-7725] - MANPATH not correctly set by thisroot.sh; [ROOT-7727] - CMake: include/compiledata.h has empty CXXOPT and CXXDEBUG; [ROOT-7737] - Assert in cling when using undeclared variables; [ROOT-7744] - Crash in llvm::cl::AddLiteralOption. Improvement. [ROOT-7630] - [pcre][PPC64LE][PATCH] Update builtin_pcre to 8.37 version. Task. [ROOT-7773] - find_package(ROOT) should include a set of default libraries. Release 6.04/10; ROOT version 6.04/10 was released on 18 November, 2015.; Core. Resolve issues on SL6, 32bits when during process tear down libCling.so is removed before all the dictionary have been tear down.; Activate interpreter in inspector calls by ShowMembers [ROOT-7779)]. Interpreter. Resolve problem with static intialization related to explicit template instantiation. This fixes [ROOT-7775]. Hist. Improve thread safety of TH1::Fit by making static member of TVirtualFitter thread local. This fixes [ROOT-7791]. TNetXNGFileStager. Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path. Release 6.04/12; I/O. Add to the TClass StreamerInfo for non-stl collections. A ‘collection’ here is a class for which there is a TVirtualCollectionProxy. For example this applies to ATLAS’ DataVector.; TWebFile. Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop. Interpreter. Cache ROOT specials (ROOT-7830 and friends).; Accelerated calls as seen e.g. in PyROOT [ROOT-7840]. This fixes a PyROOT performance regression between 6.02 and 6.04, seen by ATLAS. Documentation. Apply THtml->doxygen transformation for func doc. Eases cherry picking. Bugs and Improvements. [ROOT-7789] - ROOTConfig.cmake should not set",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:38251,Safety,avoid,avoid,38251,"TGQt. Meta Library. Added a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split.; This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit.; This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘h",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:4140,Security,access,accessible,4140,"his can be found at http://en.cppreference.com/w/cpp/experimental/basic_string_view The implementation provided is extracted from libcxx. Whenever the current compiler and standard library provide an implmentation, it is used.; The type string_view describes an object that can refer to a constant contiguous sequence of char-like objects with the first element of the sequence at position zero.; This type is used throughout the ROOT code to avoid copying strings when a sub-string is needed and to extent interfaces that uses to take a const char* to take a std::string_view as thus be able to be directly directly passed a TString, a std::string or a std::string_view. Usage example:; // With SetName(std::string_view); std::string str; …; obj.SetName( str );; obj.SetName( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual l",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:4996,Security,checksum,checksum,4996,"( {str.data()+pos, len} );; Meta library; Backward Incompatibilities; TIsAProxy’s constructor no longer take the optional and unused 2nd argument which was reserved for a ‘context’. This context was unused in TIsAProxy itself and was not accessible from derived classes.; Interpreter; The new interface TInterpreter::Declare(const char* code) will declare the code to the interpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been taken from here. Except for the kBird palette. These palettes can be accessed with gStyle->SetPalette(num). num can be taken within the following enum:. kDeepSea = 51; kGreyScale = 52; kDarkBodyRadiator = 53; kBlueYellow = 54; kRainBow = 55; kInvertedDarkBodyRadiator = 56; kBird = 57; kCubehelix = 58; kGreenRedViolet = 59; kBlueRedYellow = 60; kOcean = 61; kColorPrintableOnGrey = 62; kAlpine = 63; kAquamarine = 64; kArmy = 65; kAtlantic = 66; kAurora = 67; kAvocado = 68; kBeach = 69; kBlackBody = 70; kBlueGreenYellow ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:5276,Security,access,access,5276,"erpreter with all interpreter extensions disabled, i.e. as “proper” C++ code. No autoloading or synamic lookup will be performed.; A new R__LOAD_LIBRARY(libWhatever) will load libWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been taken from here. Except for the kBird palette. These palettes can be accessed with gStyle->SetPalette(num). num can be taken within the following enum:. kDeepSea = 51; kGreyScale = 52; kDarkBodyRadiator = 53; kBlueYellow = 54; kRainBow = 55; kInvertedDarkBodyRadiator = 56; kBird = 57; kCubehelix = 58; kGreenRedViolet = 59; kBlueRedYellow = 60; kOcean = 61; kColorPrintableOnGrey = 62; kAlpine = 63; kAquamarine = 64; kArmy = 65; kAtlantic = 66; kAurora = 67; kAvocado = 68; kBeach = 69; kBlackBody = 70; kBlueGreenYellow = 71; kBrownCyan = 72; kCMYK = 73; kCandy = 74; kCherry = 75; kCoffee = 76; kDarkRainBow = 77; kDarkTerrain = 78; kFall = 79; kFruitPunch = 80; kFuchsia = 81; kGreyYellow = 82; kGreenBrownTerrain = 83; kGreenPink = 84; kIsland = 85; kLake = 86; kLightTemperature = 87; kLightTerrain = 88; kMint = 89; kNeon = 90; kPastel = 91; kPearl = 92; kPigeon = 93; kPlum = 94; kRedBlue ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:5448,Security,access,accessed,5448,"bWhatever at parse time. This allows ROOT to resolve symbols from this library very early on. It is a work-around for the following code from ROOT 5:; // ROOT 5:; void func() {; gSystem->Load(""libEvent"");; Event* e = new Event;; }; Instead, write:; // ROOT 6:; R__LOAD_LIBRARY(libEvent); #include ""Event.h"". void func() {; Event* e = new Event;; }; TClass; Introduced new overload for calculating the TClass CheckSum:; UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; which indicates via the ‘isvalid’ boolean whether the checksum could be calculated correctly or not.; TROOT; Implemented new gROOT->GetTutorialsDir() static method to return the actual location of the tutorials directory. This is $ROOTSYS/tutorials when not configuring with –prefix or -Dgnuinstall for CMake.; TColor; Add an enum to access the palette by name.; Add new palettes with 255 colors. Names and colors’ definitions have been taken from here. Except for the kBird palette. These palettes can be accessed with gStyle->SetPalette(num). num can be taken within the following enum:. kDeepSea = 51; kGreyScale = 52; kDarkBodyRadiator = 53; kBlueYellow = 54; kRainBow = 55; kInvertedDarkBodyRadiator = 56; kBird = 57; kCubehelix = 58; kGreenRedViolet = 59; kBlueRedYellow = 60; kOcean = 61; kColorPrintableOnGrey = 62; kAlpine = 63; kAquamarine = 64; kArmy = 65; kAtlantic = 66; kAurora = 67; kAvocado = 68; kBeach = 69; kBlackBody = 70; kBlueGreenYellow = 71; kBrownCyan = 72; kCMYK = 73; kCandy = 74; kCherry = 75; kCoffee = 76; kDarkRainBow = 77; kDarkTerrain = 78; kFall = 79; kFruitPunch = 80; kFuchsia = 81; kGreyYellow = 82; kGreenBrownTerrain = 83; kGreenPink = 84; kIsland = 85; kLake = 86; kLightTemperature = 87; kLightTerrain = 88; kMint = 89; kNeon = 90; kPastel = 91; kPearl = 92; kPigeon = 93; kPlum = 94; kRedBlue = 95; kRose = 96; kRust = 97; kSandyTerrain = 98; kSienna = 99; kSolar = 100; kSouthWest = 101; kStarryNight = 102; kSunset = 103; kTemperatureMap = 104; kThermometer = 105; kVale",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9165,Security,access,access,9165,"treamerInfo is now as soon as possible, i.e. after all sources have been read. One significant consequence is that now when an object is stored in a split branch the rule is associtated with the branch of the last of the rule’s sources rather than the last of the object’s data member.; Properly support TStreamerInfo written by ROOT v4.00.; Fix the ordering of the keys in a TFile being written; in particular fixing the result of GetKey and FindKey which were no longer returning the lastest cycle for a TFile being written since v5.34/11. Networking Libraries; HTTP Server; Command Interface; One can now register an arbitrary command to the server, which become visible in the web browser. Then, when the item is clicked by the user, the command ends-up in a gROOT->ProcessLineSync() call.; Custom Properties; Custom properties can be configured for any item in the server. For example, one could configure an icon for each item visible in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ dra",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:18754,Security,access,access,18754,",-20,20);; TH2F *hcol22 = new TH2F(""hcol22"",""Option COLZ0"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol21->Fill(px,5*py);; hcol22->Fill(px,5*py);; }; hcol21->SetBit(TH1::kNoStats);; hcol22->SetBit(TH1::kNoStats);; gStyle->SetPalette(1);; c1->cd(1); hcol21->Draw(""COLZ"");; c1->cd(2); hcol22->Draw(""COLZ0"");; hcol22->SetMaximum(100);; hcol22->SetMinimum(40);; return c1;; }. The parameter gStyle->SetHistTopMargin() was ignored when plotting a 2D histogram using the option E. This can be seen plotting the histogram with ""LEGO E"".; GetObjectInfo did not display the right value form ""Sum"" for histograms plotted with option SAME on top of an histogram displayed with a subrange. This was reported in ROOT-7124.; Use GeyStdDev instead of GetRMS. The stat box now shows Std Dev instead of RMS.; The Stats Format was ignored when painting the pave stats for 2D histograms. TGraph2D. Change GetHistogram() in order to be able to access the returned histogram before the 2D graph has been filled with points. That was not possible previously. This problem was reported <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19186”>here.; When a TGraph2D was entirely in the plane Z=0 the 3D could not be defined. This problem was reported <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19517”>here. TMultiGraph. When a TMultiGraph contained only one TGraph the number of bins for the internal histogram was not set correctly. This problem was reported <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19603&p=83973#p83973”>here. THStack. Implement GetNhists() to return the number of histograms in the stack.; New drawing option NOSTACKB. histograms are drawn next to each other as bar charts.; Example:; TCanvas* nostackb() {; TCanvas *cst0 = new TCanvas(""cst0"",""cst0"",600,400);; THStack *hs = new THStack(""hs"",""Stacked 1D histograms: option #font[82]{\""nostackb\""}"");. TH1F *h1 = new TH1F(""h1"",""h1"",10,-4,4);; h1->FillRandom",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:33111,Security,access,accessor,33111,"ctionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.04/08; Bugs. [ROOT-7627] - [ICC][CMake][PATCH] Pass CC and CXX to builtin_lzma if Intel C++ Compiler (ICC) Is used; [ROOT-7629] - [CMake][PPC64LE][PATCH] Set correct ROOT architecture on PPC64LE – linuxppc64gcc;",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:40048,Security,access,accessible,40048,"d the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memprobe script is broken when using CMake; [ROOT-8066] - problems creating dictionaries in pyROOT; [ROOT-8068] - Fix file flags for bin/setxrd.* bin/thisroot.*; [ROOT-8096] - genreflex crash with gcc6 build; [ROOT-8148] - Memory leak in TStorage::ObjectAlloc; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6. HEAD of the v6-04-00-patches branch; Changes will be part of the future 6.04/20. ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:17122,Testability,log,log,17122,"nts. This is useful for example in signal plus background fit, where one can fit directly the number of signal and background events, without the need to use something like TF1::IntegralError. See the tutorial tutorials/fit/fitNormSum.C as an example on how to use the TF1NormSum and perform such a fit. TF1Convolution. Another helper functor class for performing numerical convolution of functions, expressed as TF1 objects, using Fast Fourier Transform. The class requires the FFTW package installed in ROOT. The tutorial tutorials/fit/fitConvolution.C provides an example on how to create a TF1 based on the convolution of two others TF1 objects and used it to fit some data. TGraph2DPainter. In some case and extra point was drawn in the center od the plot when a TGRaph2dwas drawn with P, P0, or PCOL options. THistPainter. It was possible to interactively zoom outside the histograms’ limits. Protections have been added.; When an histogram was drawn with the option E0 and log scale along the Y axis, some additional markers were drawn at the bottom line of the plot. This was reported <a href=“http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18778”>here.; Implement the option 0 combined with the option COL as requested <a href=“https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19046”>here. When the minimum of the histogram is set to a greater value than the real minimum, the bins having a value between the real minimum and the new minimum are not drawn unless the option 0 is set.; Example:; {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; c1->Divide(1,2);; TH2F *hcol21 = new TH2F(""hcol21"",""Option COLZ"",40,-4,4,40,-20,20);; TH2F *hcol22 = new TH2F(""hcol22"",""Option COLZ0"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol21->Fill(px,5*py);; hcol22->Fill(px,5*py);; }; hcol21->SetBit(TH1::kNoStats);; hcol22->SetBit(TH1::kNoStats);; gStyle->SetPalette(1);; c1->cd(1); hcol21->Draw(""COLZ"");; c1->cd(2); hcol22->Draw(""COLZ0"");; hcol22",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:25649,Testability,log,logging,25649," to return the image in memory. Tutorials. New tutorial textviewostream.C showing how to use the TGTextViewostream widget. Build, Configuration and Testing Infrastructure. Backport Python3 compatibility of build scripts. New functionalities. Support ARM 64 bits architecture.; Partial support for PPC 64 bits Little Endian architecture.; Add “Optimized” CMAKE_BUILD_TYPE: allow highest level of optimisation of the GCC and Clang compilers (-Ofast).; Support ccache activation with cmake configuration switch.; Support link to jemalloc and tcmalloc allocators.; Careful suppression of known and understood warnings, e.g. coming from external packages. Patch Releases; Release 6.04/02; Platform Support. Added support for Intel icc 15. Build System. Define ROOT_XXX_FLAGS in ROOTConfig.cmake for use by client packages ROOT-7401; Enabled c++14 in CLING when compiling ROOT with c++14 enabled (CMake: -Dcxx14=ON, classic: –enable-cxx14). Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Pr",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:26747,Testability,test,test,26747,"utoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:27287,Testability,assert,assert,27287,"rgument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnin",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:28322,Testability,log,logging,28322," OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies R",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:9965,Usability,simpl,simple,9965," in the browser. Or one could ‘hide’ any item from the user (but keep access with normal http requests). With such properties one could specify which item is drawn when web page is loaded, or configure monitoring. See tutorials/http/httpcontrol.C macro for more details.; Method Calls; Implement exe.json requests to be able to execute any method of registered objects. This request is used to provide remote TTree::Draw() functionality.; Misc; Correctly set ‘Cache-Control’ headers when replying to http requests. Better support of STL containers when converting objects into json with TBufferJSON class.; JavaScript ROOT. Several files can now be loaded simultaneously; Use d3.time.scale to display time scales; Implemented drag and drop to superimpose histograms or graphs; Allow selection of drawing option via context menu; Better support of touch devices; Provide simple layout, making it default; Allow to open ROOT files in online session (via url parameter); One could monitor simultaneously objects from server and root files; Implement ‘autocol’ draw option - when superimposing histograms, their line colors will be automatically assigned; Implement ‘nostat’ draw option - disabled stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:12002,Usability,learn,learning,12002,"Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource varia",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14010,Usability,learn,learnt,14010,"ic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in t",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14034,Usability,learn,learning,14034,"ic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in t",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:14054,Usability,learn,learning,14054,"T_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size if one does not exist, irrespective of whether the auto cache creation is enabled. Additionally several methods giving control of the cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid ",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:23593,Usability,guid,guide,23593,y standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG. Use float numbers instead of integer to describe graphics paths to avoid rounding problems.; Implement missing math symbols.; Offer 0 as line width option. Useful to make a line invisible. TASImage. In the animated gif it is now possible to specify the delay between the last image and the fist image in case of infinite loop. (Fernando Hueso González f.gonzalez at hzdr dot de). TPadPainter. Offer 0 as line width option. Useful to make a line invisible. TPad. In TPad::ShowGuidelines the number of guide lines is limited to 15. Above that they become useless.; Print a warning if one of the pad limit is a NaN.; Fix https://sft.its.cern.ch/jira/browse/ROOT-6703. TCanvas. Make sure that “/” and “.” are not part of the method name when a canvas is saved as a .C file. TLatex. With the Cocoa backend the PDF and PS output produced miss-aligned exponents because the GetTextExtend method behaved differently in batch mode and “screen” mode. This is now fixed. See http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18883; Improve the square-root drawing in case it is small.; Better adjustment of the tilde accent position in case of Cocoa backend. TMathText. \mu is now working for Postscript output.; \splitline is now implemented. Cocoa backend. Line width and line style were not applied on boxes. 3D Graphics Libraries; GL Viewer. New option “Rotate scene” in the “Extras” tab of the GL Viewer. It allows to do a real rotation instead of a wobbling when the “Auto Rotator” is launched.; New met,MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29221,Usability,clear,clear,29221,"tour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v604/release-notes.html:29960,Usability,learn,learning,29960,"lude instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Activating prefetching makes TTree iteration slower when reading through HTTP; [ROOT-7475] - TTreeReader is retrieving the containers properly, but when used in a for loop, the elements get somehow “overridden”; [ROOT-7478] - Generating PCH fails with CXX flags with spaces; [ROOT-7491] - TLatex display issues with root 6.04; [ROOT-7509] - Build Failure on FreeBSD 10.1; [ROOT-7515] - C++14 needs GCC 5.1; [ROOT-7536] - Missing include file; [ROOT-753",MatchSource.WIKI,doc/v604/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v604/release-notes.html
https://root.cern/doc/v606/release-notes.html:5603,Availability,down,down,5603,"ter as a request to not change the current directory - this behavior is now implement by the default constructor.; Collections; In THashList and THashTable, GetListForObject now returns a pointer to const as modifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of instances, are not longer deleted if the content of the collection is deleted. Technically the element of the array are now treated by collections as if they have been allocated on the stack. This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved fr",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:5696,Availability,down,down,5696,"ter as a request to not change the current directory - this behavior is now implement by the default constructor.; Collections; In THashList and THashTable, GetListForObject now returns a pointer to const as modifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of instances, are not longer deleted if the content of the collection is deleted. Technically the element of the array are now treated by collections as if they have been allocated on the stack. This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved fr",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:8888,Availability,avail,available,8888,"tion -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - rootbrowse: to open the file in a TBrowser - rootcp: to copy content from one file to another - rooteventselector: to select a subset of the events in a tree contained in a file - rootls: to list the content of a rootfile - rootmkdir: to create a directory in a rootfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those rou",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:20219,Availability,error,error,20219,"nd client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPo",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21436,Availability,avail,available,21436," open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in TH",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21797,Availability,avail,available,21797," functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:23914,Availability,avail,available,23914,"ploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the m",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31645,Availability,error,errors,31645,"t.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:1352,Deployability,release,release,1352,"File.; I/O New functionalities. TTree Libraries; Improvement of handling of default number of entries; MakeSelector. Histogram Libraries; TH1; TGraph; TGraph2D; Fitting; TFormula. Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schill",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:1409,Deployability,release,release,1409,"ntries; MakeSelector. Histogram Libraries; TH1; TGraph; TGraph2D; Fitting; TFormula. Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,CERN, LHCb; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; W",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:1439,Deployability,patch,patches,1439,"ntries; MakeSelector. Histogram Libraries; TH1; TGraph; TGraph2D; Fitting; TFormula. Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,CERN, LHCb; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; W",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:1494,Deployability,release,released,1494,". Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,CERN, LHCb; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zi",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3554,Deployability,update,updated,3554," moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointe",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7299,Deployability,release,release,7299,"Match, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - r",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:8946,Deployability,update,updated,8946,"ng or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - rootbrowse: to open the file in a TBrowser - rootcp: to copy content from one file to another - rooteventselector: to select a subset of the events in a tree contained in a file - rootls: to list the content of a rootfile - rootmkdir: to create a directory in a rootfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its v",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:10101,Deployability,update,update,10101,"in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its value has been changed to be equal to TTree::kMaxEntries.; MakeSelector; TTree::MakeSelector has been update to generate a code skeleton based on the TTreeReader rather than the old style relying on numeric data members replacements for the user objects. The main advantage is the lifting of the problem related to the fact that the old style was using fixed size array to represent variable size collection.; TTree::MakeSelector takes an option parameter that can be used to specify the branches that will have a data member. - If option is ""=legacy"", a pre-ROOT6 selector will be generated (data members and branch pointers instead of TTreeReaders). - If option is empty, readers will be generated for each leaf. - If option is “@”, readers will be generated for the topmost branches. - Individual branches can also be picked by their name: - “X” generates readers for leaves of X. - “@X” generates a reader for X as a whole. - “@X;Y” generates a reader for X as a whole and also readers for the leaves of Y. - For further examples see the figure below.; html ttree_makeselector_option_examples.png; The generated code in selector.h includes the followin",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:17581,Deployability,configurat,configuration,17581,".; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure a",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18039,Deployability,configurat,configuration,18039,"ocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdige",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18084,Deployability,update,update,18084,"back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21516,Deployability,integrat,integration,21516," on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21565,Deployability,integrat,integrating,21565," on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22145,Deployability,integrat,integration,22145,"3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Dox",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22727,Deployability,release,release,22727,"lining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake doe",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25806,Deployability,update,update,25806,"ates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25983,Deployability,update,update,25983,"case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26893,Deployability,configurat,configuration,26893,"yEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tri",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:27599,Deployability,install,installation,27599,"s. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tries to follow #includes from LinkDef.h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROO",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:27868,Deployability,install,installation,27868,"es and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tries to follow #includes from LinkDef.h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT wi",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:28721,Deployability,update,update,28721,"h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-804",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29300,Deployability,update,updated,29300,"5] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is no",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31803,Deployability,release,release,31803,"DG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to pu",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31986,Deployability,patch,patch,31986,". Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32941,Deployability,release,release,32941,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:33094,Deployability,patch,patches,33094,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:33190,Deployability,patch,patches,33190,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:33358,Deployability,patch,patches,33358,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3430,Energy Efficiency,reduce,reduced,3430," moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointe",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:5747,Energy Efficiency,allocate,allocated,5747,"odifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of instances, are not longer deleted if the content of the collection is deleted. Technically the element of the array are now treated by collections as if they have been allocated on the stack. This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionPro",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:6037,Energy Efficiency,allocate,allocated,6037," TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of instances, are not longer deleted if the content of the collection is deleted. Technically the element of the array are now treated by collections as if they have been allocated on the stack. This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25611,Energy Efficiency,reduce,reduce,25611,"e user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a construc",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29951,Energy Efficiency,consumption,consumption,29951," storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. P",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3417,Integrability,wrap,wrapper,3417,"IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at d",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:9456,Integrability,rout,routine,9456,"et of the events in a tree contained in a file - rootls: to list the content of a rootfile - rootmkdir: to create a directory in a rootfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its value has been changed to be equal to TTree::kMaxEntries.; MakeSelector; TTree::MakeSelector has been update to generate a code skeleton based on the TTreeReader rather than the old style relying on numeric data members replacements for the user objects. The main advantage is the lifting of the problem related to the fact that the old style was using fixed size array to represent variable size collection.; TTree::MakeSelector takes an option parameter that can be used",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:9613,Integrability,rout,routines,9613,"otfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default number of entries; A new const expression value: TTree::kMaxEntries has been introduced to express the largest possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its value has been changed to be equal to TTree::kMaxEntries.; MakeSelector; TTree::MakeSelector has been update to generate a code skeleton based on the TTreeReader rather than the old style relying on numeric data members replacements for the user objects. The main advantage is the lifting of the problem related to the fact that the old style was using fixed size array to represent variable size collection.; TTree::MakeSelector takes an option parameter that can be used to specify the branches that will have a data member. - If option is ""=legacy"", a pre-ROOT6 selector will be generated (data members ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:13654,Integrability,interface,interface,13654,"ad->SetLogy(true);; }; The problem was reported here. TGraph2D; Add a new implementation for Delauney interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:13704,Integrability,interface,interfaces,13704,"ey interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containin",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:14016,Integrability,interface,interface,14016,"Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawP",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:15151,Integrability,wrap,wraps,15151,"e R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters that are used for newline placement. Current TTeXDump::DrawPolyMarker would often produce a long contiguous lines that trigger a forceful linewrap that can happen in the middle of real number constant (ignored by latex) or even in the middle of latex command (producing incorrect file). One solution would be to rewrite TTeXDump using only PrintRaw (that you can’t mix with PrintStr/PrintFast/WriteReal). The other would be to fix PrintFast to not introduce forced newline. The third option is less intrusive and just adds additional spaces to provide clues for the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:15832,Integrability,wrap,wrapping,15832,"minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters that are used for newline placement. Current TTeXDump::DrawPolyMarker would often produce a long contiguous lines that trigger a forceful linewrap that can happen in the middle of real number constant (ignored by latex) or even in the middle of latex command (producing incorrect file). One solution would be to rewrite TTeXDump using only PrintRaw (that you can’t mix with PrintStr/PrintFast/WriteReal). The other would be to fix PrintFast to not introduce forced newline. The third option is less intrusive and just adds additional spaces to provide clues for the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and #backslash were mis-aligned. The following macro demonstrate the problem:; {; gStyle->SetTextAlign(22);; TLatex t(.5,.5,""#minus100 #mp100 #plus100 #hbar #backslash"");; t.Draw();; }; The angle of a TLatex object was set to 0 if the GetYsize method was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pix",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19839,Integrability,interface,interfaces,19839,"d restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illus",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:20617,Integrability,interface,interface,20617,"er specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providin",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:20679,Integrability,interface,interface,20679,"hould be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. T",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21516,Integrability,integrat,integration,21516," on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21565,Integrability,integrat,integrating,21565," on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22145,Integrability,integrat,integration,22145,"3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Dox",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25754,Integrability,interface,interfaces,25754,"ccess check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32547,Integrability,depend,dependency,32547,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7165,Modifiability,variab,variable,7165,"ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7491,Modifiability,extend,extended,7491,"mbers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - rootbrowse: to open the file in a TBrowser - rootcp: to copy content from one file to another - rooteventselector: to select a subset of the events in a tree contained in a file - rootls: t",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:10382,Modifiability,variab,variable,10382,"possible entry number in a TTree. This is used in two main cases:. as the default value for the requested number of entries a routine should be applied to; for example this is used for TTree::Draw and TTree::Process. Previously the default was only 1 billions entries, causing those routines to end early in case of very large trees.; as the default value for the number of entries returned by TChain::GetEntriesFast. The previous value was kBigNumber (set to 1234567890) and internally (but somewhat inconsistently, see ROOT-6885) a larger value was used (named theBigNumber). Now TTree::kMaxEntries is used throughout TChain. TChain::kBigNumber is deprecated and its value has been changed to be equal to TTree::kMaxEntries.; MakeSelector; TTree::MakeSelector has been update to generate a code skeleton based on the TTreeReader rather than the old style relying on numeric data members replacements for the user objects. The main advantage is the lifting of the problem related to the fact that the old style was using fixed size array to represent variable size collection.; TTree::MakeSelector takes an option parameter that can be used to specify the branches that will have a data member. - If option is ""=legacy"", a pre-ROOT6 selector will be generated (data members and branch pointers instead of TTreeReaders). - If option is empty, readers will be generated for each leaf. - If option is “@”, readers will be generated for the topmost branches. - Individual branches can also be picked by their name: - “X” generates readers for leaves of X. - “@X” generates a reader for X as a whole. - “@X;Y” generates a reader for X as a whole and also readers for the leaves of Y. - For further examples see the figure below.; html ttree_makeselector_option_examples.png; The generated code in selector.h includes the following: - Identification of the original Tree and Input file name - Definition of selector class (data and functions) - The following class functions: - constructor and destructor ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:14128,Modifiability,plug-in,plug-in,14128,"ogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters th",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:15566,Modifiability,rewrite,rewrite,15566,"-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters that are used for newline placement. Current TTeXDump::DrawPolyMarker would often produce a long contiguous lines that trigger a forceful linewrap that can happen in the middle of real number constant (ignored by latex) or even in the middle of latex command (producing incorrect file). One solution would be to rewrite TTeXDump using only PrintRaw (that you can’t mix with PrintStr/PrintFast/WriteReal). The other would be to fix PrintFast to not introduce forced newline. The third option is less intrusive and just adds additional spaces to provide clues for the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and #backslash were mis-aligned. The following macro demonstrate the problem:; {; gStyle->SetTextAlign(22);; TLatex t(.5,.5,""#minus100 #mp100 #plus100 #hbar #backslash"");; t.Draw();; }; The angle of a TLatex object was set to 0 if the GetYsize method was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produce",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:17581,Modifiability,config,configuration,17581,".; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure a",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18039,Modifiability,config,configuration,18039,"ocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdige",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18544,Modifiability,config,configure,18544,"s. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19046,Modifiability,config,configured,19046,"nt solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to t",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:21665,Modifiability,enhance,enhanced,21665," on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22567,Modifiability,rewrite,rewrite,22567,"tegrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:23887,Modifiability,config,configure,23887,"ploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the m",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26893,Modifiability,config,configuration,26893,"yEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tri",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29493,Modifiability,inherit,inheriting,29493,"ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - pro",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29874,Modifiability,inherit,inheritance,29874,"entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29980,Modifiability,plugin,plugins,29980," storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. P",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32641,Modifiability,config,config,32641,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3713,Performance,multi-thread,multi-threaded,3713," moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointe",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7377,Performance,perform,performance,7377,"Match, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - r",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:8229,Performance,perform,performed,8229,"ach and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to streamline very common operations performed on root files, like listing their content or creating directories. The command line utilities are: - rootbrowse: to open the file in a TBrowser - rootcp: to copy content from one file to another - rooteventselector: to select a subset of the events in a tree contained in a file - rootls: to list the content of a rootfile - rootmkdir: to create a directory in a rootfile - rootmv: to move content across files - rootprint: to plot content (histograms, graphs) of files - rootrm: to remove content from files These utilities took inspiration from the well known *nix commands and all offer the -h switch which provides documentation for all options available and example invocation lines.; TBufferFile.; We updated TBuffer::Expand to properly shrink the buffer when requested, hence reducing memory usage in some cases.; I/O New functionalities; We added support for template parameter packs in class name involved in the I/O.; TTree Libraries; Improvement of handling of default n",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:15180,Performance,optimiz,optimized,15180,"iption of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters that are used for newline placement. Current TTeXDump::DrawPolyMarker would often produce a long contiguous lines that trigger a forceful linewrap that can happen in the middle of real number constant (ignored by latex) or even in the middle of latex command (producing incorrect file). One solution would be to rewrite TTeXDump using only PrintRaw (that you can’t mix with PrintStr/PrintFast/WriteReal). The other would be to fix PrintFast to not introduce forced newline. The third option is less intrusive and just adds additional spaces to provide clues for the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and #backslash were mis-aligned. The following macro demonstrate the problem:; {; gStyle->SetTextAlign(22);; TLatex t(.5,.5,""#minus100 #mp100 #plus100 #hbar #backslash"");; t.Draw();;",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19217,Performance,optimiz,optimize,19217,"or example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:20754,Performance,perform,perform,20754,"hould be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemented in the class TProcPool, provides the possibility to perform in parallel a very generic set of tasks, described by macros, functions or lambdas.; This illustrates the usage of lambdas:; {; TProcPool pool;; auto ten = pool.MapReduce([]() { return 1; }, 10, [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); }); }; And this how it can be used to generate ten histos and merge them:; {; TObject *CreateAndFillHists(); {. TH1F *h = new TH1F(""h"", """", 100, -3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. T",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25461,Performance,cache,cache,25461," linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from maste",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25536,Performance,cache,cache,25536,"e user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a construc",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25774,Performance,cache,cache,25774,"ates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25829,Performance,cache,cache,25829,"ates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:25963,Performance,cache,cachesize,25963,"ng the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRo",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26006,Performance,cache,cache,26006,"case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26066,Performance,cache,cachesize,26066,"case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26265,Performance,cache,cache,26265,"This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function ex",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:28592,Performance,cache,cache,28592,"865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tries to follow #includes from LinkDef.h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce au",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29826,Performance,optimiz,optimized,29826,"entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31881,Performance,load,loaded,31881,". Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32719,Performance,race condition,race condition,32719,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:163,Safety,safe,safety,163,". ROOT Version 6.06 Release Notes. ROOT Version 6.06 Release Notes; 2015-12-10. Introduction; ROOT reference manual; Core Libraries; Dictionary generation; Thread safety and thread awareness; TDirectory::TContext; Collections; Global resources.; Code Cleanups. Interpreter; I/O Libraries; hadd; Command line utilities; TBufferFile.; I/O New functionalities. TTree Libraries; Improvement of handling of default number of entries; MakeSelector. Histogram Libraries; TH1; TGraph; TGraph2D; Fitting; TFormula. Math Libraries; Random numbers. R Interface; TMVA; RooFit Libraries; 2D Graphics Libraries; THistPainter; TTeXDump; TLatex; TColor; TMultiGraph; TASImage; TCreatePrimitives; TCanvas; Cocoa Backend; freetype library. 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; TNetXNGFileStager; TWebFile. GUI Libraries; Montecarlo Libraries; Multi-processing; Language Bindings; Notebooks. JavaScript ROOT; Class Reference Guide; Tutorials; Build, Configuration and Testing Infrastructure; Patch Releases; Release 6.06/02; Core; Dictionaries; Interpreter; Meta Library; TTree; Histogram Libraries; Math; TColor; PyROOT; Bug Fixes and Tasks. Release 6.06/04; General; Dictionaries; Interpreter Library; I/O; Meta; Core; Minuit; Bug fixes. Release 6.06/06; Cling; Core; Dictionaries; TTree; Bugs fixed in this release. Release 6.06/08; Core; Hist. Bugs fixed in this release; HEAD of the v6-06-00-patches branch. Introduction; ROOT version 6.06/00 was released on December 10, 2015.; For more information, see:; http://root.cern.ch; The following people have contributed to this new version:; David Abdurachmanov, CERN, CMS,; Bertrand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3302,Safety,safe,safety,3302,"IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at d",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3596,Safety,avoid,avoid,3596," moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointe",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:4068,Safety,safe,safe,4068,"b extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor.; Collections; In THashList and THashTable, GetListForObject now returns a pointer to const as modifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer de",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7074,Safety,avoid,avoid,7074,"This fixes the issue described at ROOT-7846.; Code Cleanups.; Several definition where moved from the global or ROOT namespace to the ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a opt",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:13035,Safety,safe,safety,13035,"tionality is replaced by the TH1::SetCanExtend function. TGraph. TGraph::GetHistogram() was resetting the TimeDisplay attribute of axis. The problem was reported here.; Change TGraph::ComputeRange: in case of log scale the minimum along X and Y axis are now set to the lowest positive values of the graph. Previously a % of the maximum was used which may hide some points like in the following example; {; TGraph * gr = new TGraph(10);; for (int i = 0;i<10;i++) gr->SetPoint(i,i,TMath::Exp(-10.0*i));; for (int i = 5;i<10;i++) gr->SetPoint(i,i,0.);; gr->Draw(""apl"");; gr->SetMarkerStyle(20);; gPad->SetLogy(true);; }; The problem was reported here. TGraph2D; Add a new implementation for Delauney interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. Se",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:16813,Safety,avoid,avoid,16813,"r the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and #backslash were mis-aligned. The following macro demonstrate the problem:; {; gStyle->SetTextAlign(22);; TLatex t(.5,.5,""#minus100 #mp100 #plus100 #hbar #backslash"");; t.Draw();; }; The angle of a TLatex object was set to 0 if the GetYsize method was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly other",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:17228,Safety,detect,detect,17228,"w();; }; The angle of a TLatex object was set to 0 if the GetYsize method was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of PO",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:24318,Safety,safe,safe,24318,"ed on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:24351,Safety,safe,safe,24351,"ed on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:28286,Safety,safe,safe,28286,"es and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tries to follow #includes from LinkDef.h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT wi",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:28974,Safety,avoid,avoid,28974,"hen building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autopa",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:29861,Safety,detect,detection,29861,"entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:30047,Safety,safe,safety,30047,"ely on ROOT_INCLUDE_PATH only at runtime to find headers. Interpreter Library. Resolve memory hoarding in some case of looking up functions ROOT-8145. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:30310,Safety,safe,safe,30310,"tion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check fo",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31192,Safety,safe,safety,31192,"OOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] -",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:31632,Safety,detect,detection,31632,"t.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32247,Safety,safe,safe,32247,"dPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32783,Safety,avoid,avoiding,32783,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:3394,Security,access,access,3394,"IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at d",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:7234,Security,access,access,7234,"ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18429,Security,access,accessible,18429,"s. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18690,Security,access,access,18690,"the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18832,Security,access,accessible,18832,"ng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:18867,Security,access,access,18867,"for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19028,Security,authenticat,authentication,19028,"nt solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request and used as arguments of objects method execution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to t",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19316,Security,expose,expose,19316,"xecution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a cra",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19356,Security,expose,exposed,19356,"xecution in exe.bin and exe.json requests. Request and response HTTP headers are now directly accessible in THttpCallArg class; When command is registered with THttpServer::RegisterCommand() method, one could configure additional arguments which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a cra",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19559,Security,access,access,19559,"ts which should be submitted when command is executed with cmd.json requests; Introduce restriction rules for objects access with THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This modul",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:24723,Security,access,access,24723," build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the mechanism checking the base classes. Instead of using InheritsFrom, which lead in some cases, including the case where the class derived from an STL collection, to spurrious autoparsing (to look at the base class of the collection!), we use a custom walk through the tree of base classes that checks their value of fCanSplit. This also has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyE",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:26301,Security,access,access,26301,"e class that prevent its derived class from being split’ to any user class. This fixes ROOT-7972.; TTree. Do not automatically setup read cache during TTree::Fill(). This fixes ROOT-8031.; Fast Cloning We added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address ROOT-5078. It can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces. The new cache is enabled by default, to update the size of the cache or disable it from TTreeCloner use: TTreeCloner::SetCacheSize. To do the same from TTree::CopyEntries add to the option string “cachesize=SIZE”. To update the size of the cache or disable it from hadd, use the command line option -cachesize SIZE. SIZE shouyld be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Histogram Libraries. Protect access to TROOT::GetListOfGlobalFunctions in TFormula. Math. Update MixMax random number generator for 32 bit architectures. TColor. Import TColor from master to make sure the high quality palettes are defined only ones. This was requested here. PyROOT. Fix case where c++ exception in a constructor were not propagated to python ROOT-7864; Fix case where PyROOT was unable to call copy constructor ROOT-7783; Fix handling of vector<enums> ROOT-7916; Fix the wrong return value when calling a c++ function returning short, or when retuning a char with a negative value ROOT-7872; Added a new configuration option (ROOT.PyConfig.DisableRootLogon) to disable processing of the rootlogon[.py|C] macro in addition to the -n option in the command arguments. Bug Fixes and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always rel",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:27811,Security,access,access,27811,"es and Tasks. [ROOT-7426] - Cannot print elements of vector on Mac; [ROOT-7739] - TVectorD times double returns a TH1 on ROOT command line; [ROOT-7825] - wrong value passed to function expecting “const T*&""; [ROOT-7830] - Cling automatic RooFit objects always reloaded from file; [ROOT-7862] - CMake Error: CMake can not determine linker language for target: g2root; [ROOT-7864] - Segfault in __cf_15 and FastCall (c++ exception in a constructor is not propagated to python); [ROOT-7865] - root commandline tools are not executable after installation; [ROOT-7872] - PyROOT: wrong return value when calling a c++ function returning short; [ROOT-7879] - Autoloader (parser?) tries to follow #includes from LinkDef.h; [ROOT-7881] - Uninitialized member access in TFormula => undefined behaviour; [ROOT-7891] - installation instructions for root notebooks incomplete; [ROOT-7892] - Incoherent version of Python when building tmva/pymva; [ROOT-7896] - CMake: visibility inconsistency; [ROOT-7901] - Double-free in TROOT::EndOfProcessCleanups redux; [ROOT-7912] - Failure with -Dbuiltin_davix=ON on 64bit Ubuntu; [ROOT-7916] - pyroot problem with std::vector of enum; [ROOT-7927] - TPluginHandler::CheckForExecPlugin is not thread safe; [ROOT-7935] - Need a better way stop PyROOT from reading .rootlogon.(py|C); [ROOT-7940] - Incorrect handling of LLVM Threading; [ROOT-8003] - Root 6.06 slow to; [ROOT-8015] - cmake not honoring -Dbuiltin_lzma=OFF; [ROOT-8019] - Warning with spaces in the binary name; [ROOT-8031] - TTree auto (read) cache setup during Fill; [ROOT-7776] - Integrate GSL 2.0 in ROOT. Release 6.06/04; Released on May 4, 2016; General. Significant update of the valgrind suppression file to hide intentional lack of delete of some entities at the end of the process.; Resolved several memory leaks. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT wi",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:32475,Security,access,accessible,32475,"ce commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:12283,Testability,log,log,12283,"ctor and destructor - void Begin(TTree tree) - void SlaveBegin(TTree tree) - void Init(TTree *tree) - Bool_t Notify() - Bool_t Process(Long64_t entry) - void Terminate() - void SlaveTerminate(); The class selector derives from TSelector. The generated code in selector.C includes empty functions defined above.; To use this function:. connect your Tree file (eg: TFile f(""myfile.root"");); T->MakeSelector(""myselect"");. where T is the name of the Tree in file myfile.root and myselect.h, myselect.C the name of the files created by this function. In a ROOT session, you can do:; root > T->Process(""myselect.C""); Histogram Libraries; TH1. Fix a bug in using the buffer with weights different than one; Remove the kCanRebin bit, that it was not used anymore. Its functionality is replaced by the TH1::SetCanExtend function. TGraph. TGraph::GetHistogram() was resetting the TimeDisplay attribute of axis. The problem was reported here.; Change TGraph::ComputeRange: in case of log scale the minimum along X and Y axis are now set to the lowest positive values of the graph. Previously a % of the maximum was used which may hide some points like in the following example; {; TGraph * gr = new TGraph(10);; for (int i = 0;i<10;i++) gr->SetPoint(i,i,TMath::Exp(-10.0*i));; for (int i = 5;i<10;i++) gr->SetPoint(i,i,0.);; gr->Draw(""apl"");; gr->SetMarkerStyle(20);; gPad->SetLogy(true);; }; The problem was reported here. TGraph2D; Add a new implementation for Delauney interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. T",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:14525,Testability,log,log,14525,"gner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters that are used for newline placement. Current TTeXDump::DrawPolyMarker would often produce a long contiguous lines that trigger a forceful linewrap that can happen in the middle of real number constant (ignored by latex) or even in t",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:17274,Testability,test,tested,17274,"was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly otherwise linking will returns in undefined references. Otherwise we would need to check for libpng and libbzip2 on the system and adjust FREETYPE_LIBRARIES to include -lpng and -lbzip2. The current solution goes for the minimal configuration. The original request for this update was posted here.; 3D Graphics Libraries; Geometry Libraries; Database Libraries; Networking Libraries; THttpServer; Support of POST HTTP requests. For example, ROOT objects can be send with POST request ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:23065,Testability,log,logical,23065,"res.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. ",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:2663,Usability,guid,guide,2663,"rand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,CERN, LHCb; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:4941,Usability,clear,clearly,4941,"hanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor.; Collections; In THashList and THashTable, GetListForObject now returns a pointer to const as modifying the returned list (in particular adding to it) can break invariant of THashTable so we need to clearly mark the list as not being allowed to be modified.; In TSeqCollection::Merge, we no longer delete the object in the case where the original collection is marked as a owner.; Global resources.; Several tweaks to if and when, resources held by the global ROOT object (TROOT, TApplication) are deleted. When the default TApplication is replaced by a user provide TApplication, do not call EndOfProcessCleanups and co. and thus do not delete TFiles, TSockets or TColors that have already been created. In EndOfProcessCleanups, we now delete the objects held in TROOT’s TDirectory part. If the libCling library is unloaded, this now induces an immediate tear down of the ROOT resources; consequently objects might be deleted sooner in the process tear down process on some platforms.; TObject instances allocated as part of an array and made part of a collection, as for example the TCanvas instances into the global list of i",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:14329,Usability,learn,learning,14329,"ogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. See more at the ROOT-R User Guide.; TMVA; Add new TMVA plug-in based on R and Python (using Scikit-Learn) * See the RMVA Web page for a detailed description of the new TMVA method based on R * See the PyMVA Web page for detailed description of the machine learning methods added in TMVA and based on the Python Scikit-Learn package.; RooFit Libraries; 2D Graphics Libraries; THistPainter; Improve the algorithm to compute the lower limit of an axis in log scale when its real lower limit is 0. The problem was reported in ROOT-7414.; Using the COL option with histograms having some negative bins; the empty bins (containing 0) are drawn. In some cases one wants to not draw empty bins (containing 0) of histograms having a negative minimum. The option 1, used with the option COL, allows to do that.; Implement the Log option for CANDLE plots as requested here.; TTeXDump; From Dmitry Kalinkin (via github): Fix file corruption in TTeXDump::DrawPolyMarker The current implementation of TTeXDump uses TVirtualPS::PrintFast based methods to output TeX markup with automatic line-wraps. Yet these methods are optimized for PostScript format where there are a lot of space characters th",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:19705,Usability,clear,clear,19705,"th THttpServer::Restrict() method. Up to now general read-only flag was applied - either everything read-only or everything is fully accessible. Now one could restrict access to different parts of objects hierarchy or even fully ‘hide’ them from the client. Restriction based on user account name, which is applied when htdigest authentication is configured. One also able to allow execution of selected methods.; Implement multi.bin and multi.json requests. One could request many items with single HTTP request. Let optimize communication between server and client.; With SNIFF tag in ClassDef() comments one could expose different properties, which than exposed by the TRootSniffer to the client with h.json requests. Such possibility ease implementation of client-side code for custom classes.; Allow to bind http port with loopback address. This restrict access to http server only from localhost. One could either specify ‘loopback’ option in constructor: new THttpServer(“http:8080?loopback”) or in clear text specify IP address to which http socket should be bind: new THttpServer(“http:127.0.0.1:8080”) If host has several network interfaces, one could select one for binding: new THttpServer(“http:192.168.1.17:8080”); TNetXNGFileStager; Fixed ROOT-7703. This restores the behavior of Locate() to that found with TXNetFileStager: Rather than return only the xrootd server’s reply, the endpoint hostname is looked up and Locate() returns the full url, including the path.; TWebFile; Fixed ROOT-7809. Returns an error for a redirect which does not specify the new URI, rather than going into a loop.; Fixed ROOT-7817. Avoid a crash under some circumstances when trying to open an invalid path.; GUI Libraries; Montecarlo Libraries; Multi-processing; With this version we introduce a new module, core/multiproc, for multi-processing on multi-core machines. This module is based on fork technology and offers an interface inspired from Python multiprocessor module. The new interface, implemente",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22116,Usability,simpl,simplest,22116,"3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Dox",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:22784,Usability,guid,guide,22784,"e automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files n",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v606/release-notes.html:23448,Usability,guid,guide,23448,"nd older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked",MatchSource.WIKI,doc/v606/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v606/release-notes.html
https://root.cern/doc/v608/annotated.html:16700,Availability,error,error,16700,"quaredWeightsKeeps track of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, c",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:16722,Availability,error,error,16722,"ck of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and m",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17695,Availability,error,error,17695,"y error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  ►CParsingStateRAIIRAII used to store Parser, Se",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24533,Availability,error,error,24533,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41857,Availability,error,error,41857,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:54494,Availability,avail,available,54494,"ntsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumil",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:54629,Availability,error,error,54629,"ction"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumili",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:57088,Availability,avail,available,57088,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:58850,Availability,error,error,58850,"Failed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffC",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:59118,Availability,error,errors,59118,"ng values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a g",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:59263,Availability,error,errors,59263,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:60674,Availability,error,errors,60674,"inimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.e ;  CMnMachinePrecisionDetermines the relative floating point arithmetic precision ;  CMnMigradAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinimizeAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinosAPI class for Minos Error analysis (asymmetric errors); minimization has to be done before and Minimum must be valid; possibility to ask only for one side of the Minos Error; ;  CMnParabolaThis class defines a parabola of the form a*x*x + b*x + c ;  CMnParabolaFactory;  CMnParabolaPointA point of a parabola ;  CMnParameterScanScans the values of FCN as a function of one Parameter and retains the best function and Parameter values found ;  CMnPlotMnPlot produces a text-screen graphical output of (x,y) points, e.g ;  CMnPosDefForce the covariance matrix to be positive defined by adding extra terms in the diagonal ;  CMnPrint;  CMnRefCountedPointer;  CMnReferenceCounter;  CMnScanAPI class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for mini",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:62489,Availability,error,errors,62489,"  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has par",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:62621,Availability,error,errors,62621,"API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Ne",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:68777,Availability,error,errors,68777,";  CBinaryTree;  CCCPruner;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactory;  CClassInfo;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfig;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTest;  CCostComplexityPruneTool;  CCrossEntropy;  CCrossValidation;  CCrossValidationResult;  CDataInputHandler;  CDataLoader;  CDataSet;  ►CDataSetFactory;  CEventStats;  CDataSetInfo;  CDataSetManager;  CDecisionTree;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneTool;  CFactory;  CFitterBase;  CGeneticAlgorithm;  CGeneticFitter;  CGeneticGenes;  CGeneticPopulation;  CGeneticRange;  CGiniIndex;  CGiniIndexWithLaplace;  CHuberLossFunction;  CHuberLossFunctionBDT;  CHyperParameterOptimisation;  CHyperParameterOptimisationResult;  CIFitterTarget;  CIMethod;  CIncrement;  CInterval;  CIPruneTool;  CIPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook ;  CKDEKernel;  CLDA;  CLeastSquaresLossFunction;  CLeastSquaresLossFunctionBDT;  CLogInterval;  CLossFunction;  CLossFunctionBDT;  CLossFunctionEventInfo;  CMCFitter;  CMethodANNBase;  CMethodBase;  CMethodBayesClassifier;  CMethodBDT;  CMethodBoost;  CMethodC50;  CMethodCategory;  CMethodCFMlpANN;  ►CMethodCFMlpANN_Utils;  CVARn2;  CMethodCompositeBase;  CMethodCuts;  ►CMethodDNN;  CTTrainingSettings;  CMethodDT;  CMethodFDA;  CMethodFisher;  CMethodHMatrix;  CMethodInfo;  CMethodKNN;  CMethodLD;  CMethodLikelihood;  CMethodMLP;  CMethodPDEFoam;  CMethodPDERS;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFit;  CMethodRXGB;  CMethodSVM;  CMethodTMlpANN;  CMinuitFitter;  CMinuitWrapper;  CMisClassificationError;  CMonitoring;  CMsgLogger;  CNode;  Cnull_t;  COptimizeConfigParameters;  COption;  COption< T * >;  COptionBase;  ►COptionMapClass to storage options for the diff",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:78308,Availability,error,error,78308,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:89034,Availability,error,error,89034,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:89135,Availability,error,error,89135,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92661,Availability,error,error,92661,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:96070,Availability,error,errors,96070,"sociated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101023,Availability,error,error,101023,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108853,Availability,error,error,108853,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:151944,Availability,avail,available,151944,"istBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeCon",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:155854,Availability,error,error,155854,"TGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGLViewer ;  CTGLVoxelPainterPaint TH3 histograms as ""voxels"" - colored boxes, transparent if transfer function was specified ;  CTGLWidgetGL window with context ;  ►CTGMainFrame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:157408,Availability,error,errors,157408,"ame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin an",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:157512,Availability,error,error,157512,"orFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithI",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:157596,Availability,error,error,157596,"r;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobS",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:157926,Availability,error,error,157926,"Pack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobStatus;  CTGridJobStatusList;  CTGridResult;  CTGroupButtonA specialized TButton used in a group of Buttons ;  CTGRowLayout;  CTGScrollBar;  CTGScrollBarElement;  CTGSearchDialog;  CTGSearchType;  CTGSelectBoxThis class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data members ;  CTGSelectedPic",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:188157,Availability,error,error,188157,"  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring is legal ;  CTSVDUnfoldSVD Approach to Data Unfolding ;  CTSVG",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191715,Availability,robust,robust,191715," class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session hand",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4165,Deployability,configurat,configuration,4165,"BarlowCache;  CSample;  CShapeFactor;  CShapeSys;  CStatError;  CStatErrorConfig;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4491,Deployability,configurat,configuration,4491,"mputation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6511,Deployability,integrat,integrate,6511,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7181,Deployability,configurat,configuration,7181,"ovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8303,Deployability,configurat,configuration,8303,"ymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction t",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17436,Deployability,configurat,configuration,17436,"s ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal; ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24147,Deployability,integrat,integration,24147,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:25216,Deployability,integrat,integration,25216," Operation Class ;  CAddPolicyMatrix addition policy ;  CAddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  CAssignStructure to assign from an expression based to general matrix to general matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Dummy Structure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthos",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29822,Deployability,integrat,integration,29822,ary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by ,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29896,Deployability,integrat,integration,29896,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with deri,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31054,Deployability,integrat,integration,31054,"rGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimiz",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31517,Deployability,integrat,integration,31517,"DerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for i",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37689,Deployability,integrat,integration,37689,"simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37758,Deployability,integrat,integration,37758,"ramDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricG",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37834,Deployability,integrat,integration,37834,"iDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37930,Deployability,integrat,integration,37930,";  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:38279,Deployability,configurat,configuration,38279,"ons It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradie",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:42516,Deployability,integrat,integration,42516," or limited variables (support both double and single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COne",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:50993,Deployability,integrat,integration,50993,"on Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51150,Deployability,integrat,integration,51150," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51245,Deployability,integrat,integrator,51245," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51374,Deployability,integrat,integration,51374," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51462,Deployability,integrat,integration,51462," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51636,Deployability,integrat,integration,51636," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:58812,Deployability,release,release,58812,"inimumError keeps the inv ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFuncti",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:62454,Deployability,release,release,62454,"rameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParam",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72386,Deployability,continuous,continuous,72386,"bleTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional c",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75838,Deployability,integrat,integration,75838," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:77316,Deployability,integrat,integrators,77316,"ooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CRooAbsMCStudyModuleRooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy ;  CRooAbsMomentRooAbsMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooAbsNumGeneratorClass RooAbsNumGenerator is the abstract base class for MC event generator implementations like RooAcceptReject and RooFoam ;  CRooAbsOptTestStatisticRooAbsOptTestStatistic is the abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80157,Deployability,integrat,integration,80157,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80279,Deployability,integrat,integration,80279,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80976,Deployability,integrat,integration,80976,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81027,Deployability,integrat,integration,81027,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81906,Deployability,integrat,integration,81906,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:83269,Deployability,integrat,integrated,83269,"tive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooBlindTools;  CRooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing ;  CRooBreitWignerClass RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape ;  CRooBrentRootFinderImplement the abstract 1-dimensional root finding interface using the Brent-Decker method ;  CRooBukinPdfRooBukinPdf implements the NovosibirskA function ;  CRooCachedPdfRooCachedPdf is an implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor ;  CRooCachedRealRooCachedReal is an implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor ;  CRooCacheManagerTemplate class RooCacheManager manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables ;  CRooCategoryRooCategory represents a fundamental (non-derived) discrete value object ;  CRooCategoryProxyRooCategoryProxy is the proxy implementation for RooAbsCategory objects A RooCategoryProxy is the general mechanism to store references to RooAbsCategoriess inside a RooAbsArg ;  CRooCategorySharedPropertiesRooCategorySharedProperties is the container for all properties that are shared between instance of RooCategory objects that are clones of each other ;  CRooCatTypeRooCatType is an auxilary class for RooAbsCategory and defines a a single category state ;  CRooCBShapeP.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86697,Deployability,integrat,integration,86697,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:87022,Deployability,integrat,integrator,87022,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:91164,Deployability,integrat,integration,91164,"BindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92355,Deployability,integrat,integration,92355,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93010,Deployability,integrat,integrator,93010,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93268,Deployability,integrat,integration,93268,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93361,Deployability,integrat,integrator,93361,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95004,Deployability,integrat,integration,95004,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97440,Deployability,integrat,integration,97440,"ory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.d.f ;  CAnaIntData;  CBitBlock;  CGenData;  CRooNameRegRooNameReg is a registry for 'const char*' name ;  CRooNameSetRooNameSet is a utility class that stores the names the objects in a RooArget ;  ►CRooNDKeysPdfGeneric N-dimensional implementation of a kernel estimation p.d.f ;  CBoxInfo;  CSorterTV_L2HSorter function ;  CRooNLLVarClass RooNLLVar implements a a -log(likelihood) calculation from a dataset and a PDF ;  CRooNonCentralChiSquareThe PDF of the Non-Central Chi Square distribution for n degrees of freedom ;  CRooNonCPEigenDecayTime-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFact",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97996,Deployability,configurat,configuration,97996,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98044,Deployability,integrat,integrators,98044,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98153,Deployability,integrat,integrators,98153,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98207,Deployability,configurat,configuration,98207,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98266,Deployability,configurat,configuration,98266,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98314,Deployability,integrat,integrators,98314,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98423,Deployability,integrat,integrators,98423,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98477,Deployability,configurat,configuration,98477,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98793,Deployability,integrat,integrated,98793,"y to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that d",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102258,Deployability,integrat,integration,102258,"ss provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf compo",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102323,Deployability,integrat,integrated,102323,"CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102412,Deployability,integrat,integrations,102412,"oMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRe",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:103923,Deployability,integrat,integration,103923,"valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104047,Deployability,integrat,integration,104047,"t stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  ►CRooSimultaneousRooSimu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:125009,Deployability,update,update,125009,"erarchy management, rendering control and list-tree item management ;  CTEveListTreeInfoStructure holding information about TGListTree and TGListTreeItem that represents given TEveElement ;  CTEveElementEditorEditor for TEveElement class ;  CTEveElementListA list of TEveElements ;  CTEveElementListProjectedA projected element list – required for proper propagation of render state to projected views ;  CTEveElementObjectPtrTEveElement with external TObject as a holder of visualization data ;  CTEveEventManagerBase class for event management and navigation ;  CTEveExceptionException class thrown by TEve classes and macros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:128231,Deployability,update,updates,128231,"EveLineProjectedProjected copy of a TEveLine ;  CTEveListTreeItemSpecial list-tree-item for Eve ;  CTEveMacroSub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution ;  CTEveMagFieldAbstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator ;  CTEveMagFieldConstImplements constant magnetic field, given by a vector fB ;  CTEveMagFieldDuoImplements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut ;  ►CTEveManagerCentral application manager for Eve ;  CTExceptionHandlerException handler for Eve exceptions ;  CTRedrawDisabler;  CTEveMCRecCrossRef;  CTEveMCTrack;  CTEventIterSpecial iterator class used in TProofPlayer to iterate over events or objects in the packets ;  CTEventIterObj;  ►CTEventIterTree;  CTFileTree;  CTEventIterUnit;  CTEventListA TEventList object is a list of selected events (entries) in a TTree ;  CTEvePadThis was intended as a TPad wrapper to allow smart updates of groups of pads ;  CTEvePadHolderException safe wrapper for setting gPad ;  ►CTEveParamListCollection of named parameters ;  CBoolConfig_t;  CFloatConfig_t;  CIntConfig_t;  CTEveParamListEditorGUI editor for TEveParamList ;  CTEvePathMarkTSpecial-point on track: ;  CTEvePlot3DDescription of TEvePlot3D ;  CTEvePlot3DGLOpenGL renderer class for TEvePlot3D ;  CTEvePointSelectorTEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree ;  CTEvePointSelectorConsumerTEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class ;  CTEvePointSetTEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc) ;  CTEvePointSetArrayAn array of point-sets with each point-set playing a role of a bin in a histogram ;  CTEvePointSetArrayEditorEditor for TEvePointSetArray cl",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185631,Deployability,release,release,185631,"on matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting functi",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:193514,Deployability,continuous,continuous,193514,"TTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranContDist (for one-dimension) or TUnuranMultiContDist (multi-dimension) ;  CTUnuranContDistTUnuranContDist class describing one dimensional continuous distribution ;  CTUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution ;  CTUnuranEmpDistTUnuranEmpDist class for describing empiral distributions ;  CTUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions ;  CTUnuranSamplerTUnuranSampler class class implementing the ROOT::Math::DistSampler interface using the UNU.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:193779,Deployability,continuous,continuous,193779,"TTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranContDist (for one-dimension) or TUnuranMultiContDist (multi-dimension) ;  CTUnuranContDistTUnuranContDist class describing one dimensional continuous distribution ;  CTUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution ;  CTUnuranEmpDistTUnuranEmpDist class for describing empiral distributions ;  CTUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions ;  CTUnuranSamplerTUnuranSampler class class implementing the ROOT::Math::DistSampler interface using the UNU.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195650,Deployability,release,release,195650,"Viewer3D) support on a pad ;  CTViewPubDataMembersView implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24127,Energy Efficiency,adapt,adaptive,24127,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:30766,Energy Efficiency,adapt,adapting,30766," CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31679,Energy Efficiency,adapt,adapting,31679,"lgorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:32116,Energy Efficiency,adapt,adapting,32116,"rpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL Mul",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:33054,Energy Efficiency,adapt,adapting,33054,"ization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEn",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:46331,Energy Efficiency,energy,energy,46331,"o times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPolar2DClass describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) ;  CPolar3DClass describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) ;  CPolynomialParametric Function class describing polynomials of order n ;  CPositionVector2DClass describing a generic position vector (point) in 2 dimensions ;  CPositionVector3DClass describing a generic position vector (point) in 3 dimensions ;  CPtEtaPhiE4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+) ;  CPtEtaPhiM4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix repres",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:46437,Energy Efficiency,energy,energy,46437," in op: A += A * B ) ;  CPolar2DClass describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) ;  CPolar3DClass describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) ;  CPolynomialParametric Function class describing polynomials of order n ;  CPositionVector2DClass describing a generic position vector (point) in 2 dimensions ;  CPositionVector3DClass describing a generic position vector (point) in 3 dimensions ;  CPtEtaPhiE4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+) ;  CPtEtaPhiM4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix representations ;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CRetrieveM",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55137,Energy Efficiency,adapt,adapting,55137," >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates th",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55329,Energy Efficiency,adapt,adapting,55329,"GradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the fig",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55903,Energy Efficiency,adapt,adapting,55903,"ed minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:59303,Energy Efficiency,reduce,reduce,59303,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72342,Energy Efficiency,adapt,adapter,72342,"nsform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions a",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72510,Energy Efficiency,adapt,adapter,72510,"f the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:73345,Energy Efficiency,adapt,adapter,73345," needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;  ►CPiecewiseInterpolation;  CCacheElem;  CPoint_t;  CProcInfo_t;  CProofServEnv_t;  Cpthread_cond_t;  CPybins_tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyje",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80244,Energy Efficiency,adapt,adaptive,80244,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80344,Energy Efficiency,efficient,efficient,80344,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80744,Energy Efficiency,efficient,efficient,80744,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81871,Energy Efficiency,adapt,adaptive,81871,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81977,Energy Efficiency,efficient,efficient,81977,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86764,Energy Efficiency,efficient,efficient,86764,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:90492,Energy Efficiency,adapt,adaptor,90492," input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStud",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:91812,Energy Efficiency,adapt,adaptor,91812,"BindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92306,Energy Efficiency,adapt,adaptive,92306,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93233,Energy Efficiency,adapt,adaptive,93233,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:94955,Energy Efficiency,adapt,adaptive,94955,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:96559,Energy Efficiency,adapt,adaptor,96559,"sociated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:100229,Energy Efficiency,efficient,efficient,100229,"cts that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that define the standard RooFit plotting and printing methods ;  CRooProdGenContextRooProdGenContext is an efficient implementation of the generator context specific for RooProdPdf PDFs ;  ►CRooProdPdfRooProdPdf is an efficient implementation of a product of PDFs of the form ;  CCacheElem;  ►CRooProductRooProduct a RooAbsReal implementation that represent the product of a given set of other RooAbsReal objects ;  CCacheElem;  CRooProfileLLClass RooProfileLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  ►CRooProjectedPdfClass RooProjectedPdf is a RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection ;  CCacheElem;  CRooProofDriverSelector;  CRooPullVarClass RooPullVar represents the pull of measurement w.r.t to true value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:100340,Energy Efficiency,efficient,efficient,100340,"cts that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that define the standard RooFit plotting and printing methods ;  CRooProdGenContextRooProdGenContext is an efficient implementation of the generator context specific for RooProdPdf PDFs ;  ►CRooProdPdfRooProdPdf is an efficient implementation of a product of PDFs of the form ;  CCacheElem;  ►CRooProductRooProduct a RooAbsReal implementation that represent the product of a given set of other RooAbsReal objects ;  CCacheElem;  CRooProfileLLClass RooProfileLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  ►CRooProjectedPdfClass RooProjectedPdf is a RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection ;  CCacheElem;  CRooProofDriverSelector;  CRooPullVarClass RooPullVar represents the pull of measurement w.r.t to true value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101731,Energy Efficiency,adapt,adaptor,101731,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101888,Energy Efficiency,adapt,adaptor,101888,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:103888,Energy Efficiency,adapt,adaptive,103888,"nts a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an eff",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104012,Energy Efficiency,adapt,adaptive,104012,"ementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the compon",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104681,Energy Efficiency,efficient,efficient,104681,"or to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  ►CRooSimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CCacheElem;  ►CRooSimWSTool;  CBuildConfig;  CMultiBuildConfig;  CObjBuildConfig;  CObjSplitRule;  CSimWSIFace;  CSplitRule;  CRooSpHarmonicImplementation of the so-called real spherical harmonics, using the orthonormal normalization, which are related to spherical harmonics as: ; \[ Y_{l0} = Y_l^0 (m=0) \\ Y_{lm} = \frac{1}{\sqrt{2}} \left( Y_l^m + (-1)^m Y_l^{-m} \right) (m>0) \\ Y_{lm} = \frac{1}{i\sqrt{2}} \left( Y_l^{|m|} - (-1)^{|m|} Y_l^{-|m|} \right) (m<0) \].",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104890,Energy Efficiency,efficient,efficient,104890,"or to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  ►CRooSimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CCacheElem;  ►CRooSimWSTool;  CBuildConfig;  CMultiBuildConfig;  CObjBuildConfig;  CObjSplitRule;  CSimWSIFace;  CSplitRule;  CRooSpHarmonicImplementation of the so-called real spherical harmonics, using the orthonormal normalization, which are related to spherical harmonics as: ; \[ Y_{l0} = Y_l^0 (m=0) \\ Y_{lm} = \frac{1}{\sqrt{2}} \left( Y_l^m + (-1)^m Y_l^{-m} \right) (m>0) \\ Y_{lm} = \frac{1}{i\sqrt{2}} \left( Y_l^{|m|} - (-1)^{|m|} Y_l^{-|m|} \right) (m<0) \].",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:106312,Energy Efficiency,adapt,adaptor,106312,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108748,Energy Efficiency,efficient,efficient,108748,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:141407,Energy Efficiency,energy,energy,141407,"or MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGeneratorThe interface to various event generators ;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpaceUtility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi"") ;  CTGeoArb8An arbitrary trapezoid with less than 8 vertices standing on ;  CTGeoAttVisualization and tracking attributes for volumes and nodes ;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBoxBox class ;  CTGeoBBoxEditor;  ►CTGeoBoolNodeBase class for Boolean operations between two shapes ;  CThreadData_t;  CTGeoBranchArrayAn array of daughter indices making a geometry path ;  CTGeoBuilderUtility class for creating geometry objects.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:168443,Energy Efficiency,energy,energy,168443,"ListOfEnumsWithLockIterIterator for TListOfEnumsWithLock ;  CTListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDia",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:168648,Energy Efficiency,efficient,efficient,168648,"loaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data stor",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:178507,Energy Efficiency,monitor,monitor,178507,"ive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayer",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:178693,Energy Efficiency,monitor,monitoring,178693,"ProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgress",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179789,Energy Efficiency,adapt,adapted,179789," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:112,Integrability,interface,interfaces,112," Here are the classes, structs, unions and interfaces with brief descriptions:; [detail level 123456];  ►NBidirMMapPipe_implNamespace for implementation details of BidirMMapPipe ;  CPageChunkClass representing a chunk of pages ;  ►CPagesHandle class for a number of Pages ;  CimplImplementation ;  ►NclingPrint a TSeq at the prompt: ;  ►Nutils;  ►NMemstat;  CSCustomDigest;  CSFind_t;  CTMemStatFAddrContainer;  CTMemStatMng;  CToLower_t;  ►NPyROOT;  ►CMethodProxy;  CMethodInfo_t;  CObjectProxy;  CPropertyProxy;  CPyCallable;  CPyGILRAII;  CPyRootClassType object to hold TClassRef instance (this is only semantically a presentation of PyRootType instances, not in a C++ sense) ;  CTCallContext;  CTClassMethodHolder;  CTConstructorHolder;  CTConverter;  CTCppObjectArrayConverter;  CTCppObjectArrayExecutor;  CTCppObjectBySmartPtrExecutor;  CTCppObjectBySmartPtrPtrExecutor;  CTCppObjectBySmartPtrRefExecutor;  CTCppObjectByValueExecutor;  CTCppObjectConverter;  CTCppObjectExecutor;  CTCppObjectPtrConverter;  CTCppObjectPtrPtrExecutor;  CTCppObjectPtrRefExecutor;  CTCppObjectRefExecutor;  CTCStringConverter;  CTemplateProxyTemplate proxy object to return functions and methods ;  CTExecutor;  CTFunctionHolder;  CTLongLongArrayConverter;  CTMemoryRegulator;  CTMethodHolder;  CTNonConstCStringConverter;  CTNonConstUCStringConverter;  CTNotImplementedConverter;  ►CTParameter;  CValue;  CTPyBufferFactoryFactory for python buffers of non-string type ;  CTPyException;  CTPyROOTApplication;  CTRefCppObjectConverter;  CTRefExecutor;  CTSetItemHolder;  CTSmartPtrCppObjectConverter;  CTSTLIteratorConverter;  CTStrictCppObjectConverter;  CTValueCppObjectConverter;  CTVoidArrayConverter;  CTVoidConverter;  CTVoidPtrPtrConverter;  CTVoidPtrRefConverter;  ►NRgl;  ►NFgt;  CTKDEAdapter;  ►NMc;  CTCell;  CTDefaultSplitter;  CTF3Adapter;  CTF3EdgeSplitter;  CTGridGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTS",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:3729,Integrability,interface,interface,3729,"NRooStatsNamespace for the RooStats classes ;  ►NHistFactory;  CAsimov;  CChannel;  CConfigParser;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneous;  CHistoFactor;  CHistoSys;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRef;  CLinInterpVar;  CMeasurement;  CNormFactor;  COverallSys;  CPreprocessFunction;  ►CRooBarlowBeestonLL;  CBarlowCache;  CSample;  CShapeFactor;  CShapeSys;  CStatError;  CStatErrorConfig;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalcul",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:3905,Integrability,interface,interface,3905,"hf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneous;  CHistoFactor;  CHistoSys;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRef;  CLinInterpVar;  CMeasurement;  CNormFactor;  COverallSys;  CPreprocessFunction;  ►CRooBarlowBeestonLL;  CBarlowCache;  CSample;  CShapeFactor;  CShapeSys;  CStatError;  CStatErrorConfig;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculato",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:3950,Integrability,interface,interface,3950,"ySimultaneous;  CHistoFactor;  CHistoSys;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRef;  CLinInterpVar;  CMeasurement;  CNormFactor;  COverallSys;  CPreprocessFunction;  ►CRooBarlowBeestonLL;  CBarlowCache;  CSample;  CShapeFactor;  CShapeSys;  CStatError;  CStatErrorConfig;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4535,Integrability,interface,interface,4535,"ayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4936,Integrability,interface,interface,4936,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5886,Integrability,interface,interface,5886,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6051,Integrability,interface,interface,6051,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6511,Integrability,integrat,integrate,6511,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6681,Integrability,interface,interface,6681,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7006,Integrability,interface,interface,7006,"mentation of the RooStats::ConfInterval interface ;  CLikelihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a to",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7382,Integrability,interface,interface,7382,"CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7624,Integrability,interface,interface,7624,"ncrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7746,Integrability,interface,interface,7746,"orward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7842,Integrability,interface,interface,7842,"lis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplin",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7987,Integrability,interface,interface,7987,"TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (cho",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8179,Integrability,interface,interface,8179,"figuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8393,Integrability,interface,interface,8393,"as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9254,Integrability,interface,interface,9254, point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy o,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9412,Integrability,interface,interface,9412,al functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall hel,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9683,Integrability,interface,interface,9683,"plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall hel",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9871,Integrability,interface,interface,9871,"roposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:15009,Integrability,synchroniz,synchronization,15009," known as ""variable binning"") ;  CTAxisLabelsA TAxisGrow that has a label assigned to each bin and a bin width of 1 ;  CTAxisViewCommon view on a TAxis, no matter what its kind ;  CTCanvasGraphic container for TDrawable-s ;  ►CTDirectoryKey/value store of objects ;  CToContentType;  CTDirectoryTypeMismatchObjects of this class are thrown to signal that the value known under the given name ;  CTDirectoryUnknownKeyObjects of this class are thrown to signal that no key with that name exists ;  ►CTFileA ROOT file ;  COptions_tOptions for TFile construction ;  CTFilePtrPoints to an object that stores or reads objects in ROOT's binary format ;  CTFitResult;  CTFunction;  CTHistHistogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION ;  CTHistBufferedFillBuffers calls to Fill() ;  CTHistConcurrentFillerBuffers a thread's Fill calls and submits them to the THistConcurrentFillManager ;  CTHistConcurrentFillManagerManages the synchronization of calls to FillN() ;  ►CTHistDataMomentUncertFor now do as TH1: calculate first (xw) and second (x^2w) moment ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  CTHistDrawOptionsDrawing options for a histogram with DIMENSIONS ;  ►CTHistStatContentBasic histogram statistics, keeping track of the bin content and the total number of calls to Fill() ;  CTBinStatModifying view on a THistStatContent for a given bin ;  CTConstBinStatConst view on a THistStatContent for a given bin ;  ►CTHistStatRuntimeInterface implementing a pure virtual functions DoFill(), DoFillN() ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfSquaredWeightsKeeps track of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyH",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24147,Integrability,integrat,integration,24147,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:25216,Integrability,integrat,integration,25216," Operation Class ;  CAddPolicyMatrix addition policy ;  CAddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  CAssignStructure to assign from an expression based to general matrix to general matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Dummy Structure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthos",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:25504,Integrability,interface,interface,25504,"tructure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function mi",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:25522,Integrability,interface,interface,25522,"gs an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function minimization ;  CBre",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:28916,Integrability,interface,interfaces,28916,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29621,Integrability,wrap,wrapping,29621,se) Operation Class ;  CEulerAnglesEulerAngles class describing rotation as three angles (Euler Angles) ;  CEvaluatorOneDim;  CEvaluatorOneDim< const ROOT::Math::IParamMultiFunction & >;  CExpr;  CFabsUnary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm Th,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29822,Integrability,integrat,integration,29822,ary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by ,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29896,Integrability,integrat,integration,29896,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with deri,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:30868,Integrability,wrap,wrap,30868,"s for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim functio",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31054,Integrability,integrat,integration,31054,"rGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimiz",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31517,Integrability,integrat,integration,31517,"DerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for i",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:33787,Integrability,wrap,wrap,33787,"s algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator ;  CGSLRngCMRGCombined multiple recursive generator (L'Ecuyer) see here ;  CGSLRngGFSR4Lagged Fibonacci generator by Ziff see here ;  CGSLRngMinStdMINSTD generator (Park and Miller) see here ;  CGSLRngMixMaxMixMax generator based on ROOT::Math::MixMaxEngine of N=240 ;  CGSLRngMRG5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ;  CGSLRngMTMersenne-Twister generator gsl_rng_mt19937 from here ;  CGSLRngRandBSD rand() generator gsl_rmg_rand from here ;  CGSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 w",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:35635,Integrability,wrap,wrap,35635,"generator gsl_rmg_rand from here ;  CGSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ;  CGSLRngRanLuxD1Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ;  CGSLRngRanLuxD2Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanLuxS1Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ;  CGSLRngRanLuxS2Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanMarRANMAR generator see here ;  CGSLRngROOTWrapper;  CGSLRngTausTausworthe generator by L'Ecuyer see here ;  CGSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure ;  CGSLRootFdFSolverRoot-Finder with derivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension P",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37083,Integrability,interface,interface,37083,"description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37234,Integrability,interface,interface,37234,"SimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37689,Integrability,integrat,integration,37689,"simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37758,Integrability,integrat,integration,37758,"ramDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricG",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37834,Integrability,integrat,integration,37834,"iDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37930,Integrability,integrat,integration,37930,";  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:38256,Integrability,interface,interface,38256,"or one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via t",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:38372,Integrability,interface,interface,38372,"d to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:38594,Integrability,interface,interface,38594," semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first de",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:40074,Integrability,wrap,wrapper,40074,"abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLibrary;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatrixMulOpClass for Matrix-Matrix multiplication ;  CMemFunHandlerFunctor Handler to Wrap pointers to member functions The member function type must be (XXX means any name is allowed) : double XXX ( double x) for 1D functions and double XXXX (const double *x) for multi-dimensional functions ;  CMemGradFunHandlerFunctor Handler to Wrap pointers to member functions for the evaluation of the function and the gradient ;  CMersenneTwisterEngineRandom number generator class based on M ;  Cmeta_col_dot;  Cmeta_col_dot< 0 >;  Cmeta_dot;  Cmeta_dot< 0 >;  Cmeta_mag;  Cmeta_mag< 0 >;  Cmeta_matrix_dot;  Cmeta_matrix_dot< 0 >;  Cmeta_row_dot;  Cmeta_row_dot< 0 >;  CMinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:40999,Integrability,interface,interface,40999,"abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLibrary;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatrixMulOpClass for Matrix-Matrix multiplication ;  CMemFunHandlerFunctor Handler to Wrap pointers to member functions The member function type must be (XXX means any name is allowed) : double XXX ( double x) for 1D functions and double XXXX (const double *x) for multi-dimensional functions ;  CMemGradFunHandlerFunctor Handler to Wrap pointers to member functions for the evaluation of the function and the gradient ;  CMersenneTwisterEngineRandom number generator class based on M ;  Cmeta_col_dot;  Cmeta_col_dot< 0 >;  Cmeta_dot;  Cmeta_dot< 0 >;  Cmeta_mag;  Cmeta_mag< 0 >;  Cmeta_matrix_dot;  Cmeta_matrix_dot< 0 >;  Cmeta_row_dot;  Cmeta_row_dot< 0 >;  CMinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:42516,Integrability,integrat,integration,42516," or limited variables (support both double and single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COne",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:42768,Integrability,wrap,wrap,42768,"ransformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CPar",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:42855,Integrability,interface,interface,42855,"or) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass def",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:43035,Integrability,wrap,wrap,43035,"valuate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is re",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:43140,Integrability,interface,interface,43140,"expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:43296,Integrability,wrap,wrap,43296,"neral : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngineWrapper class for the MIXMAX Random number generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2,",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:43581,Integrability,wrap,wrap,43581,"ber generator ;  CMixMaxEngineImpl;  CMixMaxEngineImpl< _N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:43703,Integrability,wrap,wrap,43703,"tiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlane3DClass describing",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:44052,Integrability,wrap,wrapping,44052,"l parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusE",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:47114,Integrability,interface,interface,47114,"ass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix representations ;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CRichardsonDerivatorUser class for calculating the derivatives of a function ;  CRMinimizerRMinimizer class ;  CRootFinderUser Class to find the Root of one dimensional functions ;  CRotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix ;  CRotationTraits;  CRotationTraits< AxisAngle >;  CRotationTraits< EulerAngles >;  CRotationTraits< LorentzRotation >;  CRotationTraits< Quaternion >;  CRotationTraits< Rotation3D >;  CRotationTraits< RotationX >;  CRotationTraits< RotationY >;  CRotationTraits< RotationZ >;  CRotationXRotation class representing a 3D rotation about th",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:50800,Integrability,wrap,wrapper,50800,"on Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:50993,Integrability,integrat,integration,50993,"on Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51150,Integrability,integrat,integration,51150," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51245,Integrability,integrat,integrator,51245," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51374,Integrability,integrat,integration,51374," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51462,Integrability,integrat,integration,51462," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51636,Integrability,integrat,integration,51636," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51774,Integrability,wrap,wrap,51774," distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVavilovTestTest class for class Vavilov and its subclasses ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51872,Integrability,wrap,wrap,51872,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:51964,Integrability,interface,interface,51964,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52058,Integrability,wrap,wrapped,52058,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52209,Integrability,wrap,wrap,52209,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52313,Integrability,interface,interface,52313,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52414,Integrability,interface,interface,52414,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52498,Integrability,wrap,wrapper,52498,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52577,Integrability,wrap,wrapper,52577,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52648,Integrability,wrap,wrap,52648,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52761,Integrability,interface,interface-like,52761,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:52917,Integrability,wrap,wrap,52917,"uble and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53004,Integrability,interface,interface-like,53004,": struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sy",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53178,Integrability,interface,interface,53178,"FunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53260,Integrability,wrap,wrapper,53260,"onst double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgeb",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53345,Integrability,wrap,wrapper,53345,"o Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55119,Integrability,wrap,wrapped,55119,"ProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinim",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55311,Integrability,wrap,wrapped,55311,"ym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55885,Integrability,wrap,wrapped,55885,"nedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance m",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:58569,Integrability,interface,interface,58569,"n ;  CInitialGradientCalculatorClass to calculate an initial estimate of the gradient ;  CLASymMatrixClass describing a symmetric matrix of size n ;  CLAVector;  CMatrixInverse;  CMatrixInverse< vec, M, T >;  CMinimumBuilder;  ►CMinimumErrorMinimumError keeps the inv ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase inte",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:58886,Integrability,interface,interface,58886,"ef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficien",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:59570,Integrability,interface,interface,59570,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:61562,Integrability,interface,interface,61562,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:62232,Integrability,interface,interface,62232,"diagonal ;  CMnPrint;  CMnRefCountedPointer;  CMnReferenceCounter;  CMnScanAPI class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negativ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:65671,Integrability,interface,interface,65671,"om a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NTF1Helper;  CTGradientParFunctionFunction class representing the derivative with respect a parameter of a given TF1 ;  ►NTMetaUtils;  ►CAnnotatedRecordDecl;  CCompareByName;  CRConstructorType;  CTClingLookupHelper;  CTNormalizedCtxt;  ►Nv5;  CTF1Data;  CTFormulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  CTGenericClassInfo;  CTProcessExecutor;  CTRWSpinLock;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTTreeProcessor;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  ►Ndetail;  Cindices;  Cis_array_class;  Cis_array_class< std::array< T, N > >;  Cis_array_class< std::initializer_list< T > >;  Cis_array_class< std::vector< T > >;  Cmake_indices_;  ►Cmake_indices_impl;  Ctype >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  Cmake_indices_next;  Cmake_indices_next2;  Cmake_indices_next2< indices< Indices.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:65714,Integrability,wrap,wrapper,65714,"om a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NTF1Helper;  CTGradientParFunctionFunction class representing the derivative with respect a parameter of a given TF1 ;  ►NTMetaUtils;  ►CAnnotatedRecordDecl;  CCompareByName;  CRConstructorType;  CTClingLookupHelper;  CTNormalizedCtxt;  ►Nv5;  CTF1Data;  CTFormulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  CTGenericClassInfo;  CTProcessExecutor;  CTRWSpinLock;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTTreeProcessor;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  ►Ndetail;  Cindices;  Cis_array_class;  Cis_array_class< std::array< T, N > >;  Cis_array_class< std::initializer_list< T > >;  Cis_array_class< std::vector< T > >;  Cmake_indices_;  ►Cmake_indices_impl;  Ctype >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  Cmake_indices_next;  Cmake_indices_next2;  Cmake_indices_next2< indices< Indices.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:71639,Integrability,rout,routines,71639,logBDT;  CStatDialogBDTReg;  CStatDialogMVAEffs;  CSVEvent;  CSVKernelFunction;  CSVKernelMatrix;  CSVWorkingSet;  CTActivation;  CTActivationChooser;  CTActivationIdentity;  CTActivationRadial;  CTActivationReLU;  CTActivationSigmoid;  CTActivationTanh;  CTimer;  CTMVAGaussPair;  CTMVAGUI;  CTNeuron;  CTNeuronInput;  CTNeuronInputAbs;  CTNeuronInputChooser;  CTNeuronInputSqSum;  CTNeuronInputSum;  CTools;  ►CTransformationHandler;  CVariableStat;  CTreeInfo;  CTSpline1;  CTSpline2;  CTSynapse;  CTypes;  CVariableDecorrTransform;  CVariableGaussTransform;  CVariableIdentityTransform;  CVariableImportance;  CVariableImportanceResult;  CVariableInfo;  CVariableNormalizeTransform;  CVariablePCATransform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCous,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72126,Integrability,interface,interface,72126," CTSynapse;  CTypes;  CVariableDecorrTransform;  CVariableGaussTransform;  CVariableIdentityTransform;  CVariableImportance;  CVariableImportanceResult;  CVariableInfo;  CVariableNormalizeTransform;  CVariablePCATransform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters str",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72342,Integrability,adapter,adapter,72342,"nsform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions a",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72510,Integrability,adapter,adapter,72510,"f the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:73345,Integrability,adapter,adapter,73345," needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;  ►CPiecewiseInterpolation;  CCacheElem;  CPoint_t;  CProcInfo_t;  CProofServEnv_t;  Cpthread_cond_t;  CPybins_tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyje",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75259,Integrability,depend,depends,75259,"tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyjets ;  CPymssm_tPythia6 common block Pymssm ;  CPypars_tPythia6 common block Pypars ;  CPyssmt_tPythia6 common block Pyssmt ;  CPysubs_tPythia6 common block Pysubs ;  CQuad;  CQuartzImage;  CQuartzPixmap;  CQuartzView;  CQuartzWindow;  CRectangle_t;  CRedirectHandle_t;  Credirguard;  Crng_state_st;  CRoo1DMomentMorphFunction1-dimensional morph function between a list of input functions (varlist) as a function of one input parameter (m) ;  CRoo1DTableRoo1DTable implements a one-dimensional table ;  CRoo2DKeysPdfTwo-dimensional kernel estimation PDF ;  ►CRoo2DMomentMorphFunction2-dimensional morph function between a list of function-numbers as a function of two input parameters (m1 and m2) ;  CSorterL2H;  ►CRooAbsAnaConvPdf;  CCacheElemIterator over _convNormSet ;  CRooAbsArgRooAbsArg is the common abstract base class for objects that represent a value (of arbitrary type) and ""shape"" that in general depends on (is a client of) other RooAbsArg subclasses ;  CRooAbsBinningRooAbsBinning is the abstract base class for RooRealVar binning definitions This class defines the interface to retrieve bin boundaries, ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75430,Integrability,interface,interface,75430,"tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyjets ;  CPymssm_tPythia6 common block Pymssm ;  CPypars_tPythia6 common block Pypars ;  CPyssmt_tPythia6 common block Pyssmt ;  CPysubs_tPythia6 common block Pysubs ;  CQuad;  CQuartzImage;  CQuartzPixmap;  CQuartzView;  CQuartzWindow;  CRectangle_t;  CRedirectHandle_t;  Credirguard;  Crng_state_st;  CRoo1DMomentMorphFunction1-dimensional morph function between a list of input functions (varlist) as a function of one input parameter (m) ;  CRoo1DTableRoo1DTable implements a one-dimensional table ;  CRoo2DKeysPdfTwo-dimensional kernel estimation PDF ;  ►CRoo2DMomentMorphFunction2-dimensional morph function between a list of function-numbers as a function of two input parameters (m1 and m2) ;  CSorterL2H;  ►CRooAbsAnaConvPdf;  CCacheElemIterator over _convNormSet ;  CRooAbsArgRooAbsArg is the common abstract base class for objects that represent a value (of arbitrary type) and ""shape"" that in general depends on (is a client of) other RooAbsArg subclasses ;  CRooAbsBinningRooAbsBinning is the abstract base class for RooRealVar binning definitions This class defines the interface to retrieve bin boundaries, ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75838,Integrability,integrat,integration,75838," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:76902,Integrability,interface,interface,76902," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:77302,Integrability,interface,interface,77302,"ooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CRooAbsMCStudyModuleRooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy ;  CRooAbsMomentRooAbsMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooAbsNumGeneratorClass RooAbsNumGenerator is the abstract base class for MC event generator implementations like RooAcceptReject and RooFoam ;  CRooAbsOptTestStatisticRooAbsOptTestStatistic is the abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:77316,Integrability,integrat,integrators,77316,"ooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CRooAbsMCStudyModuleRooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy ;  CRooAbsMomentRooAbsMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooAbsNumGeneratorClass RooAbsNumGenerator is the abstract base class for MC event generator implementations like RooAcceptReject and RooFoam ;  CRooAbsOptTestStatisticRooAbsOptTestStatistic is the abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:77383,Integrability,interface,interface,77383,"ooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CRooAbsMCStudyModuleRooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy ;  CRooAbsMomentRooAbsMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooAbsNumGeneratorClass RooAbsNumGenerator is the abstract base class for MC event generator implementations like RooAcceptReject and RooFoam ;  CRooAbsOptTestStatisticRooAbsOptTestStatistic is the abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:78174,Integrability,interface,interface,78174,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:78341,Integrability,interface,interface,78341,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:78459,Integrability,interface,interface,78459,"  CRooAbsMCStudyModuleRooAbsMCStudyModule is a base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy ;  CRooAbsMomentRooAbsMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooAbsNumGeneratorClass RooAbsNumGenerator is the abstract base class for MC event generator implementations like RooAcceptReject and RooFoam ;  CRooAbsOptTestStatisticRooAbsOptTestStatistic is the abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfC",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:79121,Integrability,interface,interface,79121,"dataset ;  ►CRooAbsPdfRooAbsPdf is the abstract interface for all probability density functions The class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:79218,Integrability,interface,interface,79218,"he class provides hybrid analytical/numerical normalization for its implementations, error tracing and a MC generator interface ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80157,Integrability,integrat,integration,80157,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80279,Integrability,integrat,integration,80279,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80976,Integrability,integrat,integration,80976,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81027,Integrability,integrat,integration,81027,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81100,Integrability,interface,interface,81100,"efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets ;  CRooArgList;  CRooArgProxyRooArgProxy is the abstact interface for RooAbsArg proxy classes ;  CRooArgSet;  CRooArgusBGRooArgusBG is a RooAbsPdf implementation describing the ARGUS background shape ;  CRooBCPEffDecayPDF describing decay time distribution of B meson including effects of standard model CP violation ;  CRooBCPGenDecayImplement standard CP physics model with S and C (no mention of lambda) Suitably stolen and modified from RooBCPEffDecay ;  CRooBDecayMost general description of B decay time distribution with effects of CP violation, mixing and life time differences ;  CRooBernsteinBernstein basis polynomials are positive-definite in the range [0,1] ;  CRooBifurGaussBifurcated Gaussian p.d.f with different widths on left and right side of maximum value ;  CRooBinIntegratorRooBinIntegrator implements an adaptive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81906,Integrability,integrat,integration,81906,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:82706,Integrability,interface,interface,82706,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:83269,Integrability,integrat,integrated,83269,"tive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooBlindTools;  CRooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing ;  CRooBreitWignerClass RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape ;  CRooBrentRootFinderImplement the abstract 1-dimensional root finding interface using the Brent-Decker method ;  CRooBukinPdfRooBukinPdf implements the NovosibirskA function ;  CRooCachedPdfRooCachedPdf is an implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor ;  CRooCachedRealRooCachedReal is an implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor ;  CRooCacheManagerTemplate class RooCacheManager manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables ;  CRooCategoryRooCategory represents a fundamental (non-derived) discrete value object ;  CRooCategoryProxyRooCategoryProxy is the proxy implementation for RooAbsCategory objects A RooCategoryProxy is the general mechanism to store references to RooAbsCategoriess inside a RooAbsArg ;  CRooCategorySharedPropertiesRooCategorySharedProperties is the container for all properties that are shared between instance of RooCategory objects that are clones of each other ;  CRooCatTypeRooCatType is an auxilary class for RooAbsCategory and defines a a single category state ;  CRooCBShapeP.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86630,Integrability,interface,interface,86630,"eleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calcul",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86697,Integrability,integrat,integration,86697,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:87022,Integrability,integrat,integrator,87022,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:90274,Integrability,interface,interfaces,90274,"eElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:90482,Integrability,interface,interface,90482," input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStud",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:91164,Integrability,integrat,integration,91164,"BindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:91802,Integrability,interface,interface,91802,"BindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92355,Integrability,integrat,integration,92355,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93010,Integrability,integrat,integrator,93010,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93268,Integrability,integrat,integration,93268,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93361,Integrability,integrat,integrator,93361,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95004,Integrability,integrat,integration,95004,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95320,Integrability,wrap,wrapper,95320,"RooLinkedListIter is the TIterator implementation for RooLinkedList ;  CRooLinTransBinningRooLinTransBinning is a special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMult",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95383,Integrability,interface,interface,95383,"ist ;  CRooLinTransBinningRooLinTransBinning is a special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory ob",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95451,Integrability,interface,interface,95451,"plementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iter",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95508,Integrability,wrap,wrapper,95508,"g of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categorie",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95570,Integrability,interface,interface,95570,"nearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exp",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:95635,Integrability,interface,interface,95635,"or working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMult",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:96077,Integrability,message,messages,96077,"sociated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:96549,Integrability,interface,interface,96549,"sociated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97224,Integrability,depend,dependent,97224,"ory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.d.f ;  CAnaIntData;  CBitBlock;  CGenData;  CRooNameRegRooNameReg is a registry for 'const char*' name ;  CRooNameSetRooNameSet is a utility class that stores the names the objects in a RooArget ;  ►CRooNDKeysPdfGeneric N-dimensional implementation of a kernel estimation p.d.f ;  CBoxInfo;  CSorterTV_L2HSorter function ;  CRooNLLVarClass RooNLLVar implements a a -log(likelihood) calculation from a dataset and a PDF ;  CRooNonCentralChiSquareThe PDF of the Non-Central Chi Square distribution for n degrees of freedom ;  CRooNonCPEigenDecayTime-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFact",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97440,Integrability,integrat,integration,97440,"ory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.d.f ;  CAnaIntData;  CBitBlock;  CGenData;  CRooNameRegRooNameReg is a registry for 'const char*' name ;  CRooNameSetRooNameSet is a utility class that stores the names the objects in a RooArget ;  ►CRooNDKeysPdfGeneric N-dimensional implementation of a kernel estimation p.d.f ;  CBoxInfo;  CSorterTV_L2HSorter function ;  CRooNLLVarClass RooNLLVar implements a a -log(likelihood) calculation from a dataset and a PDF ;  CRooNonCentralChiSquareThe PDF of the Non-Central Chi Square distribution for n degrees of freedom ;  CRooNonCPEigenDecayTime-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFact",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98044,Integrability,integrat,integrators,98044,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98153,Integrability,integrat,integrators,98153,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98314,Integrability,integrat,integrators,98314,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98423,Integrability,integrat,integrators,98423,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98793,Integrability,integrat,integrated,98793,"y to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that d",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:99146,Integrability,depend,depends,99146,"y to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that d",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101285,Integrability,interface,interface,101285,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101721,Integrability,interface,interface,101721,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101828,Integrability,depend,dependent,101828,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101878,Integrability,interface,interface,101878,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101996,Integrability,interface,interface,101996,"urement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProper",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102258,Integrability,integrat,integration,102258,"ss provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf compo",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102323,Integrability,integrat,integrated,102323,"CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102412,Integrability,integrat,integrations,102412,"oMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRe",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:103923,Integrability,integrat,integration,103923,"valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104047,Integrability,integrat,integration,104047,"t stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  ►CRooSimultaneousRooSimu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:106179,Integrability,interface,interface,106179,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:106302,Integrability,interface,interface,106302,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:109832,Integrability,interface,interfaces,109832," of the complex error function ;  ►CRooWorkspaceThe RooWorkspace is a persistable container for RooFit projects ;  ►CCodeRepo;  CClassFiles;  CClassRelInfo;  CExtraHeader;  CWSDir;  CRooXYChi2Var;  Crsa_KEY;  Crsa_KEY_export;  Crsa_NUMBER;  ►CRScanner;  CAnnotatedNamespaceDecl;  CSegment_t;  CSelectionRulesThe class representing the collection of selection rules ;  CSetWindowAttributes_t;  CSHtmlExtensions_t;  CSHtmlIndex_t;  CSHtmlMargin_t;  CSHtmlStyle_t;  CSHtmlStyleStack_t;  CSHtmlTokenMap_t;  CshutterData_t;  CSQLite3_Stmt_t;  CSysInfo_t;  CtableDescriptor_st;  CTAdvancedGraphicsDialog;  CTAFS;  CTAlien;  CTAlienCollection;  CTAlienDirectory;  CTAlienDirectoryEntry;  CTAlienFile;  CTAliEnFind;  CTAlienJDL;  CTAlienJob;  CTAlienJobStatus;  CTAlienJobStatusList;  CTAlienMasterJob;  CTAlienMasterJobStatus;  CTAlienPackage;  CTAlienResult;  CTAlienSystem;  CTAnyPtrModels a shared pointer or a unique pointer ;  CTApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers ;  CTApplicationImpABC describing GUI independent application implementation protocol ;  ►CTApplicationRemote;  CTARFileStat;  CTApplicationServer;  CTArcCreate an Arc ;  CTArcBallImplements the arc-ball rotation manipulator ;  CTArchiveFileClass describing an archive file containing multiple sub-files, like a ZIP or TAR archive ;  CTArchiveMember;  CTARInterruptHandler;  CTArrayAbstract array base class ;  CTArrayCArray of chars or bytes (8 bits per element) ;  CTArrayDArray of doubles (64 bits per element) ;  CTArrayFArray of floats (32 bits per element) ;  CTArrayIArray of integers (32 bits per element) ;  CTArrayLArray of longs (32 or 64 bits per element) ;  CTArrayL64Array of long64s (64 bits per element) ;  CTArraySArray of shorts (16 bits per element) ;  CTArrowDraw all kinds of Arrows ;  CTArrowEditor;  CTASImageImage class ;  CTASImagePlugin;  CTASLogHandler;  CTASLogHandlerGuard;  ►CTASPaletteEditorThis is a GUI window ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:109972,Integrability,protocol,protocol,109972,";  CClassRelInfo;  CExtraHeader;  CWSDir;  CRooXYChi2Var;  Crsa_KEY;  Crsa_KEY_export;  Crsa_NUMBER;  ►CRScanner;  CAnnotatedNamespaceDecl;  CSegment_t;  CSelectionRulesThe class representing the collection of selection rules ;  CSetWindowAttributes_t;  CSHtmlExtensions_t;  CSHtmlIndex_t;  CSHtmlMargin_t;  CSHtmlStyle_t;  CSHtmlStyleStack_t;  CSHtmlTokenMap_t;  CshutterData_t;  CSQLite3_Stmt_t;  CSysInfo_t;  CtableDescriptor_st;  CTAdvancedGraphicsDialog;  CTAFS;  CTAlien;  CTAlienCollection;  CTAlienDirectory;  CTAlienDirectoryEntry;  CTAlienFile;  CTAliEnFind;  CTAlienJDL;  CTAlienJob;  CTAlienJobStatus;  CTAlienJobStatusList;  CTAlienMasterJob;  CTAlienMasterJobStatus;  CTAlienPackage;  CTAlienResult;  CTAlienSystem;  CTAnyPtrModels a shared pointer or a unique pointer ;  CTApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers ;  CTApplicationImpABC describing GUI independent application implementation protocol ;  ►CTApplicationRemote;  CTARFileStat;  CTApplicationServer;  CTArcCreate an Arc ;  CTArcBallImplements the arc-ball rotation manipulator ;  CTArchiveFileClass describing an archive file containing multiple sub-files, like a ZIP or TAR archive ;  CTArchiveMember;  CTARInterruptHandler;  CTArrayAbstract array base class ;  CTArrayCArray of chars or bytes (8 bits per element) ;  CTArrayDArray of doubles (64 bits per element) ;  CTArrayFArray of floats (32 bits per element) ;  CTArrayIArray of integers (32 bits per element) ;  CTArrayLArray of longs (32 or 64 bits per element) ;  CTArrayL64Array of long64s (64 bits per element) ;  CTArraySArray of shorts (16 bits per element) ;  CTArrowDraw all kinds of Arrows ;  CTArrowEditor;  CTASImageImage class ;  CTASImagePlugin;  CTASLogHandler;  CTASLogHandlerGuard;  ►CTASPaletteEditorThis is a GUI window to edit a color palette ;  CLimitLine;  CPaintPalette;  CTASPluginGSAllows to read PS/EPS/PDF files via GhostScript ;  ►CTAtomicCount;  CLo",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:113079,Integrability,protocol,protocol,113079," a Tree ;  CTBasketSQLImplement TBasket for a SQL backend ;  CTBenchmarkThis class is a ROOT utility to help benchmarking applications ;  CTBinomialEfficiencyFitterBinomial fitter for the division of two histograms ;  ►CTBitsContainer of bits ;  CTReference;  CTBonjourBrowser;  CTBonjourRecord;  CTBonjourRegistrar;  CTBonjourResolver;  CTBoxCreate a Box ;  CTBranchA TTree is a list of TBranches ;  CTBranchClonesA Branch for the case of an array of clone objects ;  CTBranchElementA Branch for the case of an object ;  CTBranchObjectA Branch for the case of an object ;  CTBranchRefA branch containing and managing a TRefTable for TRef autoloading ;  ►CTBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode ;  CElementBranchHelper_t;  CTBRIKA box with faces perpendicular to the axes ;  CTBrowserUsing a TBrowser one can browse all ROOT objects ;  CTBrowserImpABC describing GUI independent browser implementation protocol ;  CTBrowserPlugin;  CTBtInnerNodeInner node of a TBtree ;  CTBtItemItem stored in inner nodes of a TBtree ;  CTBtLeafNodeLeaf node of a TBtree ;  CTBtNodeAbstract base class (ABC) of a TBtree node ;  CTBtreeB-tree class ;  CTBtreeIterIterator of btree ;  CTBufferBuffer base class used for serializing objects ;  CTBuffer3DGeneric 3D primitive description class ;  CTBuffer3DCutTubeCut tube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres ;  CTBuffer3DTubeComplete tube description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTubeSegTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferJSON;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:114220,Integrability,interface,interface,114220,"TBtree ;  CTBtNodeAbstract base class (ABC) of a TBtree node ;  CTBtreeB-tree class ;  CTBtreeIterIterator of btree ;  CTBufferBuffer base class used for serializing objects ;  CTBuffer3DGeneric 3D primitive description class ;  CTBuffer3DCutTubeCut tube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres ;  CTBuffer3DTubeComplete tube description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTubeSegTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferJSON;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements or read data from SQL tables ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containg TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu as",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:114435,Integrability,interface,interfaced,114435,"tion class ;  CTBuffer3DCutTubeCut tube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres ;  CTBuffer3DTubeComplete tube description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTubeSegTube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTypes;  CTBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket ;  CTBufferJSON;  CTBufferSQLImplement TBuffer for a SQL backend ;  CTBufferSQL2Converts data to SQL statements or read data from SQL tables ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containg TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:115053,Integrability,interface,interface,115053,"ts data to SQL statements or read data from SQL tables ;  CTBufferXMLClass for serializing/deserializing object to/from xml ;  CTButtonA TButton object is a user interface object ;  CTCandleThe candle plot painter class ;  CTCanvasThe Canvas class ;  CTCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area) ;  CTCastorFileA TNetFile interfaced to the Castor storage backend ;  CTChainA chain is a collection of files containg TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and their relations for a list of classes ;  ►CTClingThis class defines an interface to the cling C++ interpreter ;  CCharPtrCmp_t;  CTUniqueString;  CTClingBaseClassInfoEmulation of the CINT BaseClassInfo class ;  CTClingCallbacks;  CTClingCallFuncEmulation of the CINT CallFunc class ;  CTClingClassInfoEmulation of the CINT ClassInfo class ;  CTClingDataMemberInfoEmulation of the CINT DataMemberInfo class ;  CTClingMethodArgInfoEmulation of the CINT MethodInfo class ;  CTClingMethodInfoEmulation of the CINT MethodInfo class ;  CTClin",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:115593,Integrability,interface,interface,115593,"f a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and their relations for a list of classes ;  ►CTClingThis class defines an interface to the cling C++ interpreter ;  CCharPtrCmp_t;  CTUniqueString;  CTClingBaseClassInfoEmulation of the CINT BaseClassInfo class ;  CTClingCallbacks;  CTClingCallFuncEmulation of the CINT CallFunc class ;  CTClingClassInfoEmulation of the CINT ClassInfo class ;  CTClingDataMemberInfoEmulation of the CINT DataMemberInfo class ;  CTClingMethodArgInfoEmulation of the CINT MethodInfo class ;  CTClingMethodInfoEmulation of the CINT MethodInfo class ;  CTClingTypedefInfoEmulation of the CINT TypedefInfo class ;  CTClingTypeInfoEmulation of the CINT TypeInfo class ;  ►CTClingValueBridge between cling::Value and ROOT ;  CHasTheSameSizeAsClingValue;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionMemberStreamerClass streamer object to implement TMemberStreamer functionality for I/O emulation ;  CTCollectionMethodBrowsab",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:117508,Integrability,interface,interface,117508,"mplement TMemberStreamer functionality for I/O emulation ;  CTCollectionMethodBrowsableTCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context sensitive popup menus ;  CTControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operations ;  CTControlBarButtonThis class defines the control bar buttons ;  CTControlBarImpABC describing GUI independent control bar ;  CTConvertClonesArrayToProxySmall helper to read a TBuffer containing a TClonesArray into any valid collection ;  CTConvertMapToProxy;  CTCreatePrimitivesCreates new primitives ;  CTCrownTo draw a Crown ;  CTCTUBA cut tube with 11 parameters ;  CTCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams ;  CTCurlyArcEditor;  CTCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams ;  CTCurlyLineEditor;  CTCutA specialized string object used for TTree selections ;  CTCutGGraphical cut class ;  CTDatabasePDGParticle database manager class ;  CTDataMemberAll ROOT classes may have R",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:117593,Integrability,interface,interface,117593,"leTCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context sensitive popup menus ;  CTControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operations ;  CTControlBarButtonThis class defines the control bar buttons ;  CTControlBarImpABC describing GUI independent control bar ;  CTConvertClonesArrayToProxySmall helper to read a TBuffer containing a TClonesArray into any valid collection ;  CTConvertMapToProxy;  CTCreatePrimitivesCreates new primitives ;  CTCrownTo draw a Crown ;  CTCTUBA cut tube with 11 parameters ;  CTCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams ;  CTCurlyArcEditor;  CTCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams ;  CTCurlyLineEditor;  CTCutA specialized string object used for TTree selections ;  CTCutGGraphical cut class ;  CTDatabasePDGParticle database manager class ;  CTDataMemberAll ROOT classes may have RTTI (run time type identification) support added ;  CTDataSet;  CTDataSetIter;  CTDat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:119761,Integrability,interface,interface,119761,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:125221,Integrability,wrap,wrapper,125221,"or for TEveElement class ;  CTEveElementListA list of TEveElements ;  CTEveElementListProjectedA projected element list – required for proper propagation of render state to projected views ;  CTEveElementObjectPtrTEveElement with external TObject as a holder of visualization data ;  CTEveEventManagerBase class for event management and navigation ;  CTEveExceptionException class thrown by TEve classes and macros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of objects o",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:125889,Integrability,wrap,wrapper,125889,"ion of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of objects on regular grids ;  CTEveGridStepperEditorEditor for TEveGridStepper class ;  CTEveGridStepperSubEditorSub-editor for TEveGridStepper class ;  CTEveGTriVecValuatorComposite GUI element for setting three numerical values (label, three number-entries) ;  CTEveGValuatorComposite GUI element for single value selection (supports label, number-entry and slider) ;  CTEveGValuatorBaseBase class for composite GUI elements for setting of numeric values ;  CTEveHit;  CTEveJetConeDraws a jet cone with leading particle is specified in (eta,phi) and cone radius is given ;  CTEveJetConeEditorGUI editor for TEveJetCone ;  CTEveJetConeGLOpenGL renderer class for TEveJetCone ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:128208,Integrability,wrap,wrapper,128208,"or TEveLine class ;  CTEveLineProjectedProjected copy of a TEveLine ;  CTEveListTreeItemSpecial list-tree-item for Eve ;  CTEveMacroSub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution ;  CTEveMagFieldAbstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator ;  CTEveMagFieldConstImplements constant magnetic field, given by a vector fB ;  CTEveMagFieldDuoImplements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut ;  ►CTEveManagerCentral application manager for Eve ;  CTExceptionHandlerException handler for Eve exceptions ;  CTRedrawDisabler;  CTEveMCRecCrossRef;  CTEveMCTrack;  CTEventIterSpecial iterator class used in TProofPlayer to iterate over events or objects in the packets ;  CTEventIterObj;  ►CTEventIterTree;  CTFileTree;  CTEventIterUnit;  CTEventListA TEventList object is a list of selected events (entries) in a TTree ;  CTEvePadThis was intended as a TPad wrapper to allow smart updates of groups of pads ;  CTEvePadHolderException safe wrapper for setting gPad ;  ►CTEveParamListCollection of named parameters ;  CBoolConfig_t;  CFloatConfig_t;  CIntConfig_t;  CTEveParamListEditorGUI editor for TEveParamList ;  CTEvePathMarkTSpecial-point on track: ;  CTEvePlot3DDescription of TEvePlot3D ;  CTEvePlot3DGLOpenGL renderer class for TEvePlot3D ;  CTEvePointSelectorTEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree ;  CTEvePointSelectorConsumerTEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class ;  CTEvePointSetTEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc) ;  CTEvePointSetArrayAn array of point-sets with each point-set playing a role of a bin in a histogram ;  CTEvePointSetArrayEditorEditor f",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:128289,Integrability,wrap,wrapper,128289,"reeItemSpecial list-tree-item for Eve ;  CTEveMacroSub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution ;  CTEveMagFieldAbstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator ;  CTEveMagFieldConstImplements constant magnetic field, given by a vector fB ;  CTEveMagFieldDuoImplements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut ;  ►CTEveManagerCentral application manager for Eve ;  CTExceptionHandlerException handler for Eve exceptions ;  CTRedrawDisabler;  CTEveMCRecCrossRef;  CTEveMCTrack;  CTEventIterSpecial iterator class used in TProofPlayer to iterate over events or objects in the packets ;  CTEventIterObj;  ►CTEventIterTree;  CTFileTree;  CTEventIterUnit;  CTEventListA TEventList object is a list of selected events (entries) in a TTree ;  CTEvePadThis was intended as a TPad wrapper to allow smart updates of groups of pads ;  CTEvePadHolderException safe wrapper for setting gPad ;  ►CTEveParamListCollection of named parameters ;  CBoolConfig_t;  CFloatConfig_t;  CIntConfig_t;  CTEveParamListEditorGUI editor for TEveParamList ;  CTEvePathMarkTSpecial-point on track: ;  CTEvePlot3DDescription of TEvePlot3D ;  CTEvePlot3DGLOpenGL renderer class for TEvePlot3D ;  CTEvePointSelectorTEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree ;  CTEvePointSelectorConsumerTEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class ;  CTEvePointSetTEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc) ;  CTEvePointSetArrayAn array of point-sets with each point-set playing a role of a bin in a histogram ;  CTEvePointSetArrayEditorEditor for TEvePointSetArray class ;  CTEvePointSetProjectedProjected copy of a TEvePoint",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:130708,Integrability,wrap,wrapping,130708,"  CTEveProjectionAxesAxes for non-linear projections ;  CTEveProjectionAxesEditorGUI editor for TEveProjectionAxes ;  CTEveProjectionAxesGLOpenGL renderer class for TEveProjectionAxes ;  CTEveProjectionManagerManager class for steering of projections and managing projected objects ;  CTEveProjectionManagerEditorGUI editor for TEveProjectionManager class ;  ►CTEveQuadSetSupports various internal formats that result in rendering of a set of planar (lines, rectangles, hexagons with shared normal) objects ;  CQFreeQuad_t;  CQHex_t;  CQLineFixC_t;  CQOrigin_t;  CQRect_t;  CQRectFixC_t;  CQRectFixDim_t;  CQRectFixDimC_t;  CTEveQuadSetGLGL-renderer for TEveQuadSet class ;  CTEveRecCascade;  CTEveRecKink;  CTEveRecTrackT;  CTEveRecV0;  CTEveRefBackPtrBase-class for reference-counted objects with reverse references to TEveElement objects ;  CTEveRefCntBase-class for reference-counted objects ;  CTEveRGBAPaletteA generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes ;  CTEveRGBAPaletteEditorEditor for TEveRGBAPalette class ;  CTEveRGBAPaletteOverlayDescription of TEveRGBAPaletteOverlay ;  CTEveRGBAPaletteSubEditorSub-editor for TEveRGBAPalette class ;  CTEveRhoZProjectionTransformation from 3D to 2D ;  CTEveRPhiProjectionXY projection with distortion around given center ;  CTEveScalableStraightLineSetStraight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object ;  CTEveSceneEve representation of TGLScene ;  CTEveSceneInfoTEveUtil representation of TGLSceneInfo ;  CTEveSceneListList of Scenes providing common operations on TEveScene collections ;  CTEveSecondarySelectableSemi-abstract interface for classes supporting secondary-selection ;  CTEveSelectionMake sure there is a SINGLE running TEveSelection for each selection type (select/highlight) ;  CTEveSelectorToEventListTSelector that stores entry numbers of matching TTree entries into an event-list ;  CTEv",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:131435,Integrability,interface,interface,131435,"veRecV0;  CTEveRefBackPtrBase-class for reference-counted objects with reverse references to TEveElement objects ;  CTEveRefCntBase-class for reference-counted objects ;  CTEveRGBAPaletteA generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes ;  CTEveRGBAPaletteEditorEditor for TEveRGBAPalette class ;  CTEveRGBAPaletteOverlayDescription of TEveRGBAPaletteOverlay ;  CTEveRGBAPaletteSubEditorSub-editor for TEveRGBAPalette class ;  CTEveRhoZProjectionTransformation from 3D to 2D ;  CTEveRPhiProjectionXY projection with distortion around given center ;  CTEveScalableStraightLineSetStraight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object ;  CTEveSceneEve representation of TGLScene ;  CTEveSceneInfoTEveUtil representation of TGLSceneInfo ;  CTEveSceneListList of Scenes providing common operations on TEveScene collections ;  CTEveSecondarySelectableSemi-abstract interface for classes supporting secondary-selection ;  CTEveSelectionMake sure there is a SINGLE running TEveSelection for each selection type (select/highlight) ;  CTEveSelectorToEventListTSelector that stores entry numbers of matching TTree entries into an event-list ;  CTEveShapeAbstract base-class for 2D/3D shapes ;  CTEveShapeEditorGUI editor for TEveShape ;  ►CTEveStraightLineSetSet of straight lines with optional markers along the lines ;  CLine_t;  CMarker_t;  CTEveStraightLineSetEditorEditor for TEveStraightLineSet class ;  CTEveStraightLineSetGLGL-renderer for TEveStraightLineSet class ;  CTEveStraightLineSetProjectedProjected replica of a TEveStraightLineSet ;  CTEveTextTEveElement class used for displaying FreeType GL fonts ;  CTEveTextEditorGUI editor for TEveText ;  CTEveTextGLOpenGL renderer class for TEveText ;  CTEveTrackVisual representation of a track ;  CTEveTrackEditorEditor for TEveTrack class ;  CTEveTrackGLGL-renderer for TEveTrack class ;  CTEveTrackListA list of t",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:134666,Integrability,wrap,wrapping,134666,"hree-vector ;  CTEveViewerEve representation of TGLViewer ;  CTEveViewerListList of Viewers providing common operations on TEveViewer collections ;  CTEveViewerListEditorGUI editor for TEveViewerList ;  CTEveVSDVisualization Summary Data - a collection of trees holding standard event data in experiment independent format ;  CTEveWindowAbstract base-class for representing eve-windows ;  CTEveWindowEditorGUI editor for TEveWindow ;  CTEveWindowFrameEncapsulates TGFrame into an eve-window ;  CTEveWindowManagerManager for EVE windows ;  CTEveWindowPackEncapsulates TGPack into an eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMerge",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:136309,Integrability,interface,interface,136309,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:136503,Integrability,interface,interface,136503,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:139858,Integrability,interface,interface,139858,"bject itself ;  CTFormulaThe F O R M U L A class ;  CTFormulaFunctionHelper class for TFormula ;  CTFormulaParamOrderFunctor defining the parameter order ;  CTFormulaVariableAnother helper class for TFormula ;  CTFPBlockThis class represents the encapsulation of a block request ;  CTFractionFitterFits MC fractions to data histogram ;  CTFrameDefine a Frame ;  CTFrameEditor;  CTFreeService class for TFile ;  CTFriendElementA TFriendElement TF describes a TTree object TF in a file ;  CTFTP;  CTFumili;  CTFUMILI;  CTFumiliMinimizerTFumiliMinimizer class: minimizer implementation based on TFumili ;  CTFunctionGlobal functions class (global functions are obtained from CINT) ;  CTFunctionParametersDialog;  CTFunctionTemplateDictionary for function template This class describes one single function template ;  CTG16ColorSelector;  CTGApplication;  CTGaxisThe axis painter class ;  CTGButton;  CTGButtonGroup;  CTGCanvas;  CTGCheckButton;  CTGClient;  CTGCocoaThis class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelp",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:141161,Integrability,interface,interface,141161,"or MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGeneratorThe interface to various event generators ;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpaceUtility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi"") ;  CTGeoArb8An arbitrary trapezoid with less than 8 vertices standing on ;  CTGeoAttVisualization and tracking attributes for volumes and nodes ;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBoxBox class ;  CTGeoBBoxEditor;  ►CTGeoBoolNodeBase class for Boolean operations between two shapes ;  CThreadData_t;  CTGeoBranchArrayAn array of daughter indices making a geometry path ;  CTGeoBuilderUtility class for creating geometry objects.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:141414,Integrability,depend,dependence,141414,"or MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGeneratorThe interface to various event generators ;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpaceUtility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi"") ;  CTGeoArb8An arbitrary trapezoid with less than 8 vertices standing on ;  CTGeoAttVisualization and tracking attributes for volumes and nodes ;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBoxBox class ;  CTGeoBBoxEditor;  ►CTGeoBoolNodeBase class for Boolean operations between two shapes ;  CThreadData_t;  CTGeoBranchArrayAn array of daughter indices making a geometry path ;  CTGeoBuilderUtility class for creating geometry objects.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:143642,Integrability,interface,interface,143642,"TransEditor;  CTGeoCompositeShapeClass handling Boolean composition of shapes ;  CTGeoConeConical tube class ;  CTGeoConeEditor;  CTGeoConeSegA phi segment of a conical tube ;  CTGeoConeSegEditor;  CTGeoCtubA tube segment cut with 2 planes ;  CTGeoCtubEditor;  CTGeoDecayChannelA decay channel for a radionuclide ;  CTGeoElementBase class for chemical elements ;  CTGeoElementRNClass representing a radionuclide ;  CTGeoElementTableTable of elements ;  CTGeoElemIterIterator for decay branches ;  CTGeoEltuElliptical tube class ;  CTGeoEltuEditor;  CTGeoExtensionABC for user objects attached to TGeoVolume or TGeoNode ;  CTGeoGedFrame;  CTGeoGenTransMost general transformation, holding a translation, a rotation and a scale ;  CTGeoGlobalMagFieldGlobal magnetic field manager ;  CTGeoGtraGtra is a twisted trapezoid ;  CTGeoGtraEditor;  CTGeoHalfSpaceA half-space defined by: ;  CTGeoHelixClass representing a helix curve ;  CTGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition ;  CTGeoHypeHyperboloid class defined by 5 parameters ;  CTGeoHypeEditor;  CTGeoIdentityAn identity transformation ;  CTGeoIntersection;  CTGeoIsotope;  CTGeoIteratorA geometry iterator ;  CTGeoIteratorPlugin;  CTGeoManagerThe manager class for any TGeo geometry ;  CTGeoManagerEditor;  CTGeoMaterialBase class describing materials ;  CTGeoMaterialDialog;  CTGeoMaterialEditor;  CTGeoMatrixGeometrical transformation package ;  CTGeoMatrixDialog;  CTGeoMCGeometryImplementation of the TVirtualMCGeometry interface for building TGeo geometry ;  CTGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC) ;  CTGeoMediumDialog;  CTGeoMediumEditor;  CTGeometryTGeometry description ;  CTGeoMixture;  CTGeoMixtureEditor;  CTGeoNavigatorClass providing navigation API for TGeo geometries ;  CTGeoNavigatorArray;  CTGeoNodeA node represent a volume positioned inside another.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:150608,Integrability,wrap,wrapper,150608,"ected from ;  CTGLClipSetEditorGUI editor for TGLClipSet ;  CTGLClipSetSubEditorGUI sub-editor for TGLClipSet ;  CTGLColorClass encapsulating color information in preferred GL format - an array of four unsigned bytes ;  CTGLColorSetClass encapsulating a set of colors used throughout standard rendering ;  CTGLContextThis class encapsulates window-system specific information about a GL-context and alows their proper management in ROOT ;  CTGLContextIdentityIdentifier of a shared GL-context ;  CTGLContextPrivate;  CTGLCylinderImplements a native ROOT-GL cylinder that can be rendered at different levels of detail ;  CTGLDisableGuard;  CTGLEmbeddedViewerMinimal GL-viewer that can be embedded in a standard ROOT frames ;  CTGLEnableGuard;  CTGLEventHandlerBase-class and default implementation of event-handler for TGLViewer ;  CTGLFaceSetImplements a native ROOT-GL representation of an arbitrary set of polygons ;  CTGLFaderHelper;  CTGLFBOFrame-buffer object ;  CTGLFloatHolder;  CTGLFontA wrapper class for FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShape",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:151545,Integrability,interface,interface,151545,"CTGLFBOFrame-buffer object ;  CTGLFloatHolder;  CTGLFontA wrapper class for FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:152328,Integrability,rout,routines,152328,"CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeConcrete physical shape - a GL drawable ;  CTGLPlane3D plane class - of format Ax + By + Cz + D = 0 ;  CTGLPlot3DDescription of TGLPlot3D ;  CTGLPlotBoxImplementation of a box around a histogram/function for plot-painters ;  CTGLPlotCameraCamera for TGLPlotPainter and sub-classes ;  CTGLPlotCoordinatesHelper class for plot-painters holding information about axis ranges, numbers of bin",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:152767,Integrability,wrap,wrapper,152767,"h allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeConcrete physical shape - a GL drawable ;  CTGLPlane3D plane class - of format Ax + By + Cz + D = 0 ;  CTGLPlot3DDescription of TGLPlot3D ;  CTGLPlotBoxImplementation of a box around a histogram/function for plot-painters ;  CTGLPlotCameraCamera for TGLPlotPainter and sub-classes ;  CTGLPlotCoordinatesHelper class for plot-painters holding information about axis ranges, numbers of bins and flags if certain axis is logarithmic ;  CTGLPlotPainterBase class for plot-painters that provide GL rendering of various 2D and 3D histograms, functions and parametric surfaces ;  CTGLPolyLineTo draw a 3D polyline in a GL window ;  CTGLPolyMarkerTo draw a 3D polymarker in a GL window ;  CTGLPShapeObjWrap TGLPysicalShape into TObject so that it can be edited using GED ;  CTGLPShapeObjEditorGUI editor for TGLPShapeObj ;  CTGLPShap",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:154743,Integrability,interface,interface,154743,"LPShapeObj ;  CTGLPShapeRefBase class for references to TGLPysicalShape that need to be notified when the shape is destroyed ;  CTGLQuadricWrapper class for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape an",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:154895,Integrability,interface,interface,154895," for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLoc",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:157109,Integrability,interface,interface,157109," by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGLViewer ;  CTGLVoxelPainterPaint TH3 histograms as ""voxels"" - colored boxes, transparent if transfer function was specified ;  CTGLWidgetGL window with context ;  ►CTGMainFrame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw p",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:158276,Integrability,interface,interface,158276,"aph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobStatus;  CTGridJobStatusList;  CTGridResult;  CTGroupButtonA specialized TButton used in a group of Buttons ;  CTGRowLayout;  CTGScrollBar;  CTGScrollBarElement;  CTGSearchDialog;  CTGSearchType;  CTGSelectBoxThis class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data members ;  CTGSelectedPicture;  CTGShapedFrame;  CTGShutter;  CTGShutterItem;  CTGSimpleTable;  CTGSimpleTableInterface;  CTGSlider;  CTGSpeedo;  CTGSplitButton;  CTGSplitFrame;  CTGSplitter;  CTGSplitTool;  CTGStatusBar;  CTGString;  CTGTab;  CTGTabElement;  CTGTabLayout;  CTGTable;  CTGTableCell;  CTGTableFrame;  CTGTableHeader;  CTGTableHeaderFrame;  ►CTGTableLayout;  CTa",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:159679,Integrability,interface,interface,159679,in a group of Buttons ;  CTGRowLayout;  CTGScrollBar;  CTGScrollBarElement;  CTGSearchDialog;  CTGSearchType;  CTGSelectBoxThis class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data members ;  CTGSelectedPicture;  CTGShapedFrame;  CTGShutter;  CTGShutterItem;  CTGSimpleTable;  CTGSimpleTableInterface;  CTGSlider;  CTGSpeedo;  CTGSplitButton;  CTGSplitFrame;  CTGSplitter;  CTGSplitTool;  CTGStatusBar;  CTGString;  CTGTab;  CTGTabElement;  CTGTabLayout;  CTGTable;  CTGTableCell;  CTGTableFrame;  CTGTableHeader;  CTGTableHeaderFrame;  ►CTGTableLayout;  CTableData_t;  CTGTableLayoutHints;  CTGText;  CTGTextBuffer;  CTGTextButton;  CTGTextEdit;  CTGTextEditor;  CTGTextEntry;  CTGTextLayout;  CTGTextLBEntry;  CTGTextLine;  CTGTextView;  CTGTextViewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHi,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160231,Integrability,interface,interface,160231,"  CTGTableHeaderFrame;  ►CTGTableLayout;  CTableData_t;  CTGTableLayoutHints;  CTGText;  CTGTextBuffer;  CTGTextButton;  CTGTextEdit;  CTGTextEditor;  CTGTextEntry;  CTGTextLayout;  CTGTextLBEntry;  CTGTextLine;  CTGTextView;  CTGTextViewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160373,Integrability,interface,interface,160373,"Editor;  CTGTextEntry;  CTGTextLayout;  CTGTextLBEntry;  CTGTextLine;  CTGTextView;  CTGTextViewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2-D hist",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160467,Integrability,interface,interface,160467,"ewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2-D histogram with a double per channel (see TH1 documentation)} ;  CTH2Editor;  CTH2FTomato 2-D histo",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160564,Integrability,interface,interface,160564,"ted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2-D histogram with a double per channel (see TH1 documentation)} ;  CTH2Editor;  CTH2FTomato 2-D histogram with a float per channel (see TH1 documentation)} ;  CTH2GLRendering of TH2 and derived clas",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162649,Integrability,interface,interface,162649,CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CT,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162734,Integrability,wrap,wrapper,162734,in in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CT,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162839,Integrability,protocol,protocols,162839,;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CTPathDefinition;  CTHttpCallArg;  CTHttpEngine;  CTHttpServer;  CTHttpWSEngine;  CTHYPEAn hyperboloid (not ,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:163929,Integrability,interface,interface,163929," per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkInfo_t;  COutputStyle_t;  CPathInfo_t;  CTFileDefinition;  CTFileSysDB;  CTFileSysDir;  CTFileSysEntry;  CTFileSysRoot;  CTHelperBase;  CTModuleDefinition;  CTPathDefinition;  CTHttpCallArg;  CTHttpEngine;  CTHttpServer;  CTHttpWSEngine;  CTHYPEAn hyperboloid (not implemented) ;  CTIdleTOTimer;  CTIdleTOTimerGuard;  CTileFrame;  CTImageAn abstract interface to image processing library ;  CTImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:164506,Integrability,interface,interface,164506,"GIF, JPEG, PNG, XPM, TIFF etc.) ;  CTImagePaletteA class to define a conversion from pixel values to pixel color ;  CTImagePlugin;  CTIndArray;  ►CTIndexTable;  Citerator;  CTInetAddressThis class represents an Internet Protocol (IP) address ;  CTInspectCanvasA TInspectCanvas is a canvas specialized to inspect Root objects ;  CTInspectorImpABC describing GUI independent object inspector (abstraction mainly needed for Win32 ;  CTInstrumentedIsAProxy;  ►CTInterpreterThis class defines an abstract interface to a generic command line interpreter ;  CCallFuncIFacePtr_t;  CSuspendAutoParsing;  CTInterpreterValue;  CTIsAProxyTIsAProxy implementation class ;  CTIter;  CTIteratorIterator abstract base class ;  CTIterCategory;  CTKDEKernel Density Estimation class ;  CTKDEFGT;  CTKDTreeClass implementing a kd-tree ;  CTKDTreeBinning<- TKDTreeBinning - A class providing multidimensional binning -> ;  CTKeyBook space in a file, create I/O buffers, to fill them, (un)compress them ;  CTKeyMapFileUtility class for browsing TMapFile objects ;  CTKeySQLTKeySQL represents metainforamtion about object, which was written to SQL database ;  CTKeyXML;  ►CTKSocket;  CDesc_t;  ►CTLatexTo draw Mathematical Formula ;  CFormSize_tTLatex helper struct holding the dimensions of a piece of text ;  CTextSpec_tTLatex helper struct holding the attributes of a piece of text ;  CTLatexFormSizeTLatex helper class used to compute the size of a portion of a formula ;  CTLDAPAttribute;  CTLDAPEntry;  CTLDAPResult;  CTLDAPServer;  ►CTLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree ;  CGetValueHelper;  CGetValueHelper< Long64_t >;  CGetValueHelper< LongDouble_t >;  CGetValueHelper< ULong64_t >;  CTLeafBA TLeaf for an 8 bit Integer data type ;  CTLeafCA TLeaf for a variable length string ;  CTLeafDA TLeaf for a 64 bit floating point data type ;  CTLeafElementA TLeaf for the general case when using the branches created via a TStreamerInfo (i.e ;  CTLeafFA TLeaf for a 32 b",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:166526,Integrability,interface,interface,166526,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:166565,Integrability,rout,routines,166565,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:169802,Integrability,message,message-digest,169802,"cribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data storage for description of one particle ;  CTMCVerboseClass for printing a detailed information from MC application ;  CTMD5This code implements the MD5 message-digest algorithm ;  CTMehrotraSolver;  CTMemberInspectorAbstract base class for accessing the data-members of a class ;  CTMemberStreamer;  ►CTMemFileA TMemFile is like a normal TFile except that it reads and writes only from memory ;  CTMemBlock;  CTMemStat;  CTMemStatHook;  CTMemStatShowUtility class post-processing the file generated by TMemStat (default memstat.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:170237,Integrability,message,messages,170237,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:170575,Integrability,interface,interface,170575,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:171068,Integrability,message,messages,171068,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:175194,Integrability,interface,interface,175194,"ates plots ;  CTParallelCoordSelectA TParallelCoordSelect is a specialised TList to hold TParallelCoordRanges used by TParallelCoord ;  CTParallelCoordVarTParallelCoord axes ;  CTParallelMergingFile;  CTParameterNamed parameter, streamable and storable ;  CTParticleDescription of the dynamic properties of a particle ;  CTParticleClassPDGUtility class used internally by TDatabasePDG ;  CTParticlePDGDescription of the static properties of a particle ;  CTPaveA TBox with a bordersize and a shadow option ;  CTPaveClassA TPaveLabel specialized to process classes inside a TClassTree ;  CTPaveLabelA Pave (see TPave) with a text centered in the Pave ;  CTPaveStatsThe histogram statistics painter class ;  CTPaveStatsEditor;  CTPavesTextA PaveText (see TPaveText) with several stacked paves ;  CTPaveTextA Pave (see TPave) with text, lines or/and boxes inside ;  CTPBHandleDSType;  CTPBHistType;  CTPBReadType;  CTPCONA polycone ;  CTPDFInterface to PDF ;  CTPerfEvent;  CTPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTPGONA polygon ;  CTPgSQLResult;  CTPgSQLRow;  CTPgSQLServer;  CTPgSQLStatement;  CTPickerStackGuard;  CTPieDraw a Pie Chart, ;  CTPieEditor;  CTPieSliceA slice of a piechart, see the TPie class ;  CTPieSliceEditor;  CTPluginHandler;  CTPluginManagerThis class implements a plugin library manager ;  CTPMERegexpWrapper for PCRE library (Perl Compatible Regular Expressions) ;  CTPoint;  CTPoints2-D graphics point (world coordinates) ;  CTPoints3D;  CTPoints3DABCAbstract class to define Arrays of 3D points ;  CTPointsArray3D;  CTPointSet3DTPolyMarker3D using TPointSet3DGL for direct OpenGL rendering ;  CTPointSet3DGLDirect OpenGL renderer for TPointSet3D ;  CTPolyLineDefined by an array on N points in a 2-D space ;  CTPolyLine3DA 3-dimensional polyline ;  CTPolyLineShape;  CTPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space ;  CTPolyMarker3DA 3D polymarker ;  CTPoolPlayer;  CTPoolProcessor;  CT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:178033,Integrability,synchroniz,synchronize,178033,"ue of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node inf",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:178673,Integrability,interface,interface,178673,"ng using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryP",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179908,Integrability,interface,interface,179908," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:180476,Integrability,interface,interface,180476," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:180649,Integrability,interface,interface,180649,"ressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.2 ;  CTPythia6CleanerUtility class to manage the TPythia6 instance ;  CTPythia6DecayerThis class implements the TVirtualMCDecayer interface ;  CTPythia8TPythia8 is an interface class to C++ version of Pythia 8.1 event generators, written by T.Sjostrand ;  CTPythia8DecayerThis class implements the TVirtualMCDecayer interface using TPythia8 ;  CTPython;  CTQApplication;  CTQCanvasImp;  CTQCanvasMenu;  CTQClass;  CTQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creating instances of command objects ;  CTQConnectionTQConnection class is an internal class, used in the object communication mechanism ;  CTQObjectThis is the ROOT implementation of the Qt object communication mechanism (see also http://www.troll.no/qt/metaobjects.html) ;  CTQObjSender;  CTQpDataBase;  CTQpDataDens;  CTQpDataSparse;  CTQpLinSolverBase;  CTQpLinSolverDens;  CTQpLinSolverSparse;  CTQpProbBase;  CTQpProbDens;  CTQpProbSparse;  CTQpResidual;  CTQpSolverBase;  CTQpVar;  CTQRootApplication;  CTQRootCanvas;  CTQRootDialog;  CTQRootGuiFactory;  CTQtRootGuiFactory;  CT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:180686,Integrability,interface,interface,180686,"ressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.2 ;  CTPythia6CleanerUtility class to manage the TPythia6 instance ;  CTPythia6DecayerThis class implements the TVirtualMCDecayer interface ;  CTPythia8TPythia8 is an interface class to C++ version of Pythia 8.1 event generators, written by T.Sjostrand ;  CTPythia8DecayerThis class implements the TVirtualMCDecayer interface using TPythia8 ;  CTPython;  CTQApplication;  CTQCanvasImp;  CTQCanvasMenu;  CTQClass;  CTQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creating instances of command objects ;  CTQConnectionTQConnection class is an internal class, used in the object communication mechanism ;  CTQObjectThis is the ROOT implementation of the Qt object communication mechanism (see also http://www.troll.no/qt/metaobjects.html) ;  CTQObjSender;  CTQpDataBase;  CTQpDataDens;  CTQpDataSparse;  CTQpLinSolverBase;  CTQpLinSolverDens;  CTQpLinSolverSparse;  CTQpProbBase;  CTQpProbDens;  CTQpProbSparse;  CTQpResidual;  CTQpSolverBase;  CTQpVar;  CTQRootApplication;  CTQRootCanvas;  CTQRootDialog;  CTQRootGuiFactory;  CTQtRootGuiFactory;  CT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:180835,Integrability,interface,interface,180835,"ROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.2 ;  CTPythia6CleanerUtility class to manage the TPythia6 instance ;  CTPythia6DecayerThis class implements the TVirtualMCDecayer interface ;  CTPythia8TPythia8 is an interface class to C++ version of Pythia 8.1 event generators, written by T.Sjostrand ;  CTPythia8DecayerThis class implements the TVirtualMCDecayer interface using TPythia8 ;  CTPython;  CTQApplication;  CTQCanvasImp;  CTQCanvasMenu;  CTQClass;  CTQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creating instances of command objects ;  CTQConnectionTQConnection class is an internal class, used in the object communication mechanism ;  CTQObjectThis is the ROOT implementation of the Qt object communication mechanism (see also http://www.troll.no/qt/metaobjects.html) ;  CTQObjSender;  CTQpDataBase;  CTQpDataDens;  CTQpDataSparse;  CTQpLinSolverBase;  CTQpLinSolverDens;  CTQpLinSolverSparse;  CTQpProbBase;  CTQpProbDens;  CTQpProbSparse;  CTQpResidual;  CTQpSolverBase;  CTQpVar;  CTQRootApplication;  CTQRootCanvas;  CTQRootDialog;  CTQRootGuiFactory;  CTQtRootGuiFactory;  CTQuaternionQuaternion is a 4-component mathematic object quite convenient when dealing with space rotation (or reference frame transformation) ;  CTQueryDescription;  CTQueryResultA container class for query results ;  CTQueryResultManagerClass managing the query-result area ;  CTQUndoManagerRecorder of operations for undo and redo ;  CTrack;  CTrackD;  CTrackD32;  CTRadialGradientDefine a radial",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:184294,Integrability,interface,interface,184294,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:184807,Integrability,wrap,wraper,184807,"mputes confidence intervals for the rate of a Poisson process in the presence of uncertain background and/or efficiency ;  CTROOTROOT top level object description ;  CTRootApplication;  CTRootAuth;  CTRootBrowser;  CTRootBrowserLite;  CTRootCanvas;  CTRootContextMenu;  CTRootControlBar;  CTRootDialog;  CTRootEmbeddedCanvas;  CTRootGuiBuilder;  CTRootGuiFactory;  CTRootHelpDialog;  CTRootIOCtor;  CTRootSecContext;  CTRootSniffer;  CTRootSnifferScanRec;  CTRootSnifferStoreAbstract interface for storage of hierarchy scan in TRootSniffer ;  CTRootSnifferStoreJsonStorage of hierarchy scan in TRootSniffer in JSON format ;  CTRootSnifferStoreXmlStorage of hierarchy scan in TRootSniffer in XML format ;  ►CTRotationDescribes a rotation of objects of the TVector3 class ;  CTRotationRow;  CTRotMatrixManages a detector rotation matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequencea",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:187415,Integrability,interface,interface,187415,"r ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting functions ;  CTSpectrum2PainterTwo-dimensional graphics function ;  CTSpectrum2TransformAdvanced 2-dimensional orthogonal transform functions ;  CTSpectrum3Advanced 3-dimensional spectra processing functions ;  CTSpectrumFitAdvanced 1-dimensional spectra fitting functions ;  CTSpectrumTransformAdvanced 1-dimensional orthogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one cla",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:188163,Integrability,message,messages,188163,"ine5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring is legal ;  CTSVDUnfoldSVD Approach to Data Unfolding ;  CTSVGInterfac",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:189304,Integrability,interface,interface,189304,sicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring is legal ;  CTSVDUnfoldSVD Approach to Data Unfolding ;  CTSVGInterface to SVG ;  CTSynapse;  CTSysEvtHandlerAbstract base class for handling system events ;  CTSystemAbstract base class defining a generic interface to the underlying Operating System ;  CTSystemDirectoryDescribes an Operating System directory for the browser ;  CTSystemFileA TSystemFile describes an operating system file ;  CTTabCom;  ►CTTable;  Citerator;  Cpiterator;  CTTable3Points;  CTTableDescriptor;  CTTableIter;  CTTableMap;  CTTablePadView3D;  CTTablePoints;  CTTableRange;  CTTableSorter;  CTTaskTTask is a base class that can be used to build a complex tree of Tasks ;  CTTeXDumpInterface to TeX ;  CTTextBase class for several text objects ;  CTTextEditor;  ►CTTFInterface to the freetype 2 library ;  CTTGlyphTTF helper class containing glyphs description ;  CTThread;  CTThreadCleaner;  CTThreadFactory;  CTThreadImp;  CTThreadPool;  CTThreadPoolTask;  CTThreadPoolTaskImp;  CTThreadTimer;  CTTimeBasic time type with millisecond precision ;  CTTimerHandles synchronous and a-synchronous timer events ;  CTTimeStampThe TTimeStamp encapsulates seconds and ns since EPOCH ;  CTToggleThis class defines toggling facility for both,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191240,Integrability,rout,routine,191240,"ce EPOCH ;  CTToggleThis class defines toggling facility for both - object's method or variables ;  CTToggleGroupThis class defines check-box facility for TToggle objects It is used in context menu ""selectors"" for picking up a value ;  CTTRAPA general trapezoid ;  CTTRD1A trapezoid with the x dimension varying along z ;  CTTRD2A trapezoid with both x and y dimensions varying along z ;  ►CTTreeA TTree object has a header with a name and a title ;  CTClusterIteratorHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191731,Integrability,interface,interface,191731,"over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessi",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191986,Integrability,interface,interface,191986,"ClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:192034,Integrability,interface,interface,192034,"TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:192092,Integrability,interface,interface,192092,"reeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:192235,Integrability,interface,interface,192235,"routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:192373,Integrability,interface,interface,192373," all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranCon",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:193890,Integrability,interface,interface,193890,"TTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnfoldBinningThis class serves as a container of analysis bins analysis bins are specified by defining the axes of a distribution ;  CTUnfoldDensity;  CTUnfoldSysTUnfold is used to decompose a measurement y into several sources x given the measurement uncertainties and a matrix of migrations A ;  CTUnixSystem;  CTUnuranTUnuran class ;  CTUnuranBaseDistTUnuranBaseDist, base class for Unuran distribution classees such as TUnuranContDist (for one-dimension) or TUnuranMultiContDist (multi-dimension) ;  CTUnuranContDistTUnuranContDist class describing one dimensional continuous distribution ;  CTUnuranDiscrDistTUnuranDiscrDist class for one dimensional discrete distribution ;  CTUnuranEmpDistTUnuranEmpDist class for describing empiral distributions ;  CTUnuranMultiContDistTUnuranMultiContDist class describing multi dimensional continuous distributions ;  CTUnuranSamplerTUnuranSampler class class implementing the ROOT::Math::DistSampler interface using the UNU.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:194635,Integrability,interface,interface,194635,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:194732,Integrability,interface,interface,194732,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195007,Integrability,interface,interface,195007,"86 compatible URI ;  CTUrlThis class represents a WWW compatible URL ;  CTUsrHit;  CTUsrHitBuffer;  CTUsrSevtData1;  CTUsrSevtData2;  ►CTUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier) ;  Cuuid_time_t;  CTVector2TVector2 is a general two vector class, which can be used for the description of different vectors in 2D ;  CTVector3TVector3 is a general three vector class, which can be used for the description of different vectors in 3D ;  CTVectorTTVectorT ;  CTVersionCheck;  CTViewSee TView3D ;  CTView3DThe 3D view class ;  CTViewer3DPadProvides 3D viewer interface (TVirtualViewer3D) support on a pad ;  CTViewPubDataMembersView implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract clas",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195820,Integrability,interface,interface,195820," all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex inter",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196187,Integrability,interface,interface,196187,"or of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEd",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196252,Integrability,interface,interface,196252,"per around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtual",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196311,Integrability,interface,interface,196311,"ent even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196445,Integrability,interface,interface,196445,"ble is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtua",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196820,Integrability,interface,interface,196820,"face class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197364,Integrability,interface,interface,197364,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197471,Integrability,interface,interface,197471,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197542,Integrability,interface,interface,197542,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197772,Integrability,interface,interface,197772,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197979,Integrability,interface,interface,197979,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:198845,Integrability,interface,interfaces,198845,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:200039,Integrability,interface,interface,200039," the case of a xproofd-based session ;  CTXProofServThis class implements the XProofD version of TProofServ, with respect to which it differs only for the underlying connection technology ;  CTXrdClientAdminWrapper;  CTXSemaphoreGuard;  CTXSlaveThis is the version of TSlave for workers servers based on XProofD ;  CTXSockBuf;  CTXSocketHigh level handler of connections to XProofD ;  CTXSocketHandlerInput handler for XProofD sockets ;  CTXSockPipe;  CTXTRUA poly-extrusion ;  CTXUnixSocketImplementation of TXSocket using PF_UNIX sockets ;  CTZIPFileDescribes a ZIP archive file containing multiple sub-files ;  CTZIPMemberA ZIP archive consists of files compressed with the popular ZLIB compression algorithm; this class records the information about a single archive member ;  CUnuRanDist;  CUnuranDistrUnuranDistr Provides free function based on TF1 to be called by unuran ;  CUnuranDistrMultiFree functions for multidimensional functions needed bby UNURAN ;  CUnuranRngUnuranRng class for interface ROOT random generators to Unuran ;  CUserGroup_t;  CVariableSelectionRule;  CVecTrackD;  CVecTVecDouble;  CVecVecDouble;  CWindowAttributes_t;  CWrapperRooPdf;  C<X11Drawable>;  C<X11Window >;  CXColor_tDescription of a X11 color ;  CXHandleErr_t;  CXHandleIn_t;  ►CXMLReader;  CAttributes;  CXPClientArchiveRequest;  CXPClientInterruptRequest;  CXPClientLoginRequest;  CXPClientProofRequest;  CXPClientReadbufRequest;  CXPClientRequest;  CXPClientSendRcvRequest;  CXpdAdminCpCmd;  CXpdClientSessions;  CXpdEnv;  CXpdGroupEff_t;  CXpdGroupGlobal_t;  CXpdManagerCron_t;  CXpdMsg;  CXpdObject;  CXpdObjectQ;  CXpdSrvMgrCreateCnt;  CXpdSrvMgrCreateGuard;  CXrdClientAbsUnsolMsgHandler;  CXrdClientCacheInterval;  ►CXrdClientConn;  CSessionIDInfo;  ►CXrdClientConnectionMgr;  CCndVarInfo;  CXrdClientEnv;  CXrdClientID;  CXrdClientInputBuffer;  CXrdClientLogConnection;  CXrdClientMessage;  CXrdClientPhyConnection;  CXrdClientPhyConnLocker;  CXrdClientReadCache;  CXrdClientReadCacheItem;  CXrdClie",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4165,Modifiability,config,configuration,4165,"BarlowCache;  CSample;  CShapeFactor;  CShapeSys;  CStatError;  CStatErrorConfig;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4491,Modifiability,config,configuration,4491,"mputation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7181,Modifiability,config,configuration,7181,"ovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8303,Modifiability,config,configuration,8303,"ymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction t",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:13670,Modifiability,config,configure,13670,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:13901,Modifiability,extend,extend,13901,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:14028,Modifiability,variab,variable,14028,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17436,Modifiability,config,configuration,17436,"s ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal; ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24127,Modifiability,adapt,adaptive,24127,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:30766,Modifiability,adapt,adapting,30766," CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31679,Modifiability,adapt,adapting,31679,"lgorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivat",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:32116,Modifiability,adapt,adapting,32116,"rpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL Mul",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:33054,Modifiability,adapt,adapting,33054,"ization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEn",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:38279,Modifiability,config,configuration,38279,"ons It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradie",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41210,Modifiability,plug-in,plug-in,41210,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41494,Modifiability,variab,variables,41494,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41534,Modifiability,variab,variables,41534,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41718,Modifiability,variab,variables,41718,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41791,Modifiability,variab,variable,41791,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41871,Modifiability,variab,variable,41871,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:48867,Modifiability,variab,variables,48867,"onTraits< LorentzRotation >;  CRotationTraits< Quaternion >;  CRotationTraits< Rotation3D >;  CRotationTraits< RotationX >;  CRotationTraits< RotationY >;  CRotationTraits< RotationZ >;  CRotationXRotation class representing a 3D rotation about the X axis by the angle of rotation ;  CRotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation ;  CRotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the new Y' axis, followed by a third rotation of an angle psi (roll) about the final X'' axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a m",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:49234,Modifiability,variab,variables,49234,"f rotation ;  CRotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the new Y' axis, followed by a third rotation of an angle psi (roll) about the final X'' axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPoli",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:49333,Modifiability,variab,variables,49333,"rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the new Y' axis, followed by a third rotation of an angle psi (roll) about the final X'' axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineWrapper class for std::random generator to be included in ROOT ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary opera",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53057,Modifiability,variab,variables,53057,"ped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm This wrapper class does not own the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicP",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55137,Modifiability,adapt,adapting,55137," >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates th",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55329,Modifiability,adapt,adapting,55329,"GradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the fig",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:55903,Modifiability,adapt,adapting,55903,"ed minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:57409,Modifiability,inherit,inherit,57409,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:64071,Modifiability,evolve,evolve,64071,"ss;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:67591,Modifiability,layers,layers,67591,apsulates one mini-batch ;  CClassificationSettingsSettings for classificationused to distinguish between different function signatures ;  CLayerLayer defines the layout of a layer ;  CLayerDataLayerData holds the data of one layer ;  CMeanVariance;  CNetNeural net ;  CSettingsSettings for the training of the neural net ;  CSteepestSteepest Gradient Descent algorithm (SGD) ;  CTBatchTBatch ;  CTBatchIteratorTBatchIterator ;  CTCpuThe TCpu architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestructor;  CTCpuMatrixThe TCpuMatrix class ;  CTCudaThe TCuda architecture class ;  ►CTCudaDeviceBufferTCudaDeviceBuffer ;  CTDestructor;  CTCudaDeviceReferenceTCudaDeviceReference ;  ►CTCudaHostBufferTCudaHostBuffer ;  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunction;  CAbsoluteDeviationLossFunctionBDT;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTree;  CBinarySearchTreeNode;  CBinaryTree;  CCCPruner;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactory;  CClassInfo;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfig;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTest;  CCostComplexityPruneTool;  CCrossEntropy;  CCrossValidation;  CCrossValidationResult;  CDataInputHandler;  CDataLoader;  CDataSet;  ►CDataSetFactory;  CEventStats;  CDataSetInfo;  CDataSetManager;  CDecisionTree;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneTool;  CFactory;  CFitterBase;  CGeneticAlgorithm;  CGeneticFitter;  CGeneticGenes;  CGeneticPopulation;  CGeneticRange;  CGiniIndex;  CGiniIndexWithLaplace;  CHuberLossFunction;  CHuberLossFunctionBDT;  CHyperParameterOptimisation;  CHyperPa,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72342,Modifiability,adapt,adapter,72342,"nsform;  CVariableRearrangeTransform;  CVariableTransformBase;  CVarTransformHandler;  CVolume;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions a",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:72510,Modifiability,adapt,adapter,72510,"f the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:73345,Modifiability,adapt,adapter,73345," needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;  ►CPiecewiseInterpolation;  CCacheElem;  CPoint_t;  CProcInfo_t;  CProofServEnv_t;  Cpthread_cond_t;  CPybins_tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyje",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:76962,Modifiability,variab,variable,76962," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80244,Modifiability,adapt,adaptive,80244,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:81871,Modifiability,adapt,adaptive,81871,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:82217,Modifiability,variab,variable,82217,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:85985,Modifiability,config,configurable,85985,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:88878,Modifiability,parameteriz,parameterized,88878,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:89488,Modifiability,extend,extended,89488,"eElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:89556,Modifiability,extend,extended,89556,"eElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:90492,Modifiability,adapt,adaptor,90492," input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClass RooFoamGenerator is a generic toy monte carlo generator that implement the TFOAM sampling technique on any positively valued function ;  CRooFormulaRooFormula an implementation of ROOT::v5::TFormula that interfaces it to RooAbsArg value objects ;  CRooFormulaVar;  CRooFracRemainderRooFracRemainder calculates the remainder fraction of a sum of RooAbsReal fraction, i.e (1 - sum_i a_i) ;  CRooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor ;  CRooFunctor1DBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStud",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:91812,Modifiability,adapt,adaptor,91812,"BindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctor1DPdfBinding;  CRooFunctorBindingRooCFunction1Binding is a templated implementation of class RooAbsReal that binds generic C(++) functions to a RooAbsReal argument thus allowing generic C++ functions to be used as RooFit functions ;  CRooFunctorPdfBinding;  CRooGamma;  CRooGaussianPlain Gaussian p.d.f ;  CRooGaussKronrodIntegrator1DRooGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooGaussModelClass RooGaussModel implements a RooResolutionModel that models a Gaussian distribution ;  CRooGenContextClass RooGenContext implement a universal generator context for all RooAbsPdf classes that do not have or need a specialized generator context ;  CRooGenericPdfRooGenericPdf is a concrete implementation of a probability density function, which takes a RooArgList of servers and a C++ expression string defining how its value should be calculated from the given list of servers ;  CRooGenFitStudyRooGenFitStudy is an abstract base class for RooStudyManager modules ;  CRooGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IGenFunction ;  CRooGenProdProjRooGenProdProj is an auxiliary class for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92306,Modifiability,adapt,adaptive,92306,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93233,Modifiability,adapt,adaptive,93233,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:93636,Modifiability,variab,variables,93636,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:94540,Modifiability,variab,variable,94540,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:94955,Modifiability,adapt,adaptive,94955,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:96559,Modifiability,adapt,adaptor,96559,"sociated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different effiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97996,Modifiability,config,configuration,97996,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98207,Modifiability,config,configuration,98207,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98266,Modifiability,config,configuration,98266,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98477,Modifiability,config,configuration,98477,"oAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101731,Modifiability,adapt,adaptor,101731,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101838,Modifiability,variab,variables,101838,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101888,Modifiability,adapt,adaptor,101888,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102306,Modifiability,variab,variables,102306,"andom numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:103888,Modifiability,adapt,adaptive,103888,"nts a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an eff",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:104012,Modifiability,adapt,adaptive,104012,"ementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the compon",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:106312,Modifiability,adapt,adaptor,106312,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:115501,Modifiability,inherit,inheritance,115501,"on of files containg TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and their relations for a list of classes ;  ►CTClingThis class defines an interface to the cling C++ interpreter ;  CCharPtrCmp_t;  CTUniqueString;  CTClingBaseClassInfoEmulation of the CINT BaseClassInfo class ;  CTClingCallbacks;  CTClingCallFuncEmulation of the CINT CallFunc class ;  CTClingClassInfoEmulation of the CINT ClassInfo class ;  CTClingDataMemberInfoEmulation of the CINT DataMemberInfo class ;  CTClingMethodArgInfoEmulation of the CINT MethodInfo class ;  CTClingMethodInfoEmulation of the CINT MethodInfo class ;  CTClingTypedefInfoEmulation of the CINT TypedefInfo class ;  CTClingTypeInfoEmulation of the CINT TypeInfo class ;  ►CTClingValueBridge between cling::Value and ROOT ;  CHasTheSameSizeAsClingValue;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionMemberStreamerClass streamer objec",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:116627,Modifiability,extend,extends,116627," ;  CCharPtrCmp_t;  CTUniqueString;  CTClingBaseClassInfoEmulation of the CINT BaseClassInfo class ;  CTClingCallbacks;  CTClingCallFuncEmulation of the CINT CallFunc class ;  CTClingClassInfoEmulation of the CINT ClassInfo class ;  CTClingDataMemberInfoEmulation of the CINT DataMemberInfo class ;  CTClingMethodArgInfoEmulation of the CINT MethodInfo class ;  CTClingMethodInfoEmulation of the CINT MethodInfo class ;  CTClingTypedefInfoEmulation of the CINT TypedefInfo class ;  CTClingTypeInfoEmulation of the CINT TypeInfo class ;  ►CTClingValueBridge between cling::Value and ROOT ;  CHasTheSameSizeAsClingValue;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionMemberStreamerClass streamer object to implement TMemberStreamer functionality for I/O emulation ;  CTCollectionMethodBrowsableTCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context s",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:117201,Modifiability,extend,extends,117201,"lue and ROOT ;  CHasTheSameSizeAsClingValue;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionMemberStreamerClass streamer object to implement TMemberStreamer functionality for I/O emulation ;  CTCollectionMethodBrowsableTCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context sensitive popup menus ;  CTControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operations ;  CTControlBarButtonThis class defines the control bar buttons ;  CTControlBarImpABC describing GUI independent control bar ;  CTConvertClonesArrayToProxySmall helper to read a TBuffer containing a TClonesArray into any valid collection ;  CTConvertMapToProxy;  CTCreatePrimitivesCreates new primitives ;  CTCrownTo draw a Crown ;  CTCTUBA cut tube with 11 parameters ;  CTCurlyArcImplements curly or wavy arcs used to draw Feynman ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:117697,Modifiability,config,configurable,117697,"n itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context sensitive popup menus ;  CTControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operations ;  CTControlBarButtonThis class defines the control bar buttons ;  CTControlBarImpABC describing GUI independent control bar ;  CTConvertClonesArrayToProxySmall helper to read a TBuffer containing a TClonesArray into any valid collection ;  CTConvertMapToProxy;  CTCreatePrimitivesCreates new primitives ;  CTCrownTo draw a Crown ;  CTCTUBA cut tube with 11 parameters ;  CTCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams ;  CTCurlyArcEditor;  CTCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams ;  CTCurlyLineEditor;  CTCutA specialized string object used for TTree selections ;  CTCutGGraphical cut class ;  CTDatabasePDGParticle database manager class ;  CTDataMemberAll ROOT classes may have RTTI (run time type identification) support added ;  CTDataSet;  CTDataSetIter;  CTDataSetManager;  CTDataSetManagerAliEn;  CTDataSetManagerFile;  CTDataTypeBasic data type descriptor (datatyp",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:121160,Modifiability,config,config,121160," class ;  CTDecompBKThe Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using ;  CTDecompCholCholesky Decomposition class ;  CTDecompLULU Decomposition class ;  CTDecompQRHQR Decomposition class ;  CTDecompSparseSparse Symmetric Decomposition class ;  CTDecompSVDSingle Value Decomposition class ;  CTDialogCanvasA canvas specialized to set attributes ;  CTDiamondDraw a Diamond ;  CTDictAttributeMapThe ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap ;  CTDictionaryThis class defines an abstract interface that must be implemented by all classes that contain dictionary information ;  ►CTDirectoryDescribe directory structure in memory ;  CTContext;  CTDirectoryFileA ROOT file is structured in Directories (like a file system) ;  CTDNDData;  CTDocDirective;  CTDocHtmlDirective;  CTDocLatexDirective;  CTDocMacroDirective;  CTDocMethodWrapper;  CTDocOutput;  CTDocParser;  CTDOMParser;  CTDrawFeedbackUtility class to draw objects in the feedback list during queries ;  CTDSetThis class implements a data set to be used for PROOF processing ;  CTDSetElementManages an element of a TDSet ;  CTDSetProxy;  CTDsKey;  CTEditQueryFrame;  CTEfficiencyClass to handle efficiency histograms ;  CTElementActionT;  CTElementPosActionT;  CTEllipseDraw Ellipses ;  CTELTUA cylinder with an elliptical section ;  CTEmulatedCollectionProxyStreamer around an arbitrary STL like container, which implements basic container functionality ;  CTEmulatedMapProxyStreamer around a map container ;  CTEntryListA List of entry numbers in a TTree or TChain ;  CTEntryListArrayA list of entries and subentries in a TTree or TChain ;  CTEntryListBlockUsed by TEntryList to store the entry numbers ;  CTEntryListFromFileManages entry lists from different files, when they are not loaded in memory at the same time ;  CTEnumImplements the enum type ;  CTEnumConstantImplements the constants of the enum type ;  CTEnvReads config files, by default named .",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:136114,Modifiability,inherit,inheritance,136114,"scription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:137868,Modifiability,variab,variable,137868,>;  CReadValueHelper;  CReadValueHelper< Long64_t >;  CReadValueHelper< LongDouble_t >;  CReadValueHelper< ULong64_t >;  CTFormLeafInfoCastA small helper class to implement casting an object to a different type (equivalent to dynamic_cast) ;  CTFormLeafInfoClonesA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionA small helper class to implement reading a data member on a generic collection object stored in a TTree ;  CTFormLeafInfoCollectionObjectA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionSizeUsed to return the size of a collection ;  CTFormLeafInfoDirectA small helper class to implement reading a data member on an object stored in a TTree ;  CTFormLeafInfoMethodAsmall helper class to implement executing a method of an object stored in a TTree ;  CTFormLeafInfoMultiVarDimA helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimClonesA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimCollectionA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimDirectA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoNumericalA small helper class to implement reading a numerical value inside a collection ;  CTFormLeafInfoPointerA small helper class to implement reading a data member by following a pointer inside a branch of TTree ;  CTFormLeafInfoReferenceA small helper class to implement the following of reference objects stored in a TTree ;  CTFormLeafInfoTTreeA small helper class to implement reading from the containing TTree object itse,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:138030,Modifiability,variab,variable,138030, implement casting an object to a different type (equivalent to dynamic_cast) ;  CTFormLeafInfoClonesA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionA small helper class to implement reading a data member on a generic collection object stored in a TTree ;  CTFormLeafInfoCollectionObjectA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionSizeUsed to return the size of a collection ;  CTFormLeafInfoDirectA small helper class to implement reading a data member on an object stored in a TTree ;  CTFormLeafInfoMethodAsmall helper class to implement executing a method of an object stored in a TTree ;  CTFormLeafInfoMultiVarDimA helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimClonesA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimCollectionA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimDirectA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoNumericalA small helper class to implement reading a numerical value inside a collection ;  CTFormLeafInfoPointerA small helper class to implement reading a data member by following a pointer inside a branch of TTree ;  CTFormLeafInfoReferenceA small helper class to implement the following of reference objects stored in a TTree ;  CTFormLeafInfoTTreeA small helper class to implement reading from the containing TTree object itself ;  CTFormulaThe F O R M U L A class ;  CTFormulaFunctionHelper class for TFormula ;  CTFormulaParamOrderFunctor defining the parameter order ;  CTFormulaVariab,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:138196,Modifiability,variab,variable,138196,nesArray object stored in a TTree ;  CTFormLeafInfoCollectionA small helper class to implement reading a data member on a generic collection object stored in a TTree ;  CTFormLeafInfoCollectionObjectA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionSizeUsed to return the size of a collection ;  CTFormLeafInfoDirectA small helper class to implement reading a data member on an object stored in a TTree ;  CTFormLeafInfoMethodAsmall helper class to implement executing a method of an object stored in a TTree ;  CTFormLeafInfoMultiVarDimA helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimClonesA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimCollectionA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimDirectA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoNumericalA small helper class to implement reading a numerical value inside a collection ;  CTFormLeafInfoPointerA small helper class to implement reading a data member by following a pointer inside a branch of TTree ;  CTFormLeafInfoReferenceA small helper class to implement the following of reference objects stored in a TTree ;  CTFormLeafInfoTTreeA small helper class to implement reading from the containing TTree object itself ;  CTFormulaThe F O R M U L A class ;  CTFormulaFunctionHelper class for TFormula ;  CTFormulaParamOrderFunctor defining the parameter order ;  CTFormulaVariableAnother helper class for TFormula ;  CTFPBlockThis class represents the encapsulation of a block request ;  CTFractionFitterFits MC fractions to data histogram ;  C,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:138358,Modifiability,variab,variable,138358,ree ;  CTFormLeafInfoCollectionObjectA small helper class to implement reading a data member on a TClonesArray object stored in a TTree ;  CTFormLeafInfoCollectionSizeUsed to return the size of a collection ;  CTFormLeafInfoDirectA small helper class to implement reading a data member on an object stored in a TTree ;  CTFormLeafInfoMethodAsmall helper class to implement executing a method of an object stored in a TTree ;  CTFormLeafInfoMultiVarDimA helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimClonesA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimCollectionA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoMultiVarDimDirectA small helper class to implement reading a data member on a variable size array inside a TClonesArray object stored in a TTree ;  CTFormLeafInfoNumericalA small helper class to implement reading a numerical value inside a collection ;  CTFormLeafInfoPointerA small helper class to implement reading a data member by following a pointer inside a branch of TTree ;  CTFormLeafInfoReferenceA small helper class to implement the following of reference objects stored in a TTree ;  CTFormLeafInfoTTreeA small helper class to implement reading from the containing TTree object itself ;  CTFormulaThe F O R M U L A class ;  CTFormulaFunctionHelper class for TFormula ;  CTFormulaParamOrderFunctor defining the parameter order ;  CTFormulaVariableAnother helper class for TFormula ;  CTFPBlockThis class represents the encapsulation of a block request ;  CTFractionFitterFits MC fractions to data histogram ;  CTFrameDefine a Frame ;  CTFrameEditor;  CTFreeService class for TFile ;  CTFriendElementA TFriendElement TF describes a TTree object TF in a file ;  CTFTP;  CTFum,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:148952,Modifiability,variab,variable-sized,148952,"HtmlRef;  CTGHtmlScript;  CTGHtmlSpaceElement;  CTGHtmlTable;  CTGHtmlTextElement;  CTGHtmlUri;  CTGIcon;  CTGIconLBEntry;  CTGIdleHandler;  CTGImageMap;  CTGInputDialog;  CTGInsets;  CTGItemContextEmpty object used as context menu support for TGLVTreeEntries ;  CTGL2DArray;  CTGL5DDataSet;  CTGL5DDataSetEditorGUI editor for OpenGL 5D Painter ;  ►CTGL5DPainterTGL5DPainter implements ""gl5d"" option for TTree::Draw ;  CSurf_t;  CTGLabel;  CTGLAdapterAllow plot-painters to be used for gl-inpad and gl-viewer ;  CTGLAnnotationGL-overlay annotation ;  CTGLAutoRotatorAutomatically rotates GL camera ;  CTGLAxisGL Axis ;  CTGLAxisPainter;  CTGLAxisPainterBoxUtility class to paint axis in GL ;  CTGLayoutHints;  CTGLayoutManager;  CTGLBContainer;  CTGLBEntry;  CTGLBoundingBoxConcrete class describing an orientated (free) or axis aligned box of 8 vertices ;  CTGLBoxCutUsed by plot-painters to determine the area of the plot that is cut away ;  CTGLBoxPainterPaints TH3 histograms by rendering variable-sized boxes matching the bin contents ;  CTGLCameraAbstract base camera class - concrete classes for orthographic and perspective cameras derive from it ;  CTGLCameraGuideDraws arrows showing camera orientation in the overlay ;  CTGLCameraOverlayA GL overlay element which displays camera furstum ;  CTGLCapabilityEnabler;  CTGLCapabilitySwitch;  CTGLClipAbstract clipping shape - derives from TGLPhysicalShape Adds clip mode (inside/outside) and pure virtual method to approximate shape as set of planes ;  CTGLClipBoxConcrete clip box object ;  CTGLClipPlaneConcrete clip plane object ;  CTGLClipSetA collection of concrete TGLClip objects to be selected from ;  CTGLClipSetEditorGUI editor for TGLClipSet ;  CTGLClipSetSubEditorGUI sub-editor for TGLClipSet ;  CTGLColorClass encapsulating color information in preferred GL format - an array of four unsigned bytes ;  CTGLColorSetClass encapsulating a set of colors used throughout standard rendering ;  CTGLContextThis class encapsulates window-",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:152075,Modifiability,variab,variables,152075,"eJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeConcrete physical shape - a GL drawable ;  CTGLPlane3D plane class - of format Ax + By + Cz + D = 0 ;  CTGLPlot3DDescription of TGLPlo",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:152099,Modifiability,variab,variables,152099,"  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeConcrete physical shape - a GL drawable ;  CTGLPlane3D plane class - of format Ax + By + Cz + D = 0 ;  CTGLPlot3DDescription of TGLPlot3D ;  CTGLPlotBoxImplem",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:154408,Modifiability,plugin,plugin,154408,"ot-painters that provide GL rendering of various 2D and 3D histograms, functions and parametric surfaces ;  CTGLPolyLineTo draw a 3D polyline in a GL window ;  CTGLPolyMarkerTo draw a 3D polymarker in a GL window ;  CTGLPShapeObjWrap TGLPysicalShape into TObject so that it can be edited using GED ;  CTGLPShapeObjEditorGUI editor for TGLPShapeObj ;  CTGLPShapeRefBase class for references to TGLPysicalShape that need to be notified when the shape is destroyed ;  CTGLQuadricWrapper class for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStop",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:154830,Modifiability,extend,extended,154830,"e notified when the shape is destroyed ;  CTGLQuadricWrapper class for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:165798,Modifiability,variab,variable,165798,"GIF, JPEG, PNG, XPM, TIFF etc.) ;  CTImagePaletteA class to define a conversion from pixel values to pixel color ;  CTImagePlugin;  CTIndArray;  ►CTIndexTable;  Citerator;  CTInetAddressThis class represents an Internet Protocol (IP) address ;  CTInspectCanvasA TInspectCanvas is a canvas specialized to inspect Root objects ;  CTInspectorImpABC describing GUI independent object inspector (abstraction mainly needed for Win32 ;  CTInstrumentedIsAProxy;  ►CTInterpreterThis class defines an abstract interface to a generic command line interpreter ;  CCallFuncIFacePtr_t;  CSuspendAutoParsing;  CTInterpreterValue;  CTIsAProxyTIsAProxy implementation class ;  CTIter;  CTIteratorIterator abstract base class ;  CTIterCategory;  CTKDEKernel Density Estimation class ;  CTKDEFGT;  CTKDTreeClass implementing a kd-tree ;  CTKDTreeBinning<- TKDTreeBinning - A class providing multidimensional binning -> ;  CTKeyBook space in a file, create I/O buffers, to fill them, (un)compress them ;  CTKeyMapFileUtility class for browsing TMapFile objects ;  CTKeySQLTKeySQL represents metainforamtion about object, which was written to SQL database ;  CTKeyXML;  ►CTKSocket;  CDesc_t;  ►CTLatexTo draw Mathematical Formula ;  CFormSize_tTLatex helper struct holding the dimensions of a piece of text ;  CTextSpec_tTLatex helper struct holding the attributes of a piece of text ;  CTLatexFormSizeTLatex helper class used to compute the size of a portion of a formula ;  CTLDAPAttribute;  CTLDAPEntry;  CTLDAPResult;  CTLDAPServer;  ►CTLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree ;  CGetValueHelper;  CGetValueHelper< Long64_t >;  CGetValueHelper< LongDouble_t >;  CGetValueHelper< ULong64_t >;  CTLeafBA TLeaf for an 8 bit Integer data type ;  CTLeafCA TLeaf for a variable length string ;  CTLeafDA TLeaf for a 64 bit floating point data type ;  CTLeafElementA TLeaf for the general case when using the branches created via a TStreamerInfo (i.e ;  CTLeafFA TLeaf for a 32 b",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:171903,Modifiability,variab,variables,171903,"onaLisaWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescriptio",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:171976,Modifiability,variab,variables,171976,"tions' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class generates packets to be processed on PROOF wor",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:175547,Modifiability,plugin,plugin,175547,"s used internally by TDatabasePDG ;  CTParticlePDGDescription of the static properties of a particle ;  CTPaveA TBox with a bordersize and a shadow option ;  CTPaveClassA TPaveLabel specialized to process classes inside a TClassTree ;  CTPaveLabelA Pave (see TPave) with a text centered in the Pave ;  CTPaveStatsThe histogram statistics painter class ;  CTPaveStatsEditor;  CTPavesTextA PaveText (see TPaveText) with several stacked paves ;  CTPaveTextA Pave (see TPave) with text, lines or/and boxes inside ;  CTPBHandleDSType;  CTPBHistType;  CTPBReadType;  CTPCONA polycone ;  CTPDFInterface to PDF ;  CTPerfEvent;  CTPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTPGONA polygon ;  CTPgSQLResult;  CTPgSQLRow;  CTPgSQLServer;  CTPgSQLStatement;  CTPickerStackGuard;  CTPieDraw a Pie Chart, ;  CTPieEditor;  CTPieSliceA slice of a piechart, see the TPie class ;  CTPieSliceEditor;  CTPluginHandler;  CTPluginManagerThis class implements a plugin library manager ;  CTPMERegexpWrapper for PCRE library (Perl Compatible Regular Expressions) ;  CTPoint;  CTPoints2-D graphics point (world coordinates) ;  CTPoints3D;  CTPoints3DABCAbstract class to define Arrays of 3D points ;  CTPointsArray3D;  CTPointSet3DTPolyMarker3D using TPointSet3DGL for direct OpenGL rendering ;  CTPointSet3DGLDirect OpenGL renderer for TPointSet3D ;  CTPolyLineDefined by an array on N points in a 2-D space ;  CTPolyLine3DA 3-dimensional polyline ;  CTPolyLineShape;  CTPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space ;  CTPolyMarker3DA 3D polymarker ;  CTPoolPlayer;  CTPoolProcessor;  CTPoolWorkerThis class works together with TProcessExecutor to allow the execution of functions in server processes ;  CTPoolWorker< F, T, void >;  CTPoolWorker< F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dyna",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179240,Modifiability,variab,variables,179240,"thGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersisten",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179789,Modifiability,adapt,adapted,179789," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179928,Modifiability,config,config,179928," client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  CTPSocket;  CTPwdCtx;  CTPyArg;  CTPyClassGenerator;  CTPyDispatcher;  CTPyMultiGenFunction;  CTPyMultiGradFunction;  CTPyReturn;  CTPySelector;  ►CTPythia6TPythia is an interface class to F77 version of Pythia 6.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:187946,Modifiability,variab,variable,187946,"hogonal transform functions ;  CTSPHEA Sphere ;  CTSpiderSpider class ;  CTSpiderEditorThe TSpider editor class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTS",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:190331,Modifiability,variab,variables,190331,"ating System ;  CTSystemDirectoryDescribes an Operating System directory for the browser ;  CTSystemFileA TSystemFile describes an operating system file ;  CTTabCom;  ►CTTable;  Citerator;  Cpiterator;  CTTable3Points;  CTTableDescriptor;  CTTableIter;  CTTableMap;  CTTablePadView3D;  CTTablePoints;  CTTableRange;  CTTableSorter;  CTTaskTTask is a base class that can be used to build a complex tree of Tasks ;  CTTeXDumpInterface to TeX ;  CTTextBase class for several text objects ;  CTTextEditor;  ►CTTFInterface to the freetype 2 library ;  CTTGlyphTTF helper class containing glyphs description ;  CTThread;  CTThreadCleaner;  CTThreadFactory;  CTThreadImp;  CTThreadPool;  CTThreadPoolTask;  CTThreadPoolTaskImp;  CTThreadTimer;  CTTimeBasic time type with millisecond precision ;  CTTimerHandles synchronous and a-synchronous timer events ;  CTTimeStampThe TTimeStamp encapsulates seconds and ns since EPOCH ;  CTToggleThis class defines toggling facility for both - object's method or variables ;  CTToggleGroupThis class defines check-box facility for TToggle objects It is used in context menu ""selectors"" for picking up a value ;  CTTRAPA general trapezoid ;  CTTRD1A trapezoid with the x dimension varying along z ;  CTTRD2A trapezoid with both x and y dimensions varying along z ;  ►CTTreeA TTree object has a header with a name and a title ;  CTClusterIteratorHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195539,Modifiability,extend,extend,195539,"ionCheck;  CTViewSee TView3D ;  CTView3DThe 3D view class ;  CTViewer3DPadProvides 3D viewer interface (TVirtualViewer3D) support on a pad ;  CTViewPubDataMembersView implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecay",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197790,Modifiability,plugin,plugins,197790,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4823,Performance,perform,performed,4823,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5133,Performance,perform,performing,5133,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5699,Performance,perform,performed,5699,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7420,Performance,perform,performs,7420,"timating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal funct",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17279,Performance,perform,performing,17279,"subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish g",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17889,Performance,perform,performing,17889,"fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  ►CParsingStateRAIIRAII used to store Parser, Sema, Preprocessor state for recursive parsing ;  CSemaParsingInitForAutoVarsRAII;  CRStl;  CTArrayCharProxy;  CTArrayProxy;  CTArrayType;  CTArrayType< T, 0 >;  CTAtomicPointerHelper class to manage",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:26487,Performance,perform,performing,26487,"al function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function minimization ;  CBrentRootFinderClass for finding the root of a one dimensional function using the Brent algorithm ;  CCartesian2DClass describing a 2D cartesian coordinate system (x, y coordinates) ;  CCartesian3DClass describing a 3D cartesian coordinate system (x, y, z coordinates) ;  CChebyshevApproxClass describing a Chebyshev series which can be used to approximate a function in a defined range [a,b] using Chebyshev polynomials ;  CChebyshevPol;  CCholeskyDecompClass to compute the Cholesky decomposition of a matrix ;  CCholeskyDecompGenDimClass to compute the Cholesky decomposition of a matrix ;  CCholInverter;  CCompileTimeChecker;  CCompileTimeChecker< false >;  CConstantConstant expression class A class representing constant expressions (literals) in the parse tree ;  CCoordinateTraits;  CCoordinateTraits< Cartesian3D< Scalar > >;  CCoordinateTraits< Cylindrical3D< Scalar > >;  CCoordinateTraits< CylindricalEta3D< Scalar > >;  CCoordinateTraits< Polar3D< Scalar ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29802,Performance,perform,performing,29802,& >;  CExpr;  CFabsUnary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C functi,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:29876,Performance,perform,performing,29876,ing static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_fun,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:31033,Performance,perform,performing,31033,"rs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:36262,Performance,perform,performing,36262,(It throws away 202 values for every 12 used) see here ;  CGSLRngRanLuxS2Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanMarRANMAR generator see here ;  CGSLRngROOTWrapper;  CGSLRngTausTausworthe generator by L'Ecuyer see here ;  CGSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure ;  CGSLRootFdFSolverRoot-Finder with derivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one ,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37661,Performance,perform,performing,37661," the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37813,Performance,perform,performing,37813,"CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for param",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:37976,Performance,perform,performing,37976,"t class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the param",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:41461,Performance,perform,perform,41461,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:42060,Performance,perform,performing,42060,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:44781,Performance,perform,performing,44781,"n a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:45180,Performance,perform,performing,45180,"n a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:63403,Performance,perform,performing,63403,"ll as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75569,Performance,cache,cache,75569,"tPythia6 common block Pybins ;  CPydat1_tPythia6 common block Pydat1 ;  CPydat2_tPythia6 common block Pydat2 ;  CPydat3_tPythia6 common block Pydat3 ;  CPydat4_tPythia6 common block Pydat4 ;  CPydatr_tPythia6 common block Pydatr ;  CPyint1_tPythia6 common block Pyint1 ;  CPyint2_tPythia6 common block Pyint2 ;  CPyint3_tPythia6 common block Pyint3 ;  CPyint4_tPythia6 common block Pyint4 ;  CPyint5_tPythia6 common block Pyint5 ;  CPyint6_tPythia6 common block Pyint6 ;  CPyint7_tPythia6 common block Pyint7 ;  CPyint8_tPythia6 common block Pyint8 ;  CPyint9_tPythia6 common block Pyint9 ;  CPyints_tPythia6 common block Pyints ;  CPyjets_tPythia6 common block Pyjets ;  CPymssm_tPythia6 common block Pymssm ;  CPypars_tPythia6 common block Pypars ;  CPyssmt_tPythia6 common block Pyssmt ;  CPysubs_tPythia6 common block Pysubs ;  CQuad;  CQuartzImage;  CQuartzPixmap;  CQuartzView;  CQuartzWindow;  CRectangle_t;  CRedirectHandle_t;  Credirguard;  Crng_state_st;  CRoo1DMomentMorphFunction1-dimensional morph function between a list of input functions (varlist) as a function of one input parameter (m) ;  CRoo1DTableRoo1DTable implements a one-dimensional table ;  CRoo2DKeysPdfTwo-dimensional kernel estimation PDF ;  ►CRoo2DMomentMorphFunction2-dimensional morph function between a list of function-numbers as a function of two input parameters (m1 and m2) ;  CSorterL2H;  ►CRooAbsAnaConvPdf;  CCacheElemIterator over _convNormSet ;  CRooAbsArgRooAbsArg is the common abstract base class for objects that represent a value (of arbitrary type) and ""shape"" that in general depends on (is a client of) other RooAbsArg subclasses ;  CRooAbsBinningRooAbsBinning is the abstract base class for RooRealVar binning definitions This class defines the interface to retrieve bin boundaries, ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75711,Performance,cache,cache,75711," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:75972,Performance,cache,cache,75972," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:76185,Performance,cache,cache,76185," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:76975,Performance,perform,performing,76975," ranges etc ;  CRooAbsCacheRooAbsCache is the abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions ;  ►CRooAbsCachedPdfRooAbsCachedPdf is the abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables ;  CAnaIntConfigRegistry for analytical integration codes ;  CPdfCacheElem;  ►CRooAbsCachedRealRooAbsCachedReal is the abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables ;  CFuncCacheElem;  CRooAbsCacheElementRooAbsCacheElement is the abstract base class for objects to be stored in RooAbsCache cache manager objects ;  CRooAbsCategoryRooAbsCategory is the common abstract base class for objects that represent a discrete value with a finite number of states ;  CRooAbsCategoryLValueRooAbsCategoryLValue is the common abstract base class for objects that represent a discrete value that may appear on the left hand side of an equation ('lvalue') ;  CRooAbsCollectionRooAbsCollection is an abstract container object that can hold multiple RooAbsArg objects ;  ►CRooAbsDataRooAbsData is the common abstract base class for binned and unbinned datasets ;  CPlotOpt;  CRooAbsDataStoreRooAbsDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooAbsFuncAbstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it ;  CRooAbsGenContextRooAbsGenContext is the abstract base class for generator contexts of RooAbsPdf objects ;  CRooAbsHiddenRealRooAbsHiddenReal is a base class for objects that want to hide their return value from interactive use, e.g ;  CRooAbsIntegratorRooAbsIntegrator is the abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface ;  CRooAbsLValueAbstract base class for objects that are lvalues, i.e ;  CR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:77564,Performance,perform,perform,77564,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:79347,Performance,cache,cached,79347," ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficie",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:79530,Performance,cache,cached,79530,"ct base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80652,Performance,cache,cache,80652,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:80820,Performance,cache,cache,80820,"e left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICRegistryRooAICRegistry is a utility class for operator p.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:82888,Performance,cache,cache,82888,"tive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooBlindTools;  CRooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing ;  CRooBreitWignerClass RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape ;  CRooBrentRootFinderImplement the abstract 1-dimensional root finding interface using the Brent-Decker method ;  CRooBukinPdfRooBukinPdf implements the NovosibirskA function ;  CRooCachedPdfRooCachedPdf is an implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor ;  CRooCachedRealRooCachedReal is an implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor ;  CRooCacheManagerTemplate class RooCacheManager manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables ;  CRooCategoryRooCategory represents a fundamental (non-derived) discrete value object ;  CRooCategoryProxyRooCategoryProxy is the proxy implementation for RooAbsCategory objects A RooCategoryProxy is the general mechanism to store references to RooAbsCategoriess inside a RooAbsArg ;  CRooCategorySharedPropertiesRooCategorySharedProperties is the container for all properties that are shared between instance of RooCategory objects that are clones of each other ;  CRooCatTypeRooCatType is an auxilary class for RooAbsCategory and defines a a single category state ;  CRooCBShapeP.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:83041,Performance,cache,cache,83041,"tive one-dimensional numerical integration algorithm ;  CRooBinnedGenContextRooBinnedGenContext is an efficient implementation of the generator context specific for binned pdfs ;  CRooBinningClass RooBinning is an implements RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes ;  CRooBinningCategoryClass RooBinningCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooBlindTools;  CRooBMixDecayClass RooBMixDecay is a RooAbsAnaConvPdf implementation that describes the decay of B mesons with the effects of B0/B0bar mixing ;  CRooBreitWignerClass RooBreitWigner is a RooAbsPdf implementation that models a non-relativistic Breit-Wigner shape ;  CRooBrentRootFinderImplement the abstract 1-dimensional root finding interface using the Brent-Decker method ;  CRooBukinPdfRooBukinPdf implements the NovosibirskA function ;  CRooCachedPdfRooCachedPdf is an implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor ;  CRooCachedRealRooCachedReal is an implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor ;  CRooCacheManagerTemplate class RooCacheManager manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables ;  CRooCategoryRooCategory represents a fundamental (non-derived) discrete value object ;  CRooCategoryProxyRooCategoryProxy is the proxy implementation for RooAbsCategory objects A RooCategoryProxy is the general mechanism to store references to RooAbsCategoriess inside a RooAbsArg ;  CRooCategorySharedPropertiesRooCategorySharedProperties is the container for all properties that are shared between instance of RooCategory objects that are clones of each other ;  CRooCatTypeRooCatType is an auxilary class for RooAbsCategory and defines a a single category state ;  CRooCBShapeP.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97378,Performance,cache,cache,97378,"ory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.d.f ;  CAnaIntData;  CBitBlock;  CGenData;  CRooNameRegRooNameReg is a registry for 'const char*' name ;  CRooNameSetRooNameSet is a utility class that stores the names the objects in a RooArget ;  ►CRooNDKeysPdfGeneric N-dimensional implementation of a kernel estimation p.d.f ;  CBoxInfo;  CSorterTV_L2HSorter function ;  CRooNLLVarClass RooNLLVar implements a a -log(likelihood) calculation from a dataset and a PDF ;  CRooNonCentralChiSquareThe PDF of the Non-Central Chi Square distribution for n degrees of freedom ;  CRooNonCPEigenDecayTime-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFact",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:98966,Performance,cache,cache,98966,"y to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  ►CRooNumRunningIntClass RooNumRunningInt is an implementation of RooAbsCachedReal that represents a running integral ; \[ RI(f(x)) = \int_{xlow}^{x} f(x') dx' \]. that is calculated internally with a numeric technique: The input function is first sampled into a histogram, which is then numerically integrated ;  CRICacheElem;  CRooObjCacheManagerClass RooObjCacheManager is an implementation of class RooCacheManager<RooAbsCacheElement> and specializes in the storage of cache elements that contain RooAbsArg objects ;  CRooParamBinningClass RooParamBinning is an implementation of RooAbsBinning that constructs a binning with a range definition that depends on external RooAbsReal objects ;  CRooParametricStepFunction;  CRooParamHistFunc;  ►CRooPlotA RooPlot is a plot frame and a container for graphics objects within that frame ;  CDrawOpt;  CRooPlotableClass RooPotable is a base class for objects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedome less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that d",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102151,Performance,perform,performs,102151,"g the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooR",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102230,Performance,perform,performs,102230,"M Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fract",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108367,Performance,perform,performed,108367,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108524,Performance,perform,performed,108524,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:112811,Performance,queue,queues,112811,"fied labels ;  CTBackCompFitterBackward compatible implementation of TVirtualFitter ;  CTBase64This code implements the Base64 encoding and decoding ;  CTBaseClassEach class (see TClass) has a linked list of its base class(es) ;  CTBasketManages buffers for branches of a Tree ;  CTBasketSQLImplement TBasket for a SQL backend ;  CTBenchmarkThis class is a ROOT utility to help benchmarking applications ;  CTBinomialEfficiencyFitterBinomial fitter for the division of two histograms ;  ►CTBitsContainer of bits ;  CTReference;  CTBonjourBrowser;  CTBonjourRecord;  CTBonjourRegistrar;  CTBonjourResolver;  CTBoxCreate a Box ;  CTBranchA TTree is a list of TBranches ;  CTBranchClonesA Branch for the case of an array of clone objects ;  CTBranchElementA Branch for the case of an object ;  CTBranchObjectA Branch for the case of an object ;  CTBranchRefA branch containing and managing a TRefTable for TRef autoloading ;  ►CTBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode ;  CElementBranchHelper_t;  CTBRIKA box with faces perpendicular to the axes ;  CTBrowserUsing a TBrowser one can browse all ROOT objects ;  CTBrowserImpABC describing GUI independent browser implementation protocol ;  CTBrowserPlugin;  CTBtInnerNodeInner node of a TBtree ;  CTBtItemItem stored in inner nodes of a TBtree ;  CTBtLeafNodeLeaf node of a TBtree ;  CTBtNodeAbstract base class (ABC) of a TBtree node ;  CTBtreeB-tree class ;  CTBtreeIterIterator of btree ;  CTBufferBuffer base class used for serializing objects ;  CTBuffer3DGeneric 3D primitive description class ;  CTBuffer3DCutTubeCut tube segment description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres ;  CTBuffer3DTubeComplete tube description class - see TBuffer3DTypes for producer classes ;  CTBuffer3DTubeSegTube segment description class - see T",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:121019,Performance,load,loaded,121019," class ;  CTDecompBKThe Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using ;  CTDecompCholCholesky Decomposition class ;  CTDecompLULU Decomposition class ;  CTDecompQRHQR Decomposition class ;  CTDecompSparseSparse Symmetric Decomposition class ;  CTDecompSVDSingle Value Decomposition class ;  CTDialogCanvasA canvas specialized to set attributes ;  CTDiamondDraw a Diamond ;  CTDictAttributeMapThe ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap ;  CTDictionaryThis class defines an abstract interface that must be implemented by all classes that contain dictionary information ;  ►CTDirectoryDescribe directory structure in memory ;  CTContext;  CTDirectoryFileA ROOT file is structured in Directories (like a file system) ;  CTDNDData;  CTDocDirective;  CTDocHtmlDirective;  CTDocLatexDirective;  CTDocMacroDirective;  CTDocMethodWrapper;  CTDocOutput;  CTDocParser;  CTDOMParser;  CTDrawFeedbackUtility class to draw objects in the feedback list during queries ;  CTDSetThis class implements a data set to be used for PROOF processing ;  CTDSetElementManages an element of a TDSet ;  CTDSetProxy;  CTDsKey;  CTEditQueryFrame;  CTEfficiencyClass to handle efficiency histograms ;  CTElementActionT;  CTElementPosActionT;  CTEllipseDraw Ellipses ;  CTELTUA cylinder with an elliptical section ;  CTEmulatedCollectionProxyStreamer around an arbitrary STL like container, which implements basic container functionality ;  CTEmulatedMapProxyStreamer around a map container ;  CTEntryListA List of entry numbers in a TTree or TChain ;  CTEntryListArrayA list of entries and subentries in a TTree or TChain ;  CTEntryListBlockUsed by TEntryList to store the entry numbers ;  CTEntryListFromFileManages entry lists from different files, when they are not loaded in memory at the same time ;  CTEnumImplements the enum type ;  CTEnumConstantImplements the constants of the enum type ;  CTEnvReads config files, by default named .",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:135248,Performance,cache,cache,135248," eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics iden",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:135311,Performance,cache,cache,135311,"scription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:141995,Performance,cache,cache,141995,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:173075,Performance,load,load-balancing,173075,"XNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class generates packets to be processed on PROOF worker servers ;  CTPacketizerAdaptiveThis packetizer is based on TPacketizer but uses different load-balancing algorithms and data structures ;  CTPacketizerFileThis packetizer generates packets which contain a single file path to be used in process ;  CTPacketizerMultiThis class allows to do multiple runs in the same query; each run can be a, for example, different dataset or the same dataset with entry list ;  CTPacketizerUnitThis packetizer generates packets of generic units, representing the number of times an operation cycle has to be repeated by the worker node, e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:175227,Performance,perform,performance,175227,"tA TParallelCoordSelect is a specialised TList to hold TParallelCoordRanges used by TParallelCoord ;  CTParallelCoordVarTParallelCoord axes ;  CTParallelMergingFile;  CTParameterNamed parameter, streamable and storable ;  CTParticleDescription of the dynamic properties of a particle ;  CTParticleClassPDGUtility class used internally by TDatabasePDG ;  CTParticlePDGDescription of the static properties of a particle ;  CTPaveA TBox with a bordersize and a shadow option ;  CTPaveClassA TPaveLabel specialized to process classes inside a TClassTree ;  CTPaveLabelA Pave (see TPave) with a text centered in the Pave ;  CTPaveStatsThe histogram statistics painter class ;  CTPaveStatsEditor;  CTPavesTextA PaveText (see TPaveText) with several stacked paves ;  CTPaveTextA Pave (see TPave) with text, lines or/and boxes inside ;  CTPBHandleDSType;  CTPBHistType;  CTPBReadType;  CTPCONA polycone ;  CTPDFInterface to PDF ;  CTPerfEvent;  CTPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTPGONA polygon ;  CTPgSQLResult;  CTPgSQLRow;  CTPgSQLServer;  CTPgSQLStatement;  CTPickerStackGuard;  CTPieDraw a Pie Chart, ;  CTPieEditor;  CTPieSliceA slice of a piechart, see the TPie class ;  CTPieSliceEditor;  CTPluginHandler;  CTPluginManagerThis class implements a plugin library manager ;  CTPMERegexpWrapper for PCRE library (Perl Compatible Regular Expressions) ;  CTPoint;  CTPoints2-D graphics point (world coordinates) ;  CTPoints3D;  CTPoints3DABCAbstract class to define Arrays of 3D points ;  CTPointsArray3D;  CTPointSet3DTPolyMarker3D using TPointSet3DGL for direct OpenGL rendering ;  CTPointSet3DGLDirect OpenGL renderer for TPointSet3D ;  CTPolyLineDefined by an array on N points in a 2-D space ;  CTPolyLine3DA 3-dimensional polyline ;  CTPolyLineShape;  CTPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space ;  CTPolyMarker3DA 3D polymarker ;  CTPoolPlayer;  CTPoolProcessor;  CTPoolWorkerThis class works togethe",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:179300,Performance,perform,performance,179300,"andler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayerLocal;  CTProofPlayerRemote;  CTProofPlayerSlave;  CTProofPlayerSuperMaster;  CTProofProgressDialog;  CTProofProgressInfo;  CTProofProgressLog;  CTProofProgressMemoryPlot;  CTProofProgressStatusContainer class for processing statistics ;  CTProofQueryResultTQueryResult version adapted to PROOF neeeds ;  CTProofResources;  CTProofResourcesStaticThe purpose of this class is to provide a standard interface to static config files ;  CTProofServClass providing the PROOF server ;  CTProofServLiteVersion of the PROOF worker server for local running ;  CTProofServLogHandler;  CTProofServLogHandlerGuard;  CTProofSuperMasterImplementation of TProof controlling PROOF federated clusters ;  CTProofVectorContainer;  ►CTProtoClassPersistent version of a TClass ;  CTProtoRealData;  CTPServerSocket;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185625,Performance,cache,cache,185625," rotation matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191518,Performance,perform,performance,191518,"id with the x dimension varying along z ;  CTTRD2A trapezoid with both x and y dimensions varying along z ;  ►CTTreeA TTree object has a header with a name and a title ;  CTClusterIteratorHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerTh",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197025,Performance,load,load,197025,"painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native gr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:197397,Performance,perform,performance,197397,"r user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DAbstract 3D shapes viewer ;  CTVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17250,Safety,avoid,avoids,17250,"togram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:17327,Safety,safe,safe,17327,"  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:24542,Safety,avoid,avoid,24542,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:45266,Safety,avoid,avoid,45266,"n a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  CParamFunctorParam Functor class for Multidimensional functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F * >;  CFuncEvaluator< F *const >;  CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:53674,Safety,avoid,avoid,53674,"nction pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Err",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:56437,Safety,predict,predicted,56437,"mplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:125216,Safety,safe,safe,125216,"torEditor for TEveElement class ;  CTEveElementListA list of TEveElements ;  CTEveElementListProjectedA projected element list – required for proper propagation of render state to projected views ;  CTEveElementObjectPtrTEveElement with external TObject as a holder of visualization data ;  CTEveEventManagerBase class for event management and navigation ;  CTEveExceptionException class thrown by TEve classes and macros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of obj",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:128284,Safety,safe,safe,128284,"veListTreeItemSpecial list-tree-item for Eve ;  CTEveMacroSub-class of TMacro, overriding Exec to unload the previous version and cleanup after the execution ;  CTEveMagFieldAbstract base-class for interfacing to magnetic field needed by the TEveTrackPropagator ;  CTEveMagFieldConstImplements constant magnetic field, given by a vector fB ;  CTEveMagFieldDuoImplements constant magnetic filed that switches on given axial radius fR2 from vector fBIn to fBOut ;  ►CTEveManagerCentral application manager for Eve ;  CTExceptionHandlerException handler for Eve exceptions ;  CTRedrawDisabler;  CTEveMCRecCrossRef;  CTEveMCTrack;  CTEventIterSpecial iterator class used in TProofPlayer to iterate over events or objects in the packets ;  CTEventIterObj;  ►CTEventIterTree;  CTFileTree;  CTEventIterUnit;  CTEventListA TEventList object is a list of selected events (entries) in a TTree ;  CTEvePadThis was intended as a TPad wrapper to allow smart updates of groups of pads ;  CTEvePadHolderException safe wrapper for setting gPad ;  ►CTEveParamListCollection of named parameters ;  CBoolConfig_t;  CFloatConfig_t;  CIntConfig_t;  CTEveParamListEditorGUI editor for TEveParamList ;  CTEvePathMarkTSpecial-point on track: ;  CTEvePlot3DDescription of TEvePlot3D ;  CTEvePlot3DGLOpenGL renderer class for TEvePlot3D ;  CTEvePointSelectorTEvePointSelector is a sub-class of TSelectorDraw for direct extraction of point-like data from a Tree ;  CTEvePointSelectorConsumerTEvePointSelectorConsumer is a virtual base for classes that can be filled from TTree data via the TEvePointSelector class ;  CTEvePointSetTEvePointSet is a render-element holding a collection of 3D points with optional per-point TRef and an arbitrary number of integer ids (to be used for signal, volume-id, track-id, etc) ;  CTEvePointSetArrayAn array of point-sets with each point-set playing a role of a bin in a histogram ;  CTEvePointSetArrayEditorEditor for TEvePointSetArray class ;  CTEvePointSetProjectedProjected copy of a TEv",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160368,Safety,safe,safe,160368," CTGTextEditor;  CTGTextEntry;  CTGTextLayout;  CTGTextLBEntry;  CTGTextLine;  CTGTextView;  CTGTextViewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:160462,Safety,safe,safe,160462,"TGTextViewostream;  CTGTextViewStreamBuf;  CTGTileLayout;  CTGToolBar;  CTGToolTip;  CTGTRAA general twisted trapezoid ;  CTGTransientFrame;  CTGTreeLBEntry;  CTGTreeTableTGTreeTable is a TGTable that owns it's own interface ;  CTGTripleHSlider;  CTGTripleVSlider;  CTGuiBldAction;  CTGuiBldDragManager;  CTGuiBldEditor;  CTGuiBldGeometryFrame;  CTGuiBldHintsButton;  CTGuiBldHintsEditor;  CTGuiBldNameFrame;  CTGuiBuilder;  CTGuiFactoryThis ABC is a factory for GUI components ;  CTGUndockedFrame;  CTGUnknownWindowHandler;  CTGVButtonGroup;  CTGVertical3DLine;  CTGVerticalFrame;  CTGVerticalLayout;  CTGVFileSplitter;  CTGView;  CTGViewFrame;  CTGViewPort;  CTGVProgressBar;  CTGVScrollBar;  CTGVSlider;  CTGVSplitter;  CTGWidget;  CTGWin32This class is the basic interface to the Win32 graphics system ;  CTGWin32GLManager;  CTGWin32GLManagerProxy;  CTGWin32InterpreterProxyThis class defines thread-safe interface to a command line interpreter ;  CTGWin32ProxyBaseProxy classes provide thread-safe interface to global objects ;  CTGWin32VirtualXProxy;  CTGWindow;  CTGX11This class is the basic interface to the X11 (Xlib) graphics system ;  CTGX11TTFInterface to low level X11 (Xlib) ;  CTGXYLayout;  CTGXYLayoutHints;  CTH1The TH1 histogram class ;  CTH1CTomato 1-D histogram with a byte per channel (see TH1 documentation) ;  CTH1DTomato 1-D histogram with a double per channel (see TH1 documentation)} ;  CTH1Editor;  CTH1FTomato 1-D histogram with a float per channel (see TH1 documentation)} ;  CTH1ITomato 1-D histogram with an int per channel (see TH1 documentation)} ;  CTH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis ;  CTH1Merger;  CTH1STomato 1-D histogram with a short per channel (see TH1 documentation) ;  CTH2Service class for 2-Dim histogram classes ;  CTH2CTomato 2-D histogram with a byte per channel (see TH1 documentation) ;  CTH2DTomato 2-D histogram with a double per channel (see TH1 documentation)} ;  CTH2Editor;  CTH2FTomato 2-",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:168998,Safety,detect,detector,168998,"ormation ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data storage for description of one particle ;  CTMCVerboseClass for printing a detailed information from MC application ;  CTMD5This code implements the MD5 message-digest algorithm ;  CTMehrotraSolver;  CTMemberInspectorAbstract base class for accessing the data-members of a class ;  CTMemberStreamer;  ►CTMemFileA TMemFile is like a normal TFile except th",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:170816,Safety,detect,detector,170816,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:184620,Safety,detect,detector,184620,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:10455,Security,access,accesses,10455,"ats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:10564,Security,access,access,10564,"er for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:10877,Security,access,accesses,10877,"for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statist",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:10997,Security,access,accesses,10997,"ramework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistIm",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:11195,Security,access,accesses,11195,"ce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToTypeConverts a TAxisConfig of whatever kind to the corresponding TAxisBase-derived object ;  CAxisConfigToType< TAxis",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:11300,Security,access,accesses,11300,"CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToTypeConverts a TAxisConfig of whatever kind to the corresponding TAxisBase-derived object ;  CAxisConfigToType< TAxisConfig::kEquidistant >;  CAxisConfigToType< TAxisConfig::kGrow >;  CAxisConfigToType< TAxisConfig::kIrreg",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:11854,Security,access,accessors,11854,"ll necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToTypeConverts a TAxisConfig of whatever kind to the corresponding TAxisBase-derived object ;  CAxisConfigToType< TAxisConfig::kEquidistant >;  CAxisConfigToType< TAxisConfig::kGrow >;  CAxisConfigToType< TAxisConfig::kIrregular >;  CAxisConfigToType< TAxisConfig::kLabels >;  CTDirectoryEntry;  CTDrawableBase class for drawable entities: objects that can be painted on a TPad ;  CTFillBinCoordFill coord with low bin edge or center or high bin edge of all axes ;  CTFillBinCoord<-1, COORD, AXES >;  CTFillIterRangeFill range with begin() and end() of all axes, including under/overflow as specified by over ;  CTFillIterRange<-1, AXES >;  CTGetBinCount;  CTGetBinCount< 0, AXES >;  CTGetBinIndex;  CTGetBinIndex< -1, HISTIMPL, AXES, GROW >;  CTHistBufferedFillBase;  CTHistDra",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:13506,Security,access,access,13506,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:92440,Security,hash,hash,92440,"ss for RooProdPdf that calculates a general normalized projection of a product of non-factorizing PDFs, e.g ;  CRooGExpModelClass RooGExpModel is a RooResolutionModel implementation that models a resolution function that is the convolution of a Gaussian with a one-sided exponential ;  CRooGlobalFunc;  CRooGridRooGrid is a utility class for RooMCIntegrator which implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm ;  CRooHashTableRooHashTable implements a hash table for TObjects ;  CRooHistA RooHist is a graphical representation of binned data based on the TGraphAsymmErrors class ;  CRooHistConstraint;  ►CRooHistErrorRooHistError is a singleton class used to calculate the error bars for each bin of a RooHist object ;  CBinomialSumAsym;  CBinomialSumEff;  CPoissonSum;  CRooHistFuncRooHistFunc implements a real-valued function sampled from a multidimensional histogram ;  CRooHistPdfRooHistPdf implements a probablity density function sampled from a multidimensional histogram ;  CRooImproperIntegrator1DSpecial numeric integrator that can handle integrals over open domains ;  CRooIntRooInt is a minimal implementation of a TObject holding a Int_t value ;  ►CRooIntegralMorph;  CMorphCacheElem;  CRooIntegrator1DRooIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooIntegrator2DRooIntegrator2D implements a numeric two-dimensiona integrator in terms of a recursive application of RooIntegrator1D ;  CRooIntegratorBindingFunction binding representing the output of a RooAbsIntegrator ;  CRooInvTransformLightweight function binding that returns the inverse of an input function binding Apply the change of variables transformation x -> 1/x to the input function and its range ;  CRooJeffreysPriorRooJeffreysPrior ;  CRooKeysPdfClass RooKeysPdf implements a one-dimensional kernel estimation p.d.f which model the distribution of an arbitrary input dataset as a superposition of Gaussian kernels, one",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:115471,Security,hash,hash,115471,"nd ;  CTChainA chain is a collection of files containg TTree objects ;  CTChainElementA TChainElement describes a component of a TChain ;  ►CTChainIndexA Chain Index ;  CTChainIndexEntryHolds a description of indices of trees in the chain ;  CTChair;  CTChirpFileRead and write data via a Chirp server ;  CTChirpSystem;  CTCivetweb;  CTCL;  ►CTClassThe ROOT global object gROOT contains a list of all defined classes ;  CInsertTClassInRegistryRAII;  CTDeclNameRegistry;  CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and their relations for a list of classes ;  ►CTClingThis class defines an interface to the cling C++ interpreter ;  CCharPtrCmp_t;  CTUniqueString;  CTClingBaseClassInfoEmulation of the CINT BaseClassInfo class ;  CTClingCallbacks;  CTClingCallFuncEmulation of the CINT CallFunc class ;  CTClingClassInfoEmulation of the CINT ClassInfo class ;  CTClingDataMemberInfoEmulation of the CINT DataMemberInfo class ;  CTClingMethodArgInfoEmulation of the CINT MethodInfo class ;  CTClingMethodInfoEmulation of the CINT MethodInfo class ;  CTClingTypedefInfoEmulation of the CINT TypedefInfo class ;  CTClingTypeInfoEmulation of the CINT TypeInfo class ;  ►CTClingValueBridge between cling::Value and ROOT ;  CHasTheSameSizeAsClingValue;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionM",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:117735,Security,access,access,117735,"wsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context sensitive popup menus ;  CTControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operations ;  CTControlBarButtonThis class defines the control bar buttons ;  CTControlBarImpABC describing GUI independent control bar ;  CTConvertClonesArrayToProxySmall helper to read a TBuffer containing a TClonesArray into any valid collection ;  CTConvertMapToProxy;  CTCreatePrimitivesCreates new primitives ;  CTCrownTo draw a Crown ;  CTCTUBA cut tube with 11 parameters ;  CTCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams ;  CTCurlyArcEditor;  CTCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams ;  CTCurlyLineEditor;  CTCutA specialized string object used for TTree selections ;  CTCutGGraphical cut class ;  CTDatabasePDGParticle database manager class ;  CTDataMemberAll ROOT classes may have RTTI (run time type identification) support added ;  CTDataSet;  CTDataSetIter;  CTDataSetManager;  CTDataSetManagerAliEn;  CTDataSetManagerFile;  CTDataTypeBasic data type descriptor (datatype information is obtained from CINT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:134541,Security,hash,hash,134541,"  CTEveVector2TMinimal, templated two-vector ;  CTEveVector4TMinimal, templated four-vector ;  CTEveVectorTMinimal, templated three-vector ;  CTEveViewerEve representation of TGLViewer ;  CTEveViewerListList of Viewers providing common operations on TEveViewer collections ;  CTEveViewerListEditorGUI editor for TEveViewerList ;  CTEveVSDVisualization Summary Data - a collection of trees holding standard event data in experiment independent format ;  CTEveWindowAbstract base-class for representing eve-windows ;  CTEveWindowEditorGUI editor for TEveWindow ;  CTEveWindowFrameEncapsulates TGFrame into an eve-window ;  CTEveWindowManagerManager for EVE windows ;  CTEveWindowPackEncapsulates TGPack into an eve-window ;  CTEveWindowSlotDescription of TEveWindowSlot ;  CTEveWindowTabEncapsulates TGTab into an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  CTF11-Dim function class ;  CTF12A projection of a TF2 along X or Y ;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:140804,Security,access,access,140804,"TGClient;  CTGCocoaThis class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGeneratorThe interface to various event generators ;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpaceUtility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi"") ;  CTGeoArb8An arbitrary trapezoid with less than 8 vertices standing on ;  CTGeoAttVisualization and tracking attributes for volumes and nodes ;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBoxBox class ;  CTGeoBBoxEditor;  ►CTGeoBoolNodeBase class for Boolean operations between two shapes ;  CThreadData_t;  CTGeoBranchArrayAn array of daughter indices making a geometry pa",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:147181,Security,access,access,147181,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162439,Security,hash,hash,162439,2Editor;  CTH2FTomato 2-D histogram with a float per channel (see TH1 documentation)} ;  CTH2GLRendering of TH2 and derived classes ;  CTH2ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated imple,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162518,Security,hash,hash,162518,tion)} ;  CTH2GLRendering of TH2 and derived classes ;  CTH2ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack ,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:162578,Security,hash,hash,162578,ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkIn,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:167034,Security,access,access,167034,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:167197,Security,access,access,167197,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:167355,Security,access,access,167355,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:167575,Security,access,access,167575,"TLineA simple line ;  CTLinearFitterThe Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS ;  CTLinearGradientDefine a linear color gradient ;  CTLinearMinimizerTLinearMinimizer class: minimizer implementation based on TMinuit ;  CTLineEditor;  CTLinkSpecial TText object used to show hyperlinks ;  CTListA doubly linked list ;  CTListIterIterator of linked list ;  CTListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member ;  CTListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockIterIterator for TListOfEnumsWithLock ;  CTListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap impleme",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:167803,Security,access,access,167803,"ased on TMinuit ;  CTLineEditor;  CTLinkSpecial TText object used to show hyperlinks ;  CTListA doubly linked list ;  CTListIterIterator of linked list ;  CTListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member ;  CTListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockIterIterator for TListOfEnumsWithLock ;  CTListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CT",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:169890,Security,access,accessing,169890,"cribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data storage for description of one particle ;  CTMCVerboseClass for printing a detailed information from MC application ;  CTMD5This code implements the MD5 message-digest algorithm ;  CTMehrotraSolver;  CTMemberInspectorAbstract base class for accessing the data-members of a class ;  CTMemberStreamer;  ►CTMemFileA TMemFile is like a normal TFile except that it reads and writes only from memory ;  CTMemBlock;  CTMemStat;  CTMemStatHook;  CTMemStatShowUtility class post-processing the file generated by TMemStat (default memstat.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:172339,Security,hash,hash,172339,"MySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class generates packets to be processed on PROOF worker servers ;  CTPacketizerAdaptiveThis packetizer is based on TPacketizer but uses different load-balancing algorithms and data structures ;  CTPacketizerFileThis packetizer generates packets which contain a single file path to be used in process ;  CTPacketizerMultiThis class allows to do multiple runs in the same query; each run can be a, for example, diff",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:182998,Security,access,access,182998,"on is a 4-component mathematic object quite convenient when dealing with space rotation (or reference frame transformation) ;  CTQueryDescription;  CTQueryResultA container class for query results ;  CTQueryResultManagerClass managing the query-result area ;  CTQUndoManagerRecorder of operations for undo and redo ;  CTrack;  CTrackD;  CTrackD32;  CTRadialGradientDefine a radial color gradient ;  CTRandomThis is the base class for the ROOT Random number generators ;  CTRandom1The Ranlux Random number generator class ;  CTRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by L'Ecuyer ;  CTRandom3Random number generator class based on M ;  CTRandomEngine;  CTRandomGen;  CTRatioPlotClass for displaying ratios, differences and fit residuals ;  CTRealDataManages the effective list of all data members for a given class ;  CTReaperTimer;  CTRecCmdEvent;  CTRecEvent;  CTRecExtraEvent;  CTRecGuiEvent;  CTRecorder;  CTRecorderInactive;  CTRecorderPaused;  CTRecorderRecording;  CTRecorderReplaying;  CTRecorderState;  CTRecWinPair;  CTRedirectOutputGuard;  CTRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject ;  CTRefArrayAn array of references to TObjects ;  CTRefArrayIterIterator of object array ;  CTRefArrayProxyA container proxy, which allows to access references stored in a TRefArray from TTree::Draw ;  CTRefCntDefinitions for TRefCnt, base class for reference counted objects ;  CTRefProxy;  CTRefTableA TRefTable maintains the association between a referenced object and the parent object supporting this referenced object ;  CTRegexpRegular expression class ;  CTRemoteObjectProtocol for browsing ROOT objects from a remote ROOT session ;  CTResponseTable;  CTRFIOFileA ROOT file that reads/writes via a rfiod server ;  CTRFIOSystemDirectory handler for RFIO ;  Ctriangulateio;  CTRint;  CTRobustEstimatorMinimum Covariance Determinant Estimator - a Fast Algorithm invented by Peter J.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191622,Security,access,access,191622,"ng z ;  ►CTTreeA TTree object has a header with a name and a title ;  CTClusterIteratorHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goe",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:194753,Security,access,access,194753,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195028,Security,access,access,195028,"  CTUrlThis class represents a WWW compatible URL ;  CTUsrHit;  CTUsrHitBuffer;  CTUsrSevtData1;  CTUsrSevtData2;  ►CTUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier) ;  Cuuid_time_t;  CTVector2TVector2 is a general two vector class, which can be used for the description of different vectors in 2D ;  CTVector3TVector3 is a general three vector class, which can be used for the description of different vectors in 3D ;  CTVectorTTVectorT ;  CTVersionCheck;  CTViewSee TView3D ;  CTView3DThe 3D view class ;  CTViewer3DPadProvides 3D viewer interface (TVirtualViewer3D) support on a pad ;  CTViewPubDataMembersView implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry paint",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:195298,Security,access,access,195298," general two vector class, which can be used for the description of different vectors in 2D ;  CTVector3TVector3 is a general three vector class, which can be used for the description of different vectors in 3D ;  CTVectorTTVectorT ;  CTVersionCheck;  CTViewSee TView3D ;  CTView3DThe 3D view class ;  CTViewer3DPadProvides 3D viewer interface (TVirtualViewer3D) support on a pad ;  CTViewPubDataMembersView implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers ;  CTViewPubDataMembersIterIterator of over the view's content ;  CTViewPubFunctionsView implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers ;  CTViewPubFunctionsIterIterator of over the view's content ;  CTViewTimer;  CTVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  CTVirtualAuth;  CTVirtualBranchBrowsableTVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support ;  CTVirtualCollectionIteratorsSmall helper class to generically acquire and release iterators ;  ►CTVirtualCollectionProxy;  CTPushPop;  ►CTVirtualCollectionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndex",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:196893,Security,access,access,196893,"Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DA",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4322,Testability,test,test,4322,"ased on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:4628,Testability,test,test,4628,"ent a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5158,Testability,test,test,5158,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5200,Testability,test,test,5200,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5580,Testability,test,test,5580,"ols which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregator;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorHypothesis Test Calculator using a full frequentist procedure for sampling the test statistic distribution ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorThis class implements the Hypothesis test calculation using an hybrid (frequentist/bayesian) procedure ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResult;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now depratcated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class: holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:5833,Testability,test,tests,5833,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7066,Testability,log,log,7066,"elihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7110,Testability,test,test,7110,"e and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatPr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8802,Testability,test,test,8802,te implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUni,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9105,Testability,log,log,9105,StatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contai,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:9309,Testability,test,test,9309,ation options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  ►NDetail;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnviron,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:18204,Testability,log,log,18204,"a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  ►CParsingStateRAIIRAII used to store Parser, Sema, Preprocessor state for recursive parsing ;  CSemaParsingInitForAutoVarsRAII;  CRStl;  CTArrayCharProxy;  CTArrayProxy;  CTArrayType;  CTArrayType< T, 0 >;  CTAtomicPointerHelper class to manage atomic pointers ;  CTBranchDescriptor;  CTBranchProxyClassDescriptor;  CTBranchProxyDescriptor;  CTBranchProxyDirector;  CTBranchProxyHelper;  CTClaArrayProxy;  CTClaImpProxy;  CTClaObjProxy;  CTClaProxy;  CTDefaultInitBehavior;  CTF1BuilderInternal class used by TF1 for defining template specialization for d",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:78045,Testability,test,test,78045,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:79876,Testability,test,test,79876,"ects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficient implementation of the generator context specific for RooAddPdf PDFs ;  ►CRooAdditionRooAddition calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets ;  CCacheElemIterator over set ;  ►CRooAddModel;  CCacheElemTransiet cache with transformed values of coefficients ;  CIntCacheElem;  ►CRooAddPdfRooAddPdf is an efficient implementation of a sum of PDFs of the form ;  CCacheElemTransiet cache with transformed values of coefficients ;  CRooAICReg",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86319,Testability,log,log,86319,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:97042,Testability,log,log,97042,"ory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.d.f ;  CAnaIntData;  CBitBlock;  CGenData;  CRooNameRegRooNameReg is a registry for 'const char*' name ;  CRooNameSetRooNameSet is a utility class that stores the names the objects in a RooArget ;  ►CRooNDKeysPdfGeneric N-dimensional implementation of a kernel estimation p.d.f ;  CBoxInfo;  CSorterTV_L2HSorter function ;  CRooNLLVarClass RooNLLVar implements a a -log(likelihood) calculation from a dataset and a PDF ;  CRooNonCentralChiSquareThe PDF of the Non-Central Chi Square distribution for n degrees of freedom ;  CRooNonCPEigenDecayTime-dependent RooAbsAnaConvPdf for CP violating decays to Non-CP eigenstates (eg, \( B_0 \rightarrow \rho^\pm \pi^\mp\)) ;  ►CRooNormSetCacheClass RooNormSet cache manage the bookkeeping of multiple instances of sets of integration and normalization observables that effectively have the same definition ;  CPairCmp;  CRooNovosibirskRooNovosibirsk implements the Novosibirsk function ;  CRooNumberClass RooNumber implements numeric constants used by RooFit ;  CRooNumCdfClass RooNumCdf is an implementation of RooNumRunningInt specialized to calculate cumulative distribution functions from p.d.f.s ;  CRooNumConvolutionNumeric 1-dimensional convolution operator PDF ;  CRooNumConvPdfNumeric 1-dimensional convolution operator PDF ;  CRooNumGenConfigRooNumGenConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumGenFactoryRooNumGenFactory is a factory to instantiate numeric integrators from a given function binding and a given configuration ;  CRooNumIntConfigRooNumIntConfig holds the configuration parameters of the various numeric integrators used by RooRealIntegral ;  CRooNumIntFactoryRooNumIntFact",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:102292,Testability,log,logic,102292,"for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive f",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108280,Testability,test,test,108280,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108331,Testability,test,tests,108331,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108361,Testability,test,tests,108361,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108473,Testability,test,testCode,108473,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:108513,Testability,test,test,108513,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:112192,Testability,benchmark,benchmarking,112192,"class for elements drawn in the editor ;  CTAttCanvasManages canvas attributes ;  CTAttFillFill Area Attributes class ;  CTAttFillEditor;  CTAttImageTImage attributes ;  CTAttLineLine Attributes class ;  CTAttLineEditor;  CTAttMarkerMarker Attributes class ;  CTAttMarkerEditor;  CTAttPadManages default Pad attributes ;  CTAttParticleParticle definition, partly based on GEANT3 particle definition ;  CTAttTextText Attributes class ;  CTAttTextEditor;  CTAuthenticate;  CTAxisClass to manage histogram axis ;  CTAxis3DThe 3D axis painter class ;  CTAxisEditor;  CTAxisModLabTAxis helper class used to store the modified labels ;  CTBackCompFitterBackward compatible implementation of TVirtualFitter ;  CTBase64This code implements the Base64 encoding and decoding ;  CTBaseClassEach class (see TClass) has a linked list of its base class(es) ;  CTBasketManages buffers for branches of a Tree ;  CTBasketSQLImplement TBasket for a SQL backend ;  CTBenchmarkThis class is a ROOT utility to help benchmarking applications ;  CTBinomialEfficiencyFitterBinomial fitter for the division of two histograms ;  ►CTBitsContainer of bits ;  CTReference;  CTBonjourBrowser;  CTBonjourRecord;  CTBonjourRegistrar;  CTBonjourResolver;  CTBoxCreate a Box ;  CTBranchA TTree is a list of TBranches ;  CTBranchClonesA Branch for the case of an array of clone objects ;  CTBranchElementA Branch for the case of an object ;  CTBranchObjectA Branch for the case of an object ;  CTBranchRefA branch containing and managing a TRefTable for TRef autoloading ;  ►CTBranchSTLA Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode ;  CElementBranchHelper_t;  CTBRIKA box with faces perpendicular to the axes ;  CTBrowserUsing a TBrowser one can browse all ROOT objects ;  CTBrowserImpABC describing GUI independent browser implementation protocol ;  CTBrowserPlugin;  CTBtInnerNodeInner node of a TBtree ;  CTBtItemItem stored in inner nodes of a TBtree ;  C",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:151621,Testability,log,logical,151621," FTFont ;  CTGLFontManagerA FreeType GL font manager ;  CTGLFormatEncapsulation of format / contents of an OpenGL buffer ;  CTGLH2PolyPainterPaint TH2Poly ;  CTGLHistPainterThe histogram painter class using OpenGL ;  CTGLineLBEntry;  CTGLineStyleComboBox;  CTGLineWidthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquati",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:153364,Testability,log,logarithmic,153364,"tton ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeConcrete physical shape - a GL drawable ;  CTGLPlane3D plane class - of format Ax + By + Cz + D = 0 ;  CTGLPlot3DDescription of TGLPlot3D ;  CTGLPlotBoxImplementation of a box around a histogram/function for plot-painters ;  CTGLPlotCameraCamera for TGLPlotPainter and sub-classes ;  CTGLPlotCoordinatesHelper class for plot-painters holding information about axis ranges, numbers of bins and flags if certain axis is logarithmic ;  CTGLPlotPainterBase class for plot-painters that provide GL rendering of various 2D and 3D histograms, functions and parametric surfaces ;  CTGLPolyLineTo draw a 3D polyline in a GL window ;  CTGLPolyMarkerTo draw a 3D polymarker in a GL window ;  CTGLPShapeObjWrap TGLPysicalShape into TObject so that it can be edited using GED ;  CTGLPShapeObjEditorGUI editor for TGLPShapeObj ;  CTGLPShapeRefBase class for references to TGLPysicalShape that need to be notified when the shape is destroyed ;  CTGLQuadricWrapper class for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top lev",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:154634,Testability,log,logical,154634,"bjWrap TGLPysicalShape into TObject so that it can be edited using GED ;  CTGLPShapeObjEditorGUI editor for TGLPShapeObj ;  CTGLPShapeRefBase class for references to TGLPysicalShape that need to be notified when the shape is destroyed ;  CTGLQuadricWrapper class for GLU quadric shape drawing object ;  CTGLRectViewport (pixel base) 2D rectangle class ;  CTGLRedrawTimer;  CTGLRnrCtxAggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastructure ;  CTGLRotateManipRotate manipulator - attaches to physical shape and draws local axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionP",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177224,Testability,benchmark,benchmarks,177224,"ether with TProcessExecutor to allow the execution of functions in server processes ;  CTPoolWorker< F, T, void >;  CTPoolWorker< F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177354,Testability,benchmark,benchmark,177354,"F, void, R >;  CTPosixCondition;  CTPosixMutex;  CTPosixThread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofM",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177410,Testability,benchmark,benchmark,177410,"Thread;  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coor",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177420,Testability,test,test,177420,"  CTPosixThreadCleanUp;  CTPosixThreadFactory;  CTPostScriptInterface to PostScript ;  CTPRegexp;  CTPrimaryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177521,Testability,benchmark,benchmark,177521,"maryOld version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:177531,Testability,test,test,177531," version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:178301,Testability,log,log,178301,"ch ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the per",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185514,Testability,benchmark,benchmark,185514,"otationDescribes a rotation of objects of the TVector3 class ;  CTRotationRow;  CTRotMatrixManages a detector rotation matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ; ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185524,Testability,test,test,185524,"Describes a rotation of objects of the TVector3 class ;  CTRotationRow;  CTRotMatrixManages a detector rotation matrix ;  CTRSA_fun;  CTRWLock;  CTS3HTTPRequest;  CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpect",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185684,Testability,benchmark,benchmark,185684,"CTS3WebFile;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting functions ;  CTSpectrum2PainterTwo-dimensional graphics func",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:185694,Testability,test,test,185694,"File;  CTSapDBResult;  CTSapDBRow;  CTSapDBServer;  CTSAXParserTSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library ;  CTSecContext;  CTSecContextCleanup;  CTSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections ;  CTSelectorCintThis class is a special version of TSelector for user interpreted classes ;  CTSelectorDrawA specialized TSelector for TTree::Draw ;  CTSelectorEntriesThe class is derived from the ROOT class TSelector ;  CTSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees) ;  CTSelectorScalarNamed scalar type, based on Long64_t, streamable, storable and mergable ;  CTSelEventSelector for PROOF I/O benchmark test ;  CTSelEventGenSelector for event file generation ;  CTSelHandleDataSetPROOF selector for file cache release ;  CTSelHistPROOF selector for CPU-intensive benchmark test ;  CTSelVerifyDataSetSelector to verify dataset in parallel on workers ;  CTSemaphore;  CTSeqCollectionSequenceable collection abstract base class ;  CTServerSocket;  CTSessionDescription;  CTSessionFrame;  CTSessionInputFrame;  CTSessionLogView;  CTSessionOutputFrame;  CTSessionQueryFrame;  CTSessionServerFrame;  CTSessionViewer;  CTShapeThis is the base class for all geometry shapes ;  CTShutdownTimer;  CTSignalHandler;  CTSimpleAnalysisA TSimpleAnalysis object creates histograms from a TChain ;  CTSlaveClass describing a PROOF worker server ;  CTSlaveInfo;  CTSlaveLiteVersion of TSlave for local worker servers ;  CTSliderA specialized TPad including a TSliderBox object ;  CTSliderBoxThe moving box in a TSlider ;  CTSocket;  CTSortedListA sorted doubly linked list ;  CTSpectrumAdvanced Spectra Processing ;  CTSpectrum2Advanced 2-dimensional spectra processing ;  CTSpectrum2FitAdvanced 2-dimensional spectra fitting functions ;  CTSpectrum2PainterTwo-dimensional graphics function ;  ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6107,Usability,simpl,simple,6107,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:6731,Usability,simpl,simple,6731,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7157,Usability,simpl,simple,7157,"hoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7581,Usability,simpl,simple,7581,"function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio o",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:7643,Usability,simpl,simple,7643,"tion of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8648,Usability,simpl,simple,8648,umber counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an impleme,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:8757,Usability,simpl,simply,8757,PointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (choosen randomly) at each step ;  CSimpleInterval;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:16959,Usability,simpl,simple,16959,"t provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:23314,Usability,simpl,simplest,23314," Cholesky decomposition (N = 6) ;  C_inverterGenDimStruct to obtain the inverse from a Cholesky decomposition (general dimensionality) ;  C_solverStruct to solve a linear system using its Cholesky decomposition ;  C_solver< F, 0, V >Struct to solve a linear system using its Cholesky decomposition (N=0) ;  C_solver< F, 1, V >Struct to solve a linear system using its Cholesky decomposition (N=1) ;  C_solver< F, 2, V >Struct to solve a linear system using its Cholesky decomposition (N=2) ;  C_solver< F, 3, V >Struct to solve a linear system using its Cholesky decomposition (N=3) ;  C_solver< F, 4, V >Struct to solve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:23742,Usability,simpl,simplified,23742," Cholesky decomposition (N = 6) ;  C_inverterGenDimStruct to obtain the inverse from a Cholesky decomposition (general dimensionality) ;  C_solverStruct to solve a linear system using its Cholesky decomposition ;  C_solver< F, 0, V >Struct to solve a linear system using its Cholesky decomposition (N=0) ;  C_solver< F, 1, V >Struct to solve a linear system using its Cholesky decomposition (N=1) ;  C_solver< F, 2, V >Struct to solve a linear system using its Cholesky decomposition (N=2) ;  C_solver< F, 3, V >Struct to solve a linear system using its Cholesky decomposition (N=3) ;  C_solver< F, 4, V >Struct to solve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:36695,Usability,simpl,simple,36695,"ivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integratio",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:58926,Usability,simpl,simplex,58926,"r;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating ",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:63605,Usability,simpl,simplex,63605,"ameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:63858,Usability,simpl,simplex,63858,"FunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVaria",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:64032,Usability,simpl,simplex,64032,"s used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQu",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:68302,Usability,learn,learning,68302,";  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunction;  CAbsoluteDeviationLossFunctionBDT;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTree;  CBinarySearchTreeNode;  CBinaryTree;  CCCPruner;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactory;  CClassInfo;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfig;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTest;  CCostComplexityPruneTool;  CCrossEntropy;  CCrossValidation;  CCrossValidationResult;  CDataInputHandler;  CDataLoader;  CDataSet;  ►CDataSetFactory;  CEventStats;  CDataSetInfo;  CDataSetManager;  CDecisionTree;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneTool;  CFactory;  CFitterBase;  CGeneticAlgorithm;  CGeneticFitter;  CGeneticGenes;  CGeneticPopulation;  CGeneticRange;  CGiniIndex;  CGiniIndexWithLaplace;  CHuberLossFunction;  CHuberLossFunctionBDT;  CHyperParameterOptimisation;  CHyperParameterOptimisationResult;  CIFitterTarget;  CIMethod;  CIncrement;  CInterval;  CIPruneTool;  CIPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook ;  CKDEKernel;  CLDA;  CLeastSquaresLossFunction;  CLeastSquaresLossFunctionBDT;  CLogInterval;  CLossFunction;  CLossFunctionBDT;  CLossFunctionEventInfo;  CMCFitter;  CMethodANNBase;  CMethodBase;  CMethodBayesClassifier;  CMethodBDT;  CMethodBoost;  CMethodC50;  CMethodCategory;  CMethodCFMlpANN;  ►CMethodCFMlpANN_Utils;  CVARn2;  CMethodCompositeBase;  CMethodCuts;  ►CMethodDNN;  CTTrainingSettings;  CMethodDT;  CMethodFDA;  CMethodFisher;  CMethodHMatrix;  CMethodInfo;  CMe",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:86071,Usability,simpl,simple,86071,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:101974,Usability,simpl,simple,101974,"rue value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:120204,Usability,feedback,feedback,120204," class ;  CTDecompBKThe Bunch-Kaufman diagonal pivoting method decomposes a real symmetric matrix A using ;  CTDecompCholCholesky Decomposition class ;  CTDecompLULU Decomposition class ;  CTDecompQRHQR Decomposition class ;  CTDecompSparseSparse Symmetric Decomposition class ;  CTDecompSVDSingle Value Decomposition class ;  CTDialogCanvasA canvas specialized to set attributes ;  CTDiamondDraw a Diamond ;  CTDictAttributeMapThe ROOT object has a list of properties which are stored and retrieved using TDictAttributeMap ;  CTDictionaryThis class defines an abstract interface that must be implemented by all classes that contain dictionary information ;  ►CTDirectoryDescribe directory structure in memory ;  CTContext;  CTDirectoryFileA ROOT file is structured in Directories (like a file system) ;  CTDNDData;  CTDocDirective;  CTDocHtmlDirective;  CTDocLatexDirective;  CTDocMacroDirective;  CTDocMethodWrapper;  CTDocOutput;  CTDocParser;  CTDOMParser;  CTDrawFeedbackUtility class to draw objects in the feedback list during queries ;  CTDSetThis class implements a data set to be used for PROOF processing ;  CTDSetElementManages an element of a TDSet ;  CTDSetProxy;  CTDsKey;  CTEditQueryFrame;  CTEfficiencyClass to handle efficiency histograms ;  CTElementActionT;  CTElementPosActionT;  CTEllipseDraw Ellipses ;  CTELTUA cylinder with an elliptical section ;  CTEmulatedCollectionProxyStreamer around an arbitrary STL like container, which implements basic container functionality ;  CTEmulatedMapProxyStreamer around a map container ;  CTEntryListA List of entry numbers in a TTree or TChain ;  CTEntryListArrayA list of entries and subentries in a TTree or TChain ;  CTEntryListBlockUsed by TEntryList to store the entry numbers ;  CTEntryListFromFileManages entry lists from different files, when they are not loaded in memory at the same time ;  CTEnumImplements the enum type ;  CTEnumConstantImplements the constants of the enum type ;  CTEnvReads config files, by default named .",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:125631,Usability,simpl,simplified,125631,"ros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of objects on regular grids ;  CTEveGridStepperEditorEditor for TEveGridStepper class ;  CTEveGridStepperSubEditorSub-editor for TEveGridStepper class ;  CTEveGTriVecValuatorComposite GUI element for setting three numerical values (label, three number-entries) ;  CTEveGValuatorComposite GUI element for single value selection (supports label, number-entry and slider) ;  CTEveGValuatorBaseBase class for composite GUI eleme",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:155205,Usability,simpl,simply,155205,"al axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGL",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:166585,Usability,simpl,simple,166585,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:171860,Usability,simpl,simple,171860,"Info;  CTMonaLisaText;  CTMonaLisaValue;  CTMonaLisaWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elemen",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:171932,Usability,simpl,simple,171932," CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class g",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:181943,Usability,undo,undo,181943,,MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:188050,Usability,feedback,feedback,188050,"r class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePr",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/annotated.html:191707,Usability,simpl,simple,191707,"orHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  CTTreeCacheA specialized TFileCacheRead object for a TTree ;  CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_t;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer sess",MatchSource.WIKI,doc/v608/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/annotated.html
https://root.cern/doc/v608/files.html:104131,Availability,error,error,104131,";  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Ex",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:104198,Availability,error,errors,104198,";  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Ex",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:104744,Availability,error,errors,104744,"ial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitter directly ;  fitLinearRobust.C This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers ;  fitMultiGraph.C fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normaliz",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:105731,Availability,error,errors,105731,"cle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitter directly ;  fitLinearRobust.C This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers ;  fitMultiGraph.C fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:107063,Availability,error,errors,107063,"el, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectru",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:107471,Availability,error,errors,107471,unction (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector as,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:114813,Availability,avail,available,114813,"d ROOT session showing how to perform various interactive graphical editing operations ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115629,Availability,error,error,115629,"mbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeri",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115797,Availability,error,error,115797,"ition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipa",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115843,Availability,error,error,115843,"t.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different co",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:127112,Availability,avail,available,127112,"a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type You must run this tutorial with ACLIC: a dictionary will be automatically created ;  fildir.C This macro displays the ROOT Directory data structure ;  file.C This macro displays the physical ROOT file structure ;  hadd.C Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tuto",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:128650,Availability,avail,available,128650,"ions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mathBeta.C Test the TMath::BetaDist and TMath::BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135204,Availability,echo,echo,135204,"producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector t",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:137975,Availability,error,error,137975,"ing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  r",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:138389,Availability,error,errors,138389,"  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an as",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:102795,Deployability,configurat,configuration,102795," geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usage of ""Default"" geometry alias ;  geom_lhcb.CShows CMS geometry ;  glplot.CPreliminary demo for showing Timur's GL plots in EVE ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourie",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:103560,Deployability,configurat,configurations,103560,"ineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C F",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:106772,Deployability,configurat,configurations,106772,"um of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:119836,Deployability,update,update,119836," and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitter",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:129690,Deployability,integrat,integration,129690," mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:140059,Deployability,install,install,140059,"e to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:140140,Deployability,integrat,integration,140140," by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 ;  rf104_classfactory.C 'BASIC FUNCTIONALITY' RooFi",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:140281,Deployability,patch,patched,140281," viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 ;  rf104_classfactory.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #104 ;  rf105_funcbinding.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #105 ;  rf106_plotdecoration.C 'BASI",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:156001,Deployability,install,installed,156001,"th a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:129678,Energy Efficiency,adapt,adaptive,129678," mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:155515,Energy Efficiency,efficient,efficient,155515," This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordt",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:56770,Integrability,rout,routines,56770,TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cxx;  TQpLinSolverDens.cxx;  TQpLinSolverSparse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:61883,Integrability,interface,interface,61883,  TAlienJDL.cxx;  TAlienJob.cxx;  TAlienJobStatus.cxx;  TAlienJobStatusList.cxx;  TAlienMasterJob.cxx;  TAlienMasterJobStatus.cxx;  TAlienPackage.cxx;  TAlienResult.cxx;  TAlienSystem.cxx;  ► auth;  ► inc;  AFSAuth.h;  AFSAuthTypes.h;  AuthConst.h;  LinkDefAFS.h;  LinkDefRoot.h;  rsaaux.h;  rsadef.h;  rsafun.h;  rsalib.h;  TAFS.h;  TAuthenticate.h;  THostAuth.h;  TRootAuth.h;  TRootSecContext.h;  ► src;  AFSAuth.cxx;  DaemonUtils.cxx;  DaemonUtils.h;  rsaaux.cxx;  rsafun.cxx;  rsalib.cxx;  TAFS.cxx;  TAuthenticate.cxx;  THostAuth.cxx;  TRootAuth.cxx;  TRootSecContext.cxx;  ► bonjour;  ► inc;  LinkDef.h;  TBonjourBrowser.h;  TBonjourRecord.h;  TBonjourRegistrar.h;  TBonjourResolver.h;  ► src;  TBonjourBrowser.cxx;  TBonjourRecord.cxx;  TBonjourRegistrar.cxx;  TBonjourResolver.cxx;  ► davix;  ► inc;  LinkDef.h;  TDavixFile.h;  TDavixSystem.h;  ► src;  TDavixFile.cxx;  TDavixFileInternal.h;  TDavixSystem.cxx;  ► glite;  ► inc;  LinkDef.h;  TGLite.hInterface of the class which defines interface to gLite GRID services ;  TGLiteJob.hGLite implementation of TGridJob ;  TGLiteJobStatus.hGLite implementation of TGridJobStatus ;  TGLiteResult.h;  ► src;  TGLite.cxxImplementation of the class which defines interface to gLite GRID services ;  TGLiteJob.cxxGLite implementation of TGridJob ;  TGLiteJobStatus.cxx;  TGLiteResult.cxx;  ► http;  ► civetweb;  civetweb.c;  civetweb.h;  handle_form.inl;  md5.inl;  ► inc;  LinkDef.h;  TCivetweb.h;  TFastCgi.h;  THttpCallArg.h;  THttpEngine.h;  THttpServer.h;  TRootSniffer.h;  TRootSnifferStore.h;  ► src;  TCivetweb.cxx;  TFastCgi.cxx;  THttpCallArg.cxx;  THttpEngine.cxx;  THttpServer.cxx;  TRootSniffer.cxx;  TRootSnifferStore.cxx;  ► krb5auth;  ► inc;  Krb5Auth.h;  LinkDef.h;  TKSocket.h;  ► src;  Krb5Auth.cxx;  TKSocket.cxx;  ► ldap;  ► inc;  CintLDAP.h;  LinkDef.h;  TLDAPAttribute.h;  TLDAPEntry.h;  TLDAPResult.h;  TLDAPServer.h;  ► src;  TLDAPAttribute.cxx;  TLDAPEntry.cxx;  TLDAPResult.cxx;  TLDAPServer.cxx;  ► monalisa;  ► inc;  Lin,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:62102,Integrability,interface,interface,62102,h;  AFSAuthTypes.h;  AuthConst.h;  LinkDefAFS.h;  LinkDefRoot.h;  rsaaux.h;  rsadef.h;  rsafun.h;  rsalib.h;  TAFS.h;  TAuthenticate.h;  THostAuth.h;  TRootAuth.h;  TRootSecContext.h;  ► src;  AFSAuth.cxx;  DaemonUtils.cxx;  DaemonUtils.h;  rsaaux.cxx;  rsafun.cxx;  rsalib.cxx;  TAFS.cxx;  TAuthenticate.cxx;  THostAuth.cxx;  TRootAuth.cxx;  TRootSecContext.cxx;  ► bonjour;  ► inc;  LinkDef.h;  TBonjourBrowser.h;  TBonjourRecord.h;  TBonjourRegistrar.h;  TBonjourResolver.h;  ► src;  TBonjourBrowser.cxx;  TBonjourRecord.cxx;  TBonjourRegistrar.cxx;  TBonjourResolver.cxx;  ► davix;  ► inc;  LinkDef.h;  TDavixFile.h;  TDavixSystem.h;  ► src;  TDavixFile.cxx;  TDavixFileInternal.h;  TDavixSystem.cxx;  ► glite;  ► inc;  LinkDef.h;  TGLite.hInterface of the class which defines interface to gLite GRID services ;  TGLiteJob.hGLite implementation of TGridJob ;  TGLiteJobStatus.hGLite implementation of TGridJobStatus ;  TGLiteResult.h;  ► src;  TGLite.cxxImplementation of the class which defines interface to gLite GRID services ;  TGLiteJob.cxxGLite implementation of TGridJob ;  TGLiteJobStatus.cxx;  TGLiteResult.cxx;  ► http;  ► civetweb;  civetweb.c;  civetweb.h;  handle_form.inl;  md5.inl;  ► inc;  LinkDef.h;  TCivetweb.h;  TFastCgi.h;  THttpCallArg.h;  THttpEngine.h;  THttpServer.h;  TRootSniffer.h;  TRootSnifferStore.h;  ► src;  TCivetweb.cxx;  TFastCgi.cxx;  THttpCallArg.cxx;  THttpEngine.cxx;  THttpServer.cxx;  TRootSniffer.cxx;  TRootSnifferStore.cxx;  ► krb5auth;  ► inc;  Krb5Auth.h;  LinkDef.h;  TKSocket.h;  ► src;  Krb5Auth.cxx;  TKSocket.cxx;  ► ldap;  ► inc;  CintLDAP.h;  LinkDef.h;  TLDAPAttribute.h;  TLDAPEntry.h;  TLDAPResult.h;  TLDAPServer.h;  ► src;  TLDAPAttribute.cxx;  TLDAPEntry.cxx;  TLDAPResult.cxx;  TLDAPServer.cxx;  ► monalisa;  ► inc;  LinkDef.h;  TMonaLisaWriter.h;  ► src;  TMonaLisaWriter.cxx;  ► net;  ► inc;  LinkDef.h;  NetErrors.h;  RRemoteProtocol.h;  TApplicationRemote.h;  TApplicationServer.h;  TFileStager.h;  TFTP.h;  TGrid.h;  TGridCollectio,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:103818,Integrability,interface,interface,103818,ia TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:104364,Integrability,depend,depends,104364,"implified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a hist",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:129690,Integrability,integrat,integration,129690," mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:132855,Integrability,interface,interfaces,132855," post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to separate the signal from the background passing some selection cuts ;  mlpRegression.CThis macro shows the use of an ANN for regression analysis: given a set {i} of input vectors i and a set {o} of output vectors o, one looks for the unknown function f(i)=o ;  ► multicore;  imt001_parBranchProcessing.CDemonstrate how to activate and use the implicit parallelisation of TTree::GetEntry ;  imt101_parTreeProcessing.CIllustrate the usage of the TTreeProcessor::Process method ;  mp001_fillHistos.C Fill histograms in parallel and write them on file ;  mp101_fillNtuples.C Fill n-tuples in distinct workers ;  mp102_readNtuplesFillHistosAndFit.C Read n-tuples in distinct workers, fill histograms, merge them and fit ;  mp103_processSelector.C Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMer",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:139883,Integrability,interface,interface,139883,"e::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:140140,Integrability,integrat,integration,140140," by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  SimpleFitting.C Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function ;  ► roofit;  rf101_basics.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #101 ;  rf102_dataimport.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #102 ;  rf103_interprfuncs.C 'BASIC FUNCTIONALITY' RooFit tutorial macro #103 ;  rf104_classfactory.C 'BASIC FUNCTIONALITY' RooFi",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:95528,Modifiability,variab,variables,95528,rCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  compareanapp.cxx;  correlations.cxx;  correlationscatters.cxx;  correlationscattersMultiClass.cxx;  correlationsMultiClass.cxx;  CorrGui.cxx;  CorrGuiMultiClass.cxx;  deviations.cxx;  efficiencies.cxx;  likelihoodrefs.cxx;  MovieMaker.cxx;  mvaeffs.cxx;  mvas.cxx;  mvasMulticlass.cxx;  mvaweights.cxx;  network.cxx;  paracoor.cxx;  PlotFoams.cxx;  probas.cxx;  regression_averagedevs.cxx;  rulevis.cxx;  rulevisCorr.cxx;  rulevisHists.cxx;  tmvaglob.cxx;  TMVAGui.cxx;  TMVAMultiClassGui.cxx;  TMVARegGui.cxx;  variables.cxx;  variablesMultiClass.cxx;  ► tree;  ► tree;  ► doc;  ► macros;  entrylist_figure1.C;  entrylist_figure2.C;  entrylistblock_figure1.C;  ► inc;  LinkDef.h;  TBasket.h;  TBasketSQL.h;  TBranch.h;  TBranchBrowsable.h;  TBranchClones.h;  TBranchElement.h;  TBranchObject.h;  TBranchRef.h;  TBranchSTL.h;  TBufferSQL.h;  TChain.h,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:95542,Modifiability,variab,variablesMultiClass,95542,LoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  compareanapp.cxx;  correlations.cxx;  correlationscatters.cxx;  correlationscattersMultiClass.cxx;  correlationsMultiClass.cxx;  CorrGui.cxx;  CorrGuiMultiClass.cxx;  deviations.cxx;  efficiencies.cxx;  likelihoodrefs.cxx;  MovieMaker.cxx;  mvaeffs.cxx;  mvas.cxx;  mvasMulticlass.cxx;  mvaweights.cxx;  network.cxx;  paracoor.cxx;  PlotFoams.cxx;  probas.cxx;  regression_averagedevs.cxx;  rulevis.cxx;  rulevisCorr.cxx;  rulevisHists.cxx;  tmvaglob.cxx;  TMVAGui.cxx;  TMVAMultiClassGui.cxx;  TMVARegGui.cxx;  variables.cxx;  variablesMultiClass.cxx;  ► tree;  ► tree;  ► doc;  ► macros;  entrylist_figure1.C;  entrylist_figure2.C;  entrylistblock_figure1.C;  ► inc;  LinkDef.h;  TBasket.h;  TBasketSQL.h;  TBranch.h;  TBranchBrowsable.h;  TBranchClones.h;  TBranchElement.h;  TBranchObject.h;  TBranchRef.h;  TBranchSTL.h;  TBufferSQL.h;  TChain.h;  TChainElement.h;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:96193,Modifiability,variab,variables,96193,i.h;  CorrGuiMultiClass.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  compareanapp.cxx;  correlations.cxx;  correlationscatters.cxx;  correlationscattersMultiClass.cxx;  correlationsMultiClass.cxx;  CorrGui.cxx;  CorrGuiMultiClass.cxx;  deviations.cxx;  efficiencies.cxx;  likelihoodrefs.cxx;  MovieMaker.cxx;  mvaeffs.cxx;  mvas.cxx;  mvasMulticlass.cxx;  mvaweights.cxx;  network.cxx;  paracoor.cxx;  PlotFoams.cxx;  probas.cxx;  regression_averagedevs.cxx;  rulevis.cxx;  rulevisCorr.cxx;  rulevisHists.cxx;  tmvaglob.cxx;  TMVAGui.cxx;  TMVAMultiClassGui.cxx;  TMVARegGui.cxx;  variables.cxx;  variablesMultiClass.cxx;  ► tree;  ► tree;  ► doc;  ► macros;  entrylist_figure1.C;  entrylist_figure2.C;  entrylistblock_figure1.C;  ► inc;  LinkDef.h;  TBasket.h;  TBasketSQL.h;  TBranch.h;  TBranchBrowsable.h;  TBranchClones.h;  TBranchElement.h;  TBranchObject.h;  TBranchRef.h;  TBranchSTL.h;  TBufferSQL.h;  TChain.h;  TChainElement.h;  TCut.h;  TEntryList.h;  TEntryListArray.h;  TEntryListBlock.h;  TEntryListFromFile.h;  TEventList.h;  TFriendElement.h;  TIndArray.h;  TLeaf.h;  TLeafB.h;  TLeafC.h;  TLeafD.h;  TLeafElement.h;  TLeafF.h;  TLeafI.h;  TLeafL.h;  TLeafO.h;  TLeafObject.h;  TLeafS.h;  TNtuple.h;  TNtupleD.h;  TQueryResult.h;  TreeUtils.h;  TSelector.h;  TSelectorCint.h;  TSelectorList.h;  TSelectorScalar.h;  TTree.h;  TTreeCache.h;  TTreeCacheUnzip.h;  TTreeCloner.h;  TTreeResult.h;  TTreeRow.h;  TTreeSQL.h;  TVirtualIndex.h;  TVirtualTreePlayer.h;  ► src;  TBasket.cxx;  TBasketSQL.cxx;  TBranch.cxx;  TBranchBrowsable.cxx;  TBranchClones.cxx;  TBranchElem,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:96209,Modifiability,variab,variablesMultiClass,96209,ss.h;  deviations.h;  efficiencies.h;  likelihoodrefs.h;  MovieMaker.h;  mvaeffs.h;  mvas.h;  mvasMulticlass.h;  mvaweights.h;  network.h;  paracoor.h;  PlotFoams.h;  probas.h;  regression_averagedevs.h;  rulevis.h;  rulevisCorr.h;  rulevisHists.h;  tmvaglob.h;  TMVAGui.h;  TMVAMultiClassGui.h;  TMVARegGui.h;  variables.h;  variablesMultiClass.h;  LinkDef.h;  ► src;  annconvergencetest.cxx;  BDT.cxx;  BDT_Reg.cxx;  BDTControlPlots.cxx;  BoostControlPlots.cxx;  compareanapp.cxx;  correlations.cxx;  correlationscatters.cxx;  correlationscattersMultiClass.cxx;  correlationsMultiClass.cxx;  CorrGui.cxx;  CorrGuiMultiClass.cxx;  deviations.cxx;  efficiencies.cxx;  likelihoodrefs.cxx;  MovieMaker.cxx;  mvaeffs.cxx;  mvas.cxx;  mvasMulticlass.cxx;  mvaweights.cxx;  network.cxx;  paracoor.cxx;  PlotFoams.cxx;  probas.cxx;  regression_averagedevs.cxx;  rulevis.cxx;  rulevisCorr.cxx;  rulevisHists.cxx;  tmvaglob.cxx;  TMVAGui.cxx;  TMVAMultiClassGui.cxx;  TMVARegGui.cxx;  variables.cxx;  variablesMultiClass.cxx;  ► tree;  ► tree;  ► doc;  ► macros;  entrylist_figure1.C;  entrylist_figure2.C;  entrylistblock_figure1.C;  ► inc;  LinkDef.h;  TBasket.h;  TBasketSQL.h;  TBranch.h;  TBranchBrowsable.h;  TBranchClones.h;  TBranchElement.h;  TBranchObject.h;  TBranchRef.h;  TBranchSTL.h;  TBufferSQL.h;  TChain.h;  TChainElement.h;  TCut.h;  TEntryList.h;  TEntryListArray.h;  TEntryListBlock.h;  TEntryListFromFile.h;  TEventList.h;  TFriendElement.h;  TIndArray.h;  TLeaf.h;  TLeafB.h;  TLeafC.h;  TLeafD.h;  TLeafElement.h;  TLeafF.h;  TLeafI.h;  TLeafL.h;  TLeafO.h;  TLeafObject.h;  TLeafS.h;  TNtuple.h;  TNtupleD.h;  TQueryResult.h;  TreeUtils.h;  TSelector.h;  TSelectorCint.h;  TSelectorList.h;  TSelectorScalar.h;  TTree.h;  TTreeCache.h;  TTreeCacheUnzip.h;  TTreeCloner.h;  TTreeResult.h;  TTreeRow.h;  TTreeSQL.h;  TVirtualIndex.h;  TVirtualTreePlayer.h;  ► src;  TBasket.cxx;  TBasketSQL.cxx;  TBranch.cxx;  TBranchBrowsable.cxx;  TBranchClones.cxx;  TBranchElement.cxx;  TBranchObje,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:102795,Modifiability,config,configuration,102795," geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usage of ""Default"" geometry alias ;  geom_lhcb.CShows CMS geometry ;  glplot.CPreliminary demo for showing Timur's GL plots in EVE ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourie",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:103560,Modifiability,config,configurations,103560,"ineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C F",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:104377,Modifiability,variab,variables,104377,"implified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a hist",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:106772,Modifiability,config,configurations,106772,"um of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:110279,Modifiability,plugin,plugin,110279,"ic player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.CDrawing a fine tank, using ROOT geometry class ;  xtruDraw.CDraw a ""representative"" TXTRU shape ;  xtruSamples.CDraw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  ► gl;  customcolorgl.h;  glbox.CDisplay a 3D histogram using GL (box option) ;  gldemos.CMenu for running GL demos ;  glh3c.CDisplay a 3D histogram using GL (box option) ;  glparametric.CShow rendering of parametric surfaces ;  glparametrics2.CShow rendering of parametric surfaces ;  glrose.CRender a TF2 looking like a rose ;  glsurfaces.CVarious surfaces rendered with",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:123601,Modifiability,variab,variable,123601,"s ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:129678,Modifiability,adapt,adaptive,129678," mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:152917,Modifiability,variab,variables,152917,Spectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplicati,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:155029,Modifiability,variab,variables,155029,"lysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  h",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:155174,Modifiability,inherit,inheritance,155174,"n the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple T",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:157245,Modifiability,variab,variables,157245,"xample ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a s",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:157415,Modifiability,variab,variable,157415,"mple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:157659,Modifiability,variab,variables,157659,"on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:106631,Performance,perform,performance,106631,"to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  myfit.C Get in memory an histogram from a root file and fit a user defined function ;  NumericalMinimization.C Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers ;  qa2.C Test generation of random numbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first p",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:113832,Performance,perform,perform,113832," basic3d.C Show 3-D polylines and markers ;  canvas.C Example of primitives in a canvas ;  canvas2.C Example of canvas partitioning ;  compile.C This macro produces the flowchart of TFormula::Compile ;  crown.C Draw crowns ;  diamond.C Draw a diamond ;  earth.C This tutorial illustrates the special contour options ;  ellipse.C Draw ellipses ;  eval.C This macro produces the flowchart of TFormula::Eval ;  event.C Illustrate some basic primitives ;  feynman.C Draw Feynman diagrams ;  first.C Show some basic primitives ;  formula1.C Display interpreted functions ;  framework.C An example with basic graphics illustrating the Object Oriented User Interface of ROOT ;  gaxis.C Simple example illustrating how to draw TGaxis objects in various formats ;  gaxis2.C Example illustrating how to draw TGaxis with labels defined by a function ;  gaxis3.C Example illustrating how to modify individual labels of a TGaxis ;  graph_edit_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pav",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:119113,Performance,perform,perform,119113,"ustomContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 cla",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:123722,Performance,perform,performance,123722,"aw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpola",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:131692,Performance,perform,perform,131692,"(TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to separate the signal from the background passing some selection cuts ;  mlpRegression.CThis macro shows the use of an ANN for regression analysis: given a set {i} of input vectors i and a set {o} of output vectors o, one looks for the unknown function f(i)=o ;  ► multicore;  imt001_parBranchProcessing.CDemonstrate how to activate and use the implicit parallelisation of TTree::GetEntry ;  imt101_parTreeProcessing.CIllustrate the usage of the TTreeProcessor::Process method ;  mp001_fillHistos.C Fill histograms in parallel and write them on file ;  mp101_fillNtuples.C Fill n-tuples in distinct workers ;  mp102_readNtuplesFillHistosAndFit.",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:150019,Performance,perform,performing,150019,TestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping filter difference order on the estimated background ;  Background_smooth.C Example to illustrate the background estimator (class TSpectrum) including Compt,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:154879,Performance,perform,performance,154879,"of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:157972,Performance,concurren,concurrentfill,157972,"utorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demo",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:101166,Safety,detect,detector,101166,"s.CScript illustrating the use of transparency with ||-Coord ;  radialgradients.CThis tutorial demonstrates how to use radial gradients, custom colors, transparency ;  transp.CThis demo shows how to use transparency ;  transp_text.CThis macro is based on labels1.C by Rene Brun ;  transparentpad.CThis macro demonstrates semi-transparent pads ;  ► cont;  cnt001_basictseq.C Example showing possible usages of the TSeq class ;  TListAndSTL.C This is an example of using TList with STL algoritms in CLING ;  ► eve;  alice_esd.CComplex example showing ALICE ESD track visualization ;  alice_esd_html_summary.CHtml table and event summary for alice_esd.C ;  alice_esd_split.CComplex example showing ALICE ESD visualization in several views ;  alice_vsd.CComplex example showing ALICE VSD visualization ;  annotation.CDemonstrates usage of TGLAnnotation class ;  arrow.CDemonstrates usage of TEveArrow class ;  arrow_standalone.CHow to use EVE without the standard window ;  assembly.CGeometry detector assembly example ;  box.CDemonstrates usage of TEveBox class ;  boxset.CDemonstrates usage of TEveBoxSet class ;  boxset_cones.CDemonstrates usage of 'cone' mode in TEveBoxSet class ;  calo_detail.CCalorimeter detailed view by using TEveCaloDataVec as data-source ;  calorimeters.CDemonstrates usage of EVE calorimetry classes ;  camera_restore.C;  compound.CDemonstrates usage of EVE compound objects - class TEveCompound ;  csgdemo.CCombinatorial Solid Geometry example ;  geom_alias.CDemonstates usage of geometry aliases - merge ALICE ITS with ATLAS MUON ;  geom_alice_its.CShows geometry of ALICE ITS ;  geom_alice_tpc.CShows geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usag",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:104354,Safety,predict,predictor,104354,"implified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a hist",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:108476,Safety,detect,detector,108476,"erived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:108806,Safety,detect,detector,108806,"utorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many ca",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:108873,Safety,detect,detector,108873,"rray as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:108945,Safety,detect,detector,108945,"rimary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:109008,Safety,detect,detector,109008,"S_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usa",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:109068,Safety,detect,detector,109068,"s a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo pac",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:109714,Safety,detect,detector,109714,"xample ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:138575,Safety,detect,detector,138575,"lled when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:124855,Security,access,access,124855,"stogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:125124,Security,access,access,125124,"TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all objects (including directories) from a source file ;  dirs.C This macro illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type Yo",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:125870,Security,access,access,125870,"er with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all objects (including directories) from a source file ;  dirs.C This macro illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type You must run this tutorial with ACLIC: a dictionary will be automatically created ;  fildir.C This macro displays the ROOT Directory data structure ;  file.C This macro displays the physical ROOT file structure ;  hadd.C Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:133685,Security,authenticat,authentication,133685,"ead n-tuples in distinct workers, fill histograms, merge them and fit ;  mp103_processSelector.C Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:133806,Security,authenticat,authentication,133806," multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallel",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135142,Security,authenticat,authentication,135142,"ns.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic p",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:147796,Security,validat,validates,147796,#801 ;  rf802_mcstudy_addons.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #802 ;  rf803_mcstudy_addons2.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #803 ;  rf804_mcstudy_constr.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #804 ;  rf901_numintconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #901 ;  rf902_numgenconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #902 ;  rf903_numintcache.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #903 ;  ► roostats;  CreateExampleFile.C;  FourBinInstructional.C This example is a generalization of the on/off problem ;  HybridInstructional.C Example demonstrating usage of HybridCalcultor ;  HybridOriginalDemo.C Example on how to use the HybridCalculatorOriginal class ;  HybridStandardForm.C A hypothesis testing example based on number counting with background uncertainty ;  IntervalExamples.C Example showing confidence intervals with four techniques ;  JeffreysPriorDemo.C tutorial demonstrating and validates the RooJeffreysPrior class ;  ModelInspector.CRooStats Model Inspector ;  MultivariateGaussianTest.C Comparison of MCMC and PLC in a multi-variate gaussian problem ;  NuMuToNuE_Oscillation.cxx;  NuMuToNuE_Oscillation.h;  OneSidedFrequentistUpperLimitWithBands.C OneSidedFrequentistUpperLimitWithBands ;  rs101_limitexample.C 'Limit Example' RooStats tutorial macro #101 This tutorial shows an example of creating a simple model for a number counting experiment with uncertainty on both the background rate and signal efficiency ;  rs102_hypotestwithshapes.C rs102_hypotestwithshapes for RooStats project ;  rs301_splot.C SPlot tutorial ;  rs401c_FeldmanCousins.C Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique ;  rs401d_FeldmanCousins.C 'Neutrino Oscillation Example from Feldman & Cousins' ;  rs601_HLFactoryexample.C 'High Level Factory Example' RooStats tutorial macro #601 ;  rs602_HLFactoryCombinationexample.C 'Hig,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153536,Security,validat,validation,153536,"h1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionAppli",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:11430,Testability,test,test,11430,;  LinkDef.h;  TWin32SplashThread.h;  TWinNTSystem.h;  Win32Constants.h;  ► src;  TWin32SplashThread.cxx;  TWinNTSystem.cxx;  Win32Splash.cxx;  ► documentation;  ► doxygen;  ► dataset;  ► weights;  TMVAClassification_BDT.class.C;  TMVAClassification_Cuts.class.C;  TMVAClassification_CutsD.class.C;  TMVAClassification_FDA_GA.class.C;  TMVAClassification_KNN.class.C;  TMVAClassification_LD.class.C;  TMVAClassification_Likelihood.class.C;  TMVAClassification_LikelihoodPCA.class.C;  TMVAClassification_MLPBNN.class.C;  TMVAClassification_PDEFoam.class.C;  TMVAClassification_PDERS.class.C;  TMVAClassification_RuleFit.class.C;  TMVAClassification_SVM.class.C;  TMVAClassificationCategory_Fisher.class.C;  TMVAClassificationCategory_Likelihood.class.C;  TMVAMulticlass_BDTG.class.C;  TMVAMulticlass_MLP.class.C;  ► datasetBkg0;  ► weights;  TMVAMultiBkg0_BDTG.class.C;  ► datasetBkg1;  ► weights;  TMVAMultiBkg1_BDTG.class.C;  ► datasetBkg2;  ► weights;  TMVAMultiBkg2_BDTG.class.C;  MDF.C;  pca.C;  test.py;  ► geom;  ► gdml;  ► inc;  LinkDef.h;  TGDMLParse.h;  TGDMLWrite.h;  ► src;  TGDMLParse.cxx;  TGDMLWrite.cxx;  ROOTwriter.py;  writer.py;  ► geocad;  ► inc;  LinkDef.h;  TGeoToOCC.h;  TGeoToStep.h;  TOCCToStep.h;  ► src;  TGeoToOCC.cxx;  TGeoToStep.cxx;  TOCCToStep.cxx;  ► geom;  ► inc;  LinkDef.h;  LinkDef1.h;  LinkDef2.h;  TGeoArb8.h;  TGeoAtt.h;  TGeoBBox.h;  TGeoBoolNode.h;  TGeoBranchArray.h;  TGeoBuilder.h;  TGeoCache.h;  TGeoCompositeShape.h;  TGeoCone.h;  TGeoElement.h;  TGeoEltu.h;  TGeoExtension.h;  TGeoGlobalMagField.h;  TGeoHalfSpace.h;  TGeoHelix.h;  TGeoHype.h;  TGeoManager.h;  TGeoMaterial.h;  TGeoMatrix.h;  TGeoMedium.h;  TGeoNavigator.h;  TGeoNode.h;  TGeoPara.h;  TGeoParaboloid.h;  TGeoParallelWorld.h;  TGeoPatternFinder.h;  TGeoPcon.h;  TGeoPgon.h;  TGeoPhysicalNode.h;  TGeoPolygon.h;  TGeoRCPtr.h;  TGeoScaledShape.h;  TGeoShape.h;  TGeoShapeAssembly.h;  TGeoSphere.h;  TGeoStateInfo.h;  TGeoTorus.h;  TGeoTrd1.h;  TGeoTrd2.h;  TGeoTube.h;  TGeoUniformMagField.,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:27419,Testability,test,test,27419,LSAFrame.cxx;  TGLSAViewer.cxx;  TGLScaleManip.cxx;  TGLScene.cxx;  TGLSceneBase.cxx;  TGLSceneInfo.cxx;  TGLScenePad.cxx;  TGLSelectBuffer.cxx;  TGLSelectRecord.cxx;  TGLSphere.cxx;  TGLStopwatch.cxx;  TGLSurfacePainter.cxx;  TGLText.cxx;  TGLTF3Painter.cxx;  TGLTH3Composition.cxx;  TGLTransManip.cxx;  TGLUtil.cxx;  TGLViewer.cxx;  TGLViewerBase.cxx;  TGLViewerEditor.cxx;  TGLVoxelPainter.cxx;  TGLWidget.cxx;  TH2GL.cxx;  TH3GL.cxx;  TKDEAdapter.cxx;  TKDEFGT.cxx;  TPointSet3DGL.cxx;  TX11GL.cxx;  ► gviz3d;  ► inc;  LinkDef.h;  TStructNode.h;  TStructNodeEditor.h;  TStructNodeProperty.h;  TStructViewer.h;  TStructViewerGUI.h;  ► src;  TStructNode.cxx;  TStructNodeEditor.cxx;  TStructNodeProperty.cxx;  TStructViewer.cxx;  TStructViewerGUI.cxx;  ► gui;  ► fitpanel;  ► inc;  LinkDef.h;  TAdvancedGraphicsDialog.h;  TFitEditor.h;  TFitParametersDialog.h;  TTreeInput.h;  ► src;  CommonDefs.h;  TAdvancedGraphicsDialog.cxx;  TFitEditor.cxx;  TFitParametersDialog.cxx;  TTreeInput.cxx;  ► test;  UnitTesting.cxx;  ► ged;  ► inc;  HelpSMText.h;  LinkDef.h;  TArrowEditor.h;  TAttFillEditor.h;  TAttLineEditor.h;  TAttMarkerEditor.h;  TAttTextEditor.h;  TAxisEditor.h;  TCurlyArcEditor.h;  TCurlyLineEditor.h;  TF1Editor.h;  TFrameEditor.h;  TFunctionParametersDialog.h;  TGedEditor.h;  TGedFrame.h;  TGedMarkerSelect.h;  TGedPatternSelect.h;  TGraphEditor.h;  TH1Editor.h;  TH2Editor.h;  TLineEditor.h;  TPadEditor.h;  TPaveStatsEditor.h;  TPieEditor.h;  TPieSliceEditor.h;  TStyleDialog.h;  TStyleManager.h;  TStylePreview.h;  TTextEditor.h;  ► src;  HelpSMText.cxx;  TArrowEditor.cxx;  TAttFillEditor.cxx;  TAttLineEditor.cxx;  TAttMarkerEditor.cxx;  TAttTextEditor.cxx;  TAxisEditor.cxx;  TCurlyArcEditor.cxx;  TCurlyLineEditor.cxx;  TF1Editor.cxx;  TFrameEditor.cxx;  TFunctionParametersDialog.cxx;  TGedEditor.cxx;  TGedFrame.cxx;  TGedMarkerSelect.cxx;  TGedPatternSelect.cxx;  TGraphEditor.cxx;  TH1Editor.cxx;  TH2Editor.cxx;  TLineEditor.cxx;  TPadEditor.cxx;  TPaveStatsEditor.cxx;  TPi,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:32842,Testability,test,test,32842, inc;  LinkDef.h;  TGuiBldDragManager.h;  TGuiBldEditor.h;  TGuiBldGeometryFrame.h;  TGuiBldHintsButton.h;  TGuiBldHintsEditor.h;  TGuiBldNameFrame.h;  TRootGuiBuilder.h;  ► src;  TGuiBldDragManager.cxx;  TGuiBldEditor.cxx;  TGuiBldGeometryFrame.cxx;  TGuiBldHintsButton.cxx;  TGuiBldHintsEditor.cxx;  TGuiBldNameFrame.cxx;  TRootGuiBuilder.cxx;  ► guihtml;  ► inc;  LinkDef.h;  TGHtml.h;  TGHtmlBrowser.h;  TGHtmlTokens.h;  TGHtmlUri.h;  ► src;  TGHtml.cxx;  TGHtmlBrowser.cxx;  TGHtmlDraw.cxx;  TGHtmlElement.cxx;  TGHtmlForm.cxx;  TGHtmlImage.cxx;  TGHtmlIndex.cxx;  TGHtmlLayout.cxx;  TGHtmlParse.cxx;  TGHtmlSizer.cxx;  TGHtmlTable.cxx;  TGHtmlTokenMap.cxx;  TGHtmlUri.cxx;  ► qtgsi;  ► inc;  LinkDef.h;  TQApplication.h;  TQCanvasImp.h;  TQCanvasMenu.h;  TQRootApplication.h;  TQRootCanvas.h;  TQRootDialog.h;  TQRootGuiFactory.h;  ► src;  TQApplication.cxx;  TQCanvasImp.cxx;  TQCanvasMenu.cxx;  TQRootApplication.cxx;  TQRootCanvas.cxx;  TQRootDialog.cxx;  TQRootGuiFactory.cxx;  ► test;  ► example1;  guitest.cpp;  guitest.h;  main.cpp;  qtroot.cpp;  qtroot.h;  ► example2;  main.cpp;  qtrootexample1.ui.h;  ► qtroot;  ► inc;  LinkDef.h;  TQtRootGuiFactory.h;  ► src;  TQtRootGuiFactory.cxx;  ► recorder;  ► inc;  LinkDef.h;  TRecorder.h;  ► src;  TRecorder.cxx;  ► sessionviewer;  ► inc;  LinkDef.h;  TProofProgressDialog.h;  TProofProgressLog.h;  TProofProgressMemoryPlot.h;  TSessionDialogs.h;  TSessionLogView.h;  TSessionViewer.h;  ► src;  TProofProgressDialog.cxx;  TProofProgressLog.cxx;  TProofProgressMemoryPlot.cxx;  TSessionDialogs.cxx;  TSessionLogView.cxx;  TSessionViewer.cxx;  ► hist;  ► hbook;  ► inc;  LinkDef.h;  THbookBranch.h;  THbookFile.h;  THbookKey.h;  THbookTree.h;  ► src;  THbookBranch.cxx;  THbookFile.cxx;  THbookKey.cxx;  THbookTree.cxx;  ► hist;  ► inc;  ► Math;  WrappedMultiTF1.h;  WrappedTF1.h;  ► v5;  TF1Data.h;  TFormula.h;  TFormulaPrimitive.h;  Foption.h;  HFitInterface.h;  LinkDef.h;  TAxis.h;  TAxisModLab.h;  TBackCompFitter.h;  TBinomialEfficiency,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:36326,Testability,test,test,36326,xx;  TGraph2D.cxx;  TGraph2DErrors.cxx;  TGraphAsymmErrors.cxx;  TGraphBentErrors.cxx;  TGraphDelaunay.cxx;  TGraphDelaunay2D.cxx;  TGraphErrors.cxx;  TGraphSmooth.cxx;  TGraphTime.cxx;  TH1.cxx;  TH1K.cxx;  TH1Merger.cxx;  TH1Merger.h;  TH2.cxx;  TH2Poly.cxx;  TH3.cxx;  THLimitsFinder.cxx;  THn.cxx;  THnBase.cxx;  THnSparse.cxx;  THStack.cxx;  TKDE.cxx;  TLimit.cxx;  TLimitDataSource.cxx;  TMultiDimFit.cxx;  TMultiGraph.cxx;  TPolyMarker.cxx;  TPrincipal.cxx;  TProfile.cxx;  TProfile2D.cxx;  TProfile3D.cxx;  TProfileHelper.h;  TSpline.cxx;  TSVDUnfold.cxx;  TUnfold.cxx;  TUnfoldBinning.cxx;  TUnfoldDensity.cxx;  TUnfoldSys.cxx;  TVirtualFitter.cxx;  TVirtualGraphPainter.cxx;  TVirtualHistPainter.cxx;  WrappedTF1.cxx;  ► v7;  ► inc;  ► ROOT;  TAxis.hxx;  THist.hxx;  THistBinIter.hxx;  THistBufferedFill.hxx;  THistConcurrentFill.hxx;  THistData.hxx;  THistDrawable.hxx;  THistDrawOptions.hxx;  THistImpl.hxx;  THistUtils.hxx;  THistView.hxx;  ► src;  TAxis.cxx;  THistDrawable.cxx;  ► test;  speedtest.cxx;  ► histpainter;  ► inc;  Hoption.h;  Hparam.h;  LinkDef.h;  TGraph2DPainter.h;  TGraphPainter.h;  THistPainter.h;  TLego.h;  TPainter3dAlgorithms.h;  TPaletteAxis.h;  ► src;  TGraph2DPainter.cxx;  TGraphPainter.cxx;  THistPainter.cxx;  TPainter3dAlgorithms.cxx;  TPaletteAxis.cxx;  ► v7;  ► src;  THistPainter.cxx;  ► spectrum;  ► inc;  LinkDef.h;  TSpectrum.h;  TSpectrum2.h;  TSpectrum2Fit.h;  TSpectrum2Transform.h;  TSpectrum3.h;  TSpectrumFit.h;  TSpectrumTransform.h;  ► src;  TSpectrum.cxx;  TSpectrum2.cxx;  TSpectrum2Fit.cxx;  TSpectrum2Transform.cxx;  TSpectrum3.cxx;  TSpectrumFit.cxx;  TSpectrumTransform.cxx;  ► spectrumpainter;  ► inc;  LinkDef.h;  TSpectrum2Painter.h;  ► src;  TSpectrum2Painter.cxx;  ► html;  ► doc;  ► macros;  testmacro.C;  ► inc;  LinkDef.h;  TClassDocOutput.h;  TDocDirective.h;  TDocInfo.h;  TDocOutput.h;  TDocParser.h;  THtml.h;  ► src;  TClassDocOutput.cxx;  TDocDirective.cxx;  TDocInfo.cxx;  TDocOutput.cxx;  TDocParser.cxx;  THtml.cxx;  ► ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:37093,Testability,test,testmacro,37093,  TAxis.hxx;  THist.hxx;  THistBinIter.hxx;  THistBufferedFill.hxx;  THistConcurrentFill.hxx;  THistData.hxx;  THistDrawable.hxx;  THistDrawOptions.hxx;  THistImpl.hxx;  THistUtils.hxx;  THistView.hxx;  ► src;  TAxis.cxx;  THistDrawable.cxx;  ► test;  speedtest.cxx;  ► histpainter;  ► inc;  Hoption.h;  Hparam.h;  LinkDef.h;  TGraph2DPainter.h;  TGraphPainter.h;  THistPainter.h;  TLego.h;  TPainter3dAlgorithms.h;  TPaletteAxis.h;  ► src;  TGraph2DPainter.cxx;  TGraphPainter.cxx;  THistPainter.cxx;  TPainter3dAlgorithms.cxx;  TPaletteAxis.cxx;  ► v7;  ► src;  THistPainter.cxx;  ► spectrum;  ► inc;  LinkDef.h;  TSpectrum.h;  TSpectrum2.h;  TSpectrum2Fit.h;  TSpectrum2Transform.h;  TSpectrum3.h;  TSpectrumFit.h;  TSpectrumTransform.h;  ► src;  TSpectrum.cxx;  TSpectrum2.cxx;  TSpectrum2Fit.cxx;  TSpectrum2Transform.cxx;  TSpectrum3.cxx;  TSpectrumFit.cxx;  TSpectrumTransform.cxx;  ► spectrumpainter;  ► inc;  LinkDef.h;  TSpectrum2Painter.h;  ► src;  TSpectrum2Painter.cxx;  ► html;  ► doc;  ► macros;  testmacro.C;  ► inc;  LinkDef.h;  TClassDocOutput.h;  TDocDirective.h;  TDocInfo.h;  TDocOutput.h;  TDocParser.h;  THtml.h;  ► src;  TClassDocOutput.cxx;  TDocDirective.cxx;  TDocInfo.cxx;  TDocOutput.cxx;  TDocParser.cxx;  THtml.cxx;  ► io;  ► castor;  ► inc;  LinkDef.h;  TCastorFile.h;  ► src;  TCastorFile.cxx;  ► chirp;  ► inc;  LinkDef.h;  TChirpFile.h;  ► src;  TChirpFile.cxx;  ► dcache;  ► inc;  LinkDef.h;  TDCacheFile.h;  ► src;  TDCacheFile.cxx;  ► gfal;  ► inc;  LinkDef.h;  TGFALFile.h;  ► src;  TGFALFile.cxx;  ► hdfs;  ► inc;  LinkDef.h;  THDFSFile.h;  ► src;  THDFSFile.cxx;  ► io;  ► inc;  LinkDef.h;  TArchiveFile.h;  TBufferFile.h;  TBufferJSON.h;  TCollectionProxyFactory.h;  TContainerConverters.h;  TDirectoryFile.h;  TEmulatedCollectionProxy.h;  TEmulatedMapProxy.h;  TFile.h;  TFileCacheRead.h;  TFileCacheWrite.h;  TFileMerger.h;  TFilePrefetch.h;  TFPBlock.h;  TFree.h;  TGenCollectionProxy.h;  TGenCollectionStreamer.h;  TKey.h;  TKeyMapFile.h;  TLockFile.h;  ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:40269,Testability,test,test,40269,ile.h;  TXMLPlayer.h;  TXMLSetup.h;  ► src;  TBufferXML.cxx;  TKeyXML.cxx;  TXMLEngine.cxx;  TXMLFile.cxx;  TXMLPlayer.cxx;  TXMLSetup.cxx;  ► xmlparser;  ► inc;  LinkDef.h;  TDOMParser.h;  TSAXParser.h;  TXMLAttr.h;  TXMLDocument.h;  TXMLNode.h;  TXMLParser.h;  ► src;  TDOMParser.cxx;  TSAXParser.cxx;  TXMLAttr.cxx;  TXMLDocument.cxx;  TXMLNode.cxx;  TXMLParser.cxx;  ► math;  ► fftw;  ► inc;  LinkDef.h;  TFFTComplex.h;  TFFTComplexReal.h;  TFFTReal.h;  TFFTRealComplex.h;  ► src;  TFFTComplex.cxx;  TFFTComplexReal.cxx;  TFFTReal.cxx;  TFFTRealComplex.cxx;  ► foam;  ► inc;  LinkDef.h;  TFoam.h;  TFoamCell.h;  TFoamIntegrand.h;  TFoamMaxwt.h;  TFoamSampler.h;  TFoamVect.h;  ► src;  TFoam.cxx;  TFoamCell.cxx;  TFoamIntegrand.cxx;  TFoamMaxwt.cxx;  TFoamSampler.cxx;  TFoamVect.cxx;  ► fumili;  ► inc;  LinkDef.h;  TFumili.h;  TFumiliMinimizer.h;  ► src;  TFumili.cxx;  TFumiliMinimizer.cxx;  ► genetic;  ► inc;  ► Math;  GeneticMinimizer.h;  LinkDef.h;  ► src;  GeneticMinimizer.cxx;  ► test;  GAMinTutorial.cxx;  testGAMinimizer.cxx;  timeGA.cxx;  ► genvector;  ► inc;  ► Math;  ► GenVector;  3DConversions.h;  3DDistances.h;  AxisAngle.h;  AxisAnglefwd.h;  BitReproducible.h;  Boost.h;  Boostfwd.h;  BoostX.h;  BoostXfwd.h;  BoostY.h;  BoostYfwd.h;  BoostZ.h;  BoostZfwd.h;  Cartesian2D.h;  Cartesian2Dfwd.h;  Cartesian3D.h;  Cartesian3Dfwd.h;  CoordinateSystemTags.h;  Cylindrical3D.h;  Cylindrical3Dfwd.h;  CylindricalEta3D.h;  CylindricalEta3Dfwd.h;  DisplacementVector2D.h;  DisplacementVector2Dfwd.h;  DisplacementVector3D.h;  DisplacementVector3Dfwd.h;  eta.h;  etaMax.h;  EulerAngles.h;  EulerAnglesfwd.h;  GenVector_exception.h;  GenVectorIO.h;  LorentzRotation.h;  LorentzRotationfwd.h;  LorentzVector.h;  LorentzVectorfwd.h;  Plane3D.h;  Polar2D.h;  Polar2Dfwd.h;  Polar3D.h;  Polar3Dfwd.h;  PositionVector2D.h;  PositionVector2Dfwd.h;  PositionVector3D.h;  PositionVector3Dfwd.h;  PtEtaPhiE4D.h;  PtEtaPhiE4Dfwd.h;  PtEtaPhiM4D.h;  PtEtaPhiM4Dfwd.h;  PxPyPzE4D.h;  PxPyPzE4Dfwd.h; ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:40296,Testability,test,testGAMinimizer,40296,LSetup.h;  ► src;  TBufferXML.cxx;  TKeyXML.cxx;  TXMLEngine.cxx;  TXMLFile.cxx;  TXMLPlayer.cxx;  TXMLSetup.cxx;  ► xmlparser;  ► inc;  LinkDef.h;  TDOMParser.h;  TSAXParser.h;  TXMLAttr.h;  TXMLDocument.h;  TXMLNode.h;  TXMLParser.h;  ► src;  TDOMParser.cxx;  TSAXParser.cxx;  TXMLAttr.cxx;  TXMLDocument.cxx;  TXMLNode.cxx;  TXMLParser.cxx;  ► math;  ► fftw;  ► inc;  LinkDef.h;  TFFTComplex.h;  TFFTComplexReal.h;  TFFTReal.h;  TFFTRealComplex.h;  ► src;  TFFTComplex.cxx;  TFFTComplexReal.cxx;  TFFTReal.cxx;  TFFTRealComplex.cxx;  ► foam;  ► inc;  LinkDef.h;  TFoam.h;  TFoamCell.h;  TFoamIntegrand.h;  TFoamMaxwt.h;  TFoamSampler.h;  TFoamVect.h;  ► src;  TFoam.cxx;  TFoamCell.cxx;  TFoamIntegrand.cxx;  TFoamMaxwt.cxx;  TFoamSampler.cxx;  TFoamVect.cxx;  ► fumili;  ► inc;  LinkDef.h;  TFumili.h;  TFumiliMinimizer.h;  ► src;  TFumili.cxx;  TFumiliMinimizer.cxx;  ► genetic;  ► inc;  ► Math;  GeneticMinimizer.h;  LinkDef.h;  ► src;  GeneticMinimizer.cxx;  ► test;  GAMinTutorial.cxx;  testGAMinimizer.cxx;  timeGA.cxx;  ► genvector;  ► inc;  ► Math;  ► GenVector;  3DConversions.h;  3DDistances.h;  AxisAngle.h;  AxisAnglefwd.h;  BitReproducible.h;  Boost.h;  Boostfwd.h;  BoostX.h;  BoostXfwd.h;  BoostY.h;  BoostYfwd.h;  BoostZ.h;  BoostZfwd.h;  Cartesian2D.h;  Cartesian2Dfwd.h;  Cartesian3D.h;  Cartesian3Dfwd.h;  CoordinateSystemTags.h;  Cylindrical3D.h;  Cylindrical3Dfwd.h;  CylindricalEta3D.h;  CylindricalEta3Dfwd.h;  DisplacementVector2D.h;  DisplacementVector2Dfwd.h;  DisplacementVector3D.h;  DisplacementVector3Dfwd.h;  eta.h;  etaMax.h;  EulerAngles.h;  EulerAnglesfwd.h;  GenVector_exception.h;  GenVectorIO.h;  LorentzRotation.h;  LorentzRotationfwd.h;  LorentzVector.h;  LorentzVectorfwd.h;  Plane3D.h;  Polar2D.h;  Polar2Dfwd.h;  Polar3D.h;  Polar3Dfwd.h;  PositionVector2D.h;  PositionVector2Dfwd.h;  PositionVector3D.h;  PositionVector3Dfwd.h;  PtEtaPhiE4D.h;  PtEtaPhiE4Dfwd.h;  PtEtaPhiM4D.h;  PtEtaPhiM4Dfwd.h;  PxPyPzE4D.h;  PxPyPzE4Dfwd.h;  PxPyPzM4D.h;  PxPyPzM4Df,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:42768,Testability,test,test,42768,_GenVector2.h;  LinkDef_GenVector32.h;  LinkDef_GenVectorAll.h;  LinkDef_Point3D.h;  LinkDef_Rotation.h;  LinkDef_Vector3D.h;  LinkDef_Vector4D.h;  LorentzRotation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMin,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:42911,Testability,test,testBoost,42911,or4D.h;  LorentzRotation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinder,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:42927,Testability,test,testGenVector,42927,tation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:42947,Testability,test,testIterator,42947,ector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCG,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:42966,Testability,test,testVectorIO,42966,;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Plane3D.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  Transform3D.cxx;  Translation3D.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  BinPoint.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVector.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCGEngine.h;  Math.h; ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46120,Testability,test,test,46120,Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h; ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46231,Testability,test,testFit,46231,enAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSL,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46245,Testability,test,testFitPerf,46245,x;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  G,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46263,Testability,test,testGraphFit,46263,Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46282,Testability,test,testMinim,46282,ntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46298,Testability,test,testRooFit,46298,.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationT,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46461,Testability,test,testAnalyticalIntegrals,46461, mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNu,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46491,Testability,test,testBinarySearch,46491,xmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRoot,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46514,Testability,test,testDistSampler,46514,xmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFuncti,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46536,Testability,test,testIntegration,46536,c;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46558,Testability,test,testIntegrationMultiDim,46558,ixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantF,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46588,Testability,test,testkdTreeBinning,46588,MaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46612,Testability,test,testMathRandom,46612, MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorith,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46633,Testability,test,testRootFinder,46633,cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMo,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46654,Testability,test,testSampleQuantiles,46654,cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  Vavi,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46680,Testability,test,testSortOrder,46680,xx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  Vavilov,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46700,Testability,test,testSpecFuncBeta,46700,.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  Vavilo,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46723,Testability,test,testSpecFuncBetaI,46723,.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  Vavilo,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46747,Testability,test,testSpecFuncErf,46747,cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  V,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46769,Testability,test,testSpecFuncGamma,46769,or.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46793,Testability,test,testSpecFuncSiCi,46793,;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cblas.cxx;  ChebyshevApp,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46816,Testability,test,testTMath,46816,SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cblas.cxx;  ChebyshevApprox.cxx;  complex_q,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:46832,Testability,test,testTStatistic,46832,;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  VavilovAccurateQuantile.h;  VavilovFast.h;  ► src;  cblas.cxx;  ChebyshevApprox.cxx;  complex_quartic.h;  Derivato,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49102,Testability,test,test,49102,Minimizer.cxx;  GSLMinimizer1D.cxx;  GSLMonteFunctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMa,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49148,Testability,test,testChebyshev,49148,unctionAdapter.h;  GSLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49168,Testability,test,testDerivation,49168,SLMonteFunctionWrapper.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49189,Testability,test,testFunctor,49189,er.h;  GSLMultiFit.h;  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h; ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49207,Testability,test,testGSLIntegration,49207,  GSLMultiFitFunctionAdapter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TM,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49232,Testability,test,testGSLRootFinder,49232,ter.h;  GSLMultiFitFunctionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSy,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49256,Testability,test,testInterpolation,49256,ionWrapper.h;  GSLMultiMinFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTU,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49280,Testability,test,testMCIntegration,49280,inFunctionAdapter.h;  GSLMultiMinFunctionWrapper.h;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVe,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49329,Testability,test,testMultiRootFinder,49329,;  GSLMultiMinimizer.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49355,Testability,test,testPermute,49355,;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TV,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49373,Testability,test,testQuasiRandom,49373,r.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  T,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49395,Testability,test,testRandom,49395,tFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDe,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49412,Testability,test,testRandomDist,49412,  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecom,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49433,Testability,test,testSpecFunc,49433,onWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompL,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49452,Testability,test,testStatFunc,49452,ltiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:49471,Testability,test,testVavilov,49471,SLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngROOTWrapper.h;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  TDecompBase.cxx;  TDecompBK.cxx;  TDecompChol.cxx;  TDecompLU.cxx;  TDecompQRH.cxx;  TDecompSpars,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:54842,Testability,test,test,54842,x;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLo,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:55316,Testability,test,testMinimizer,55316,erParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:55336,Testability,test,testNdimFit,55336,MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQp,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:55354,Testability,test,testUnbinGausFit,55354,.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpL,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:55377,Testability,test,testUserFunc,55377,mation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cxx;  TQ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57271,Testability,test,test,57271,;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cxx;  TQpLinSolverDens.cxx;  TQpLinSolverSparse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57382,Testability,test,testInversion,57382,olverDens.cxx;  TQpLinSolverSparse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57402,Testability,test,testIO,57402,TQpLinSolverSparse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx; ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57415,Testability,test,testKalman,57415,rse.cxx;  TQpProbBase.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktr,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57432,Testability,test,testOperations,57432,se.cxx;  TQpProbDens.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatH,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57453,Testability,test,testSMatrix,57453,.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemSt,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:57932,Testability,test,test,57932, Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:58135,Testability,log,log,58135,atrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.c,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:58212,Testability,test,tests,58212,h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.cxx;  TGenericTable.cxx;  TIndexTable.cxx;  TObjectSet.cxx;  TPoints3D.cxx;  TPoints,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:58489,Testability,test,test,58489,  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemStatHook.cxx;  TMemStatMng.cxx;  ► test;  leak_test.C;  run.C;  ► table;  ► inc;  LinkDef.h;  tableDescriptor.h;  TCernLib.h;  TChair.h;  TColumnView.h;  TDataSet.h;  TDataSetIter.h;  TDsKey.h;  TFileIter.h;  TFileSet.h;  TGenericTable.h;  TIndexTable.h;  TObjectSet.h;  TPoints3D.h;  TPointsArray3D.h;  TPolyLineShape.h;  TResponseTable.h;  TTable.h;  TTable3Points.h;  TTableDescriptor.h;  TTableIter.h;  TTableMap.h;  TTablePadView3D.h;  TTablePoints.h;  TTableSorter.h;  Ttypes.h;  TVolume.h;  TVolumePosition.h;  TVolumeView.h;  TVolumeViewIter.h;  ► src;  TCernLib.cxx;  TChair.cxx;  TColumnView.cxx;  TDataSet.cxx;  TDataSetIter.cxx;  TDsKey.cxx;  TFileIter.cxx;  TFileSet.cxx;  TGenericTable.cxx;  TIndexTable.cxx;  TObjectSet.cxx;  TPoints3D.cxx;  TPointsArray3D.cxx;  TPolyLineShape.cxx;  TResponseTable.cxx;  TTable.cxx;  TTable3Points.cxx;  TTableDescriptor.cxx;  TTableIter.cxx;  TTableMap.cxx;  TTablePadView3D.cxx;  TTablePoints.cxx;  TTableSorter.cxx;  TVolume.cxx;  TVolumePosition.cxx;  TVolumeView.cxx;  TVolumeViewIter.c,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:81742,Testability,test,test,81742,x;  RooRealAnalytic.cxx;  RooRealBinding.cxx;  RooRealConstant.cxx;  RooRealIntegral.cxx;  RooRealMPFE.cxx;  RooRealProxy.cxx;  RooRealSumPdf.cxx;  RooRealVar.cxx;  RooRealVarSharedProperties.cxx;  RooRecursiveFraction.cxx;  RooRefCountList.cxx;  RooResolutionModel.cxx;  RooScaledFunc.cxx;  RooSecondMoment.cxx;  RooSegmentedIntegrator1D.cxx;  RooSegmentedIntegrator2D.cxx;  RooSentinel.cxx;  RooSetPair.cxx;  RooSetProxy.cxx;  RooSharedProperties.cxx;  RooSharedPropertiesList.cxx;  RooSimGenContext.cxx;  RooSimPdfBuilder.cxx;  RooSimSplitGenContext.cxx;  RooSimultaneous.cxx;  RooSimWSTool.cxx;  RooStreamParser.cxx;  RooStringVar.cxx;  RooStudyManager.cxx;  RooStudyPackage.cxx;  RooSuperCategory.cxx;  RooTable.cxx;  RooTFoamBinding.cxx;  RooThreshEntry.cxx;  RooThresholdCategory.cxx;  RooTObjWrap.cxx;  RooTrace.cxx;  RooTreeData.cxx;  RooTreeDataStore.cxx;  RooTruthModel.cxx;  RooUniformBinning.cxx;  RooUnitTest.cxx;  RooVectorDataStore.cxx;  RooWorkspace.cxx;  RooXYChi2Var.cxx;  ► test;  rf101_basics.cxx;  rf102_dataimport.cxx;  rf103_interprfuncs.cxx;  rf105_funcbinding.cxx;  rf108_plotbinning.cxx;  rf109_chi2residpull.cxx;  rf110_normintegration.cxx;  rf111_numintconfig.cxx;  rf201_composite.cxx;  rf202_extendedmlfit.cxx;  rf203_ranges.cxx;  rf204_extrangefit.cxx;  rf205_compplot.cxx;  rf208_convolution.cxx;  rf209_anaconv.cxx;  rf301_composition.cxx;  rf302_utilfuncs.cxx;  rf303_conditional.cxx;  rf304_uncorrprod.cxx;  rf305_condcorrprod.cxx;  rf306_condpereventerrors.cxx;  rf307_fullpereventerrors.cxx;  rf308_normintegration2d.cxx;  rf310_sliceplot.cxx;  rf311_rangeplot.cxx;  rf312_multirangefit.cxx;  rf313_paramranges.cxx;  rf314_paramfitrange.cxx;  rf316_llratioplot.cxx;  rf402_datahandling.cxx;  rf403_weightedevts.cxx;  rf404_categories.cxx;  rf405_realtocatfuncs.cxx;  rf406_cattocatfuncs.cxx;  rf501_simultaneouspdf.cxx;  rf599_wspacepersist.cxx;  rf601_intminuit.cxx;  rf602_chi2fit.cxx;  rf604_constraints.cxx;  rf605_profilell.cxx;  rf606_nllerrorhandling.cxx;,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:87057,Testability,test,test,87057,cxx;  TODBCStatement.cxx;  ► oracle;  ► inc;  LinkDef.h;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  LinkDef.h;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  LinkDef.h;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  LinkDef.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyKerasClassification.C;  testPyKerasRegression.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  LinkDef.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:87083,Testability,test,testPyKerasClassification,87083,racle;  ► inc;  LinkDef.h;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  LinkDef.h;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  LinkDef.h;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  LinkDef.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyKerasClassification.C;  testPyKerasRegression.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  LinkDef.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:87113,Testability,test,testPyKerasRegression,87113,TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  LinkDef.h;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  LinkDef.h;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  LinkDef.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyKerasClassification.C;  testPyKerasRegression.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  LinkDef.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  GeneticAlgorithm.h;  Genetic,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:87349,Testability,test,test,87349,h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  LinkDef.h;  TSQLiteResult.h;  TSQLiteRow.h;  TSQLiteServer.h;  TSQLiteStatement.h;  ► src;  TSQLiteResult.cxx;  TSQLiteRow.cxx;  TSQLiteServer.cxx;  TSQLiteStatement.cxx;  ► tmva;  ► pymva;  ► inc;  ► TMVA;  MethodPyAdaBoost.h;  MethodPyGTB.h;  MethodPyKeras.h;  MethodPyRandomForest.h;  PyMethodBase.h;  LinkDef.h;  ► src;  MethodPyAdaBoost.cxx;  MethodPyGTB.cxx;  MethodPyKeras.cxx;  MethodPyRandomForest.cxx;  PyMethodBase.cxx;  ► test;  Classification.C;  testPyKerasClassification.C;  testPyKerasRegression.C;  ► rmva;  ► inc;  ► TMVA;  MethodC50.h;  MethodRSNNS.h;  MethodRSVM.h;  MethodRXGB.h;  RMethodBase.h;  LinkDef.h;  ► src;  MethodC50.cxx;  MethodRSNNS.cxx;  MethodRSVM.cxx;  MethodRXGB.cxx;  RMethodBase.cxx;  ► test;  Classification.C;  ► tmva;  ► inc;  ► TMVA;  ► DNN;  ► Architectures;  ► Cpu;  Blas.h;  CpuBuffer.h;  CpuMatrix.h;  ► Cuda;  CudaBuffers.h;  CudaMatrix.h;  Device.h;  Cpu.h;  Cuda.h;  Reference.h;  DataLoader.h;  Functions.h;  Layer.h;  Minimizers.h;  Net.h;  BDTEventWrapper.h;  BinarySearchTree.h;  BinarySearchTreeNode.h;  BinaryTree.h;  CCPruner.h;  CCTreeWrapper.h;  ClassifierFactory.h;  ClassInfo.h;  Config.h;  Configurable.h;  ConvergenceTest.h;  CostComplexityPruneTool.h;  CrossEntropy.h;  CrossValidation.h;  DataInputHandler.h;  DataLoader.h;  DataSet.h;  DataSetFactory.h;  DataSetInfo.h;  DataSetManager.h;  DecisionTree.h;  DecisionTreeNode.h;  Envelope.h;  Event.h;  ExpectedErrorPruneTool.h;  Factory.h;  FitterBase.h;  GeneticAlgorithm.h;  GeneticFitter.h;  GeneticGenes.h;  GeneticPopulation.h;  GeneticRange.h;  GiniIndex.h;  GiniIndexWithLaplace.h;  HyperParameterOptimisation.h;  IFitterTarget.h;  IMethod.h;  Interval.h;  IPruneTool.h;  KDEKernel.h;  LDA.h;  LogInterval.h;  L,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:94214,Testability,test,test,94214,.cxx;  RuleCut.cxx;  RuleEnsemble.cxx;  RuleFit.cxx;  RuleFitAPI.cxx;  RuleFitParams.cxx;  SdivSqrtSplusB.cxx;  SeparationBase.cxx;  SimulatedAnnealing.cxx;  SimulatedAnnealingFitter.cxx;  SVEvent.cxx;  SVKernelFunction.cxx;  SVKernelMatrix.cxx;  SVWorkingSet.cxx;  TActivation.cxx;  TActivationChooser.cxx;  TActivationIdentity.cxx;  TActivationRadial.cxx;  TActivationReLU.cxx;  TActivationSigmoid.cxx;  TActivationTanh.cxx;  Timer.cxx;  TNeuron.cxx;  TNeuronInput.cxx;  TNeuronInputAbs.cxx;  TNeuronInputChooser.cxx;  TNeuronInputSqSum.cxx;  TNeuronInputSum.cxx;  Tools.cxx;  TransformationHandler.cxx;  TSpline1.cxx;  TSpline2.cxx;  TSynapse.cxx;  Types.cxx;  VariableDecorrTransform.cxx;  VariableGaussTransform.cxx;  VariableIdentityTransform.cxx;  VariableImportance.cxx;  VariableInfo.cxx;  VariableNormalizeTransform.cxx;  VariablePCATransform.cxx;  VariableRearrangeTransform.cxx;  VariableTransform.cxx;  VariableTransformBase.cxx;  VarTransformHandler.cxx;  Volume.cxx;  ► test;  ► DNN;  TestActivationFunctions.cxx;  TestActivationFunctions.h;  TestActivationFunctionsCpu.cxx;  TestActivationFunctionsCuda.cxx;  TestBackpropagation.cxx;  TestBackpropagation.h;  TestBackpropagationCpu.cxx;  TestBackpropagationCuda.cxx;  TestCuda.cxx;  TestDataLoader.cxx;  TestDataLoader.h;  TestDataLoaderCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviati,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:105917,Testability,test,test,105917,"llipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitter directly ;  fitLinearRobust.C This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers ;  fitMultiGraph.C fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  fitNormSum.C Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  fitpanel_playback.CThis file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit ;  fitslicesy.C Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads ;  FittingDemo.C Example for fitting signal/background ;  graph2dfit.C Fitting a TGraph2D ;  Ifit.C Example of a program to fit non-equidistant data points ;  langaus.C Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  line3Dfit.C Fitting of a TGraph2D with a 3D straight line ;  minuit2FitBench.C Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits ;  minuit2FitBench2D.C ;  minuit2GausFit.C Perform fits with different configurations using Minuit2 ;  multidimfit.C Multi-Dimensional Parametrisation and Fitting ;  multifit.C Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:114923,Testability,test,testing,114923,"tex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphAp",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115002,Testability,test,testing,115002," as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  gr",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115579,Testability,test,test,115579,"illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:116674,Testability,test,test,116674,"iongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows t",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:117361,Testability,log,log,117361,"h point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  e",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:118960,Testability,test,test,118960,"ton attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:122758,Testability,log,logscales,122758,"s definition ;  ContourList.C Getting Contours From TH2D ;  cumulative.C Illustrate use of the TH1::GetCumulative method ;  draw2dopt.C Display the various 2-d drawing options ;  DynamicSlice.C Show the slice of a TH2 following the mouse position ;  exec1.CEcho object at mouse position ;  exec2.CEcho object at mouse position and show a graphics line ;  Fibonacci.C A TH2Poly build with Fibonacci numbers ;  fillrandom.C Fill a 1-D histogram from a parametric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  greyscale.C Create grey scale of 200 x 200 boxes ;  h1draw.C 1-D histogram drawing options ;  hbars.C Example of bar charts with 1-d histograms ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:122801,Testability,log,log,122801,"rs From TH2D ;  cumulative.C Illustrate use of the TH1::GetCumulative method ;  draw2dopt.C Display the various 2-d drawing options ;  DynamicSlice.C Show the slice of a TH2 following the mouse position ;  exec1.CEcho object at mouse position ;  exec2.CEcho object at mouse position and show a graphics line ;  Fibonacci.C A TH2Poly build with Fibonacci numbers ;  fillrandom.C Fill a 1-D histogram from a parametric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  greyscale.C Create grey scale of 200 x 200 boxes ;  h1draw.C 1-D histogram drawing options ;  hbars.C Example of bar charts with 1-d histograms ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:123861,Testability,test,testSmooth,123861,"D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:126984,Testability,test,testMergeCont,126984, ► io;  copyFiles.C Example of script showing how to copy all objects (including directories) from a source file ;  dirs.C This macro illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type You must run this tutorial with ACLIC: a dictionary will be automatically created ;  fildir.C This macro displays the ROOT Directory data structure ;  file.C This macro displays the physical ROOT file structure ;  hadd.C Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C E,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:127393,Testability,test,test,127393," to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mat",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:128642,Testability,test,testing,128642,"ions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mathBeta.C Test the TMath::BetaDist and TMath::BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating automatic dictionary generation and I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:130643,Testability,test,testrandom,130643,"place.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov dist",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:130668,Testability,test,test,130668,"egral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5b.C ;  testUnfold5c.C Version 17.0 example for multi-dimensional unfolding ;  testUnfold5d.C Version 17.0 example for multi-dimensional unfolding ;  tStudent.C Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to com",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:133680,Testability,test,test,133680,"ead n-tuples in distinct workers, fill histograms, merge them and fit ;  mp103_processSelector.C Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:133801,Testability,test,test,133801," multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallel",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:134876,Testability,test,test,134876,"ipt shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold informati",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:134926,Testability,test,test,134926,"hat can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  Proo",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135137,Testability,test,test,135137,"ns.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic p",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135180,Testability,test,testTUDPSocket,135180,"ns.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic p",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135199,Testability,test,test,135199,"producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector t",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135363,Testability,test,test,135363,"n accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:135490,Testability,test,test,135490,"er that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSel",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:137117,Testability,test,test,137117,"ent ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This p",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:137185,Testability,test,test,137185,"oofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:137366,Testability,benchmark,benchmarks,137366,"es containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:137383,Testability,benchmark,benchmarks,137383,"ds.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and erro",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:139014,Testability,benchmark,benchmarks,139014," Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEopti",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:139234,Testability,benchmark,benchmarks,139234,"g how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the funct",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:139432,Testability,test,test,139432,";  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures ma",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:139575,Testability,log,log,139575,ctor ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference to a Pentium IV 2.4 Ghz (with 512 MBytes memory and 120 GBytes IDE disk) taken by definition as 600 ROOTMARKS in batch mode in executing python benchmarks.py ;  shapes.py Draw the geometry using the x3d viewver ;  staff.py example of macro to read data from an ascii file and create a root file with a Tree ;  surfaces.py Surfaces example ;  test.py ;  tornado.pyTornado example ;  tree.py This macro displays the Tree data structures ;  zdemo.py This macro is an example of graphs in log scales with annotations ;  ► pythia;  pythia8.CPythia8 basic example ;  pythiaExample.CUsing Pythia6 with ROOT ;  ► quadp;  portfolio.C This macro shows in detail the use of the quadratic programming package quadp ;  Quad.cxx;  Quad.h;  ► r;  DataFrame.C ;  example.C Simple example on how to use ROOT-R interface ;  Function.C ;  Functor.C Example to create class Functor ;  GlobalMinimization.C Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example ;  Integration.C Numerical integration using R passing the function from ROOT ;  Interpolation.C More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment ;  Minimization.C Example based in http://root.cern.ch/root/html/tutorials/fit/NumericalMinimization.C.html http://stat.ethz.ch/R-manua,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:147597,Testability,test,testing,147597,C 'SPECIAL PDFS' RooFit tutorial macro #707 ;  rf708_bphysics.C 'SPECIAL PDFS' RooFit tutorial macro #708 ;  rf801_mcstudy.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #801 ;  rf802_mcstudy_addons.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #802 ;  rf803_mcstudy_addons2.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #803 ;  rf804_mcstudy_constr.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #804 ;  rf901_numintconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #901 ;  rf902_numgenconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #902 ;  rf903_numintcache.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #903 ;  ► roostats;  CreateExampleFile.C;  FourBinInstructional.C This example is a generalization of the on/off problem ;  HybridInstructional.C Example demonstrating usage of HybridCalcultor ;  HybridOriginalDemo.C Example on how to use the HybridCalculatorOriginal class ;  HybridStandardForm.C A hypothesis testing example based on number counting with background uncertainty ;  IntervalExamples.C Example showing confidence intervals with four techniques ;  JeffreysPriorDemo.C tutorial demonstrating and validates the RooJeffreysPrior class ;  ModelInspector.CRooStats Model Inspector ;  MultivariateGaussianTest.C Comparison of MCMC and PLC in a multi-variate gaussian problem ;  NuMuToNuE_Oscillation.cxx;  NuMuToNuE_Oscillation.h;  OneSidedFrequentistUpperLimitWithBands.C OneSidedFrequentistUpperLimitWithBands ;  rs101_limitexample.C 'Limit Example' RooStats tutorial macro #101 This tutorial shows an example of creating a simple model for a number counting experiment with uncertainty on both the background rate and signal efficiency ;  rs102_hypotestwithshapes.C rs102_hypotestwithshapes for RooStats project ;  rs301_splot.C SPlot tutorial ;  rs401c_FeldmanCousins.C Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique ;  rs401d_FeldmanCousins.C 'Neutrin,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:149846,Testability,test,test,149846,.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:149924,Testability,test,tests,149924,.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:149946,Testability,test,test,149946,.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:150053,Testability,test,test,150053,TestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping filter difference order on the estimated background ;  Background_smooth.C Example to illustrate the background estimator (class TSpectrum) including Compt,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:152246,Testability,test,test,152246,he clipping window width on the estimated background ;  Deconvolution.C Example to illustrate deconvolution function (class TSpectrum) ;  Deconvolution_wide.C Example to illustrate deconvolution function (class TSpectrum) ;  Deconvolution_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide.C Example to illustrate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  peaks.C Getting Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the tra,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153001,Testability,test,testing,153001,he SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass c,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153251,Testability,test,testing,153251,CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153856,Testability,test,testing,153856,"sKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and colum",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:154482,Testability,test,testing,154482,"tion.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:158540,Testability,benchmark,benchmarks,158540,"ple writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run bef",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:158575,Testability,test,tests,158575," to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.08/07 - Reference Guide Generated on Th",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:158597,Testability,benchmark,benchmark,158597," to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.08/07 - Reference Guide Generated on Th",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:159479,Testability,benchmark,benchmarks,159479,"ates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:33 using Doxygen 1.8.13. ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:102788,Usability,simpl,simple,102788," geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usage of ""Default"" geometry alias ;  geom_lhcb.CShows CMS geometry ;  glplot.CPreliminary demo for showing Timur's GL plots in EVE ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourie",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:103327,Usability,simpl,simplified,103327,"onstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  quadset_callback.cxx;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional par",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:108315,Usability,simpl,simple,108315,"umbers distributed according to a function defined by the user ;  TestBinomial.C Perform a fit to a set of data with binomial errors like those derived from the division of two histograms ;  TwoHistoFit2D.C Example to fit two histograms at the same time ;  ► fitsio;  FITS_tutorial1.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial2.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial3.COpen a FITS file and retrieve the first plane of the image array as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:110190,Usability,simpl,simple,110190," of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.CDrawing a fine tank, using ROOT geometry class ;  xtruDraw.CDraw a ""representative"" TXTRU shape ;  xtruSamples.CDraw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  ► gl;  customcolorgl.h;  glbox.CDisplay a 3D histogram using GL (box option) ;  gldemos.CMenu for running GL demos ;  glh3c.CDisplay a 3D histogram using GL (box option) ;  glparametric.CShow rendering of parametric surfaces ;  glparametrics2.CShow rendering of parametric surfaces ;  glrose.",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:110263,Usability,simpl,simple,110263,"ic player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package ;  robot.CDrawing a famous Korean robot, TaekwonV, using ROOT geometry class ;  rootgeom.CDefinition of a simple geometry (the 4 ROOT characters) ;  runplugin.CCreates and runs a simple iterator plugin connected to TGeoPainter iterator ;  shapes.CThe old geometry shapes (see script geodemo.C) ;  shapesAnim.CMacro illustrating how to animate a geometry picture using a Timer ;  south_gate.CDrawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class ;  station1.CDrawing a space station, using ROOT geometry class ;  station2.CDrawing a space station (version 2), using ROOT geometry class ;  tank.CDrawing a fine tank, using ROOT geometry class ;  xtruDraw.CDraw a ""representative"" TXTRU shape ;  xtruSamples.CDraw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  ► gl;  customcolorgl.h;  glbox.CDisplay a 3D histogram using GL (box option) ;  gldemos.CMenu for running GL demos ;  glh3c.CDisplay a 3D histogram using GL (box option) ;  glparametric.CShow rendering of parametric surfaces ;  glparametrics2.CShow rendering of parametric surfaces ;  glrose.CRender a TF2 looking like a rose ;  glsurfaces.CVarious surfaces rendered with",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:115872,Usability,simpl,simple,115872,"t example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart exampl",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:116283,Usability,simpl,simple,116283," canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: S",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:117683,Usability,simpl,simple,117683," ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to us",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:118418,Usability,feedback,feedback,118418,"ipt showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simpl",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:118715,Usability,simpl,simple,118715,"bled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a T",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:119289,Usability,simpl,simple,119289,"thin ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup d",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:119410,Usability,simpl,simple,119410," exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:119683,Usability,simpl,simple,119683,"is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that show",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:120455,Usability,simpl,simpleTableTest,120455,"OT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:120498,Usability,simpl,simple,120498,"e a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotop",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:120686,Usability,simpl,simple,120686,"ith a TTreeTableInterface ;  numberEntry.CThis macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry ;  QtFileDialog.CThis is a small ROOT macro to use Qt 3.3 class: QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of c",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:120962,Usability,simpl,simple,120962,"ps://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of candle plot showing the whiskers definition ;  ContourList.C Getting Contours From TH2D ;  cumulative.C Illustrate use of the TH1::GetCumulative method ;  draw2dopt.C Display the various 2-d drawing options ;  DynamicSlice.C Show the slice of a TH2 following the mou",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:122929,Usability,simpl,simple,122929,"ce of a TH2 following the mouse position ;  exec1.CEcho object at mouse position ;  exec2.CEcho object at mouse position and show a graphics line ;  Fibonacci.C A TH2Poly build with Fibonacci numbers ;  fillrandom.C Fill a 1-D histogram from a parametric function ;  FirstContour.C Make a contour plot and get the first contour in a TPolyMarker ;  greyscale.C Create grey scale of 200 x 200 boxes ;  h1draw.C 1-D histogram drawing options ;  hbars.C Example of bar charts with 1-d histograms ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplotOld.CExample displaying two histograms and their ratio ;  rebin.C Rebin a variable bin-width histogram ;  reverseaxis.C Example showing an histogram with reverse axis ;  sparsehist.CEvaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension ;  statsEditing.C Edit statistics box ;  testSmooth.C Histogram smoothing ;  th2polyBoxes.C This tutorial illustrates how to create an hist",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:124951,Usability,simpl,simple,124951,"2Poly) ;  th2polyEurope.C This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it ;  th2polyHoneycomb.CThis tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:133906,Usability,simpl,simple,133906,"is tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:134335,Usability,simpl,simple,134335,"rams in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:134476,Usability,simpl,simple,134476,"of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in run",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:134730,Usability,simpl,simple,134730,"together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:136465,Usability,simpl,simple,136465,"clude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:136514,Usability,simpl,simple,136514,"f.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo h",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:148221,Usability,simpl,simple,148221, ALGORITHM TUNING' RooFit tutorial macro #903 ;  ► roostats;  CreateExampleFile.C;  FourBinInstructional.C This example is a generalization of the on/off problem ;  HybridInstructional.C Example demonstrating usage of HybridCalcultor ;  HybridOriginalDemo.C Example on how to use the HybridCalculatorOriginal class ;  HybridStandardForm.C A hypothesis testing example based on number counting with background uncertainty ;  IntervalExamples.C Example showing confidence intervals with four techniques ;  JeffreysPriorDemo.C tutorial demonstrating and validates the RooJeffreysPrior class ;  ModelInspector.CRooStats Model Inspector ;  MultivariateGaussianTest.C Comparison of MCMC and PLC in a multi-variate gaussian problem ;  NuMuToNuE_Oscillation.cxx;  NuMuToNuE_Oscillation.h;  OneSidedFrequentistUpperLimitWithBands.C OneSidedFrequentistUpperLimitWithBands ;  rs101_limitexample.C 'Limit Example' RooStats tutorial macro #101 This tutorial shows an example of creating a simple model for a number counting experiment with uncertainty on both the background rate and signal efficiency ;  rs102_hypotestwithshapes.C rs102_hypotestwithshapes for RooStats project ;  rs301_splot.C SPlot tutorial ;  rs401c_FeldmanCousins.C Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique ;  rs401d_FeldmanCousins.C 'Neutrino Oscillation Example from Feldman & Cousins' ;  rs601_HLFactoryexample.C 'High Level Factory Example' RooStats tutorial macro #601 ;  rs602_HLFactoryCombinationexample.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs603_HLFactoryElaborateExample.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Numb,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:152492,Usability,simpl,simple,152492,trate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide.C Example to illustrate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  peaks.C Getting Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example ex,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:152552,Usability,simpl,simple,152552,ionRL_wide.C Example to illustrate deconvolution function (class TSpectrum) ;  DeconvolutionRL_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  peaks.C Getting Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TM,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:152612,Usability,simpl,simple,152612,onRL_wide_boost.C Example to illustrate deconvolution function (class TSpectrum) ;  peaks.C Getting Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorit,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153090,Usability,simpl,simple,153090, sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three ,MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153371,Usability,simpl,simple,153371," stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVA",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153626,Usability,simpl,simple,153626," 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an ",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153734,Usability,simpl,simple,153734,"ionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram an",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153820,Usability,simpl,simple,153820,"sKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and colum",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:153955,Usability,simpl,simple,153955,"ting of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:154567,Usability,simpl,simple,154567,"an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1an",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:156231,Usability,simpl,simplest,156231,"ree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tr",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:158064,Usability,simpl,simple,158064,"e0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression,",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/files.html:158241,Usability,simpl,simple,158241," variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to",MatchSource.WIKI,doc/v608/files.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/files.html
https://root.cern/doc/v608/modules.html:3164,Deployability,integrat,integration,3164,"r implementing Functor and Functor1D classes ;  Parameteric Function Evaluation Interfaces.Interfaces classes for evaluation of parametric functions ;  ►Numerical AlgorithmsNumerical Algorithm classes from the MathCore Library and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  ►MathMoreThe Mathematical library providing some advanced functionality and based on GSL. See the MathMore Library page ;  ►Numerical AlgorithmsNumerical Algorithm classes from the",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:4009,Deployability,continuous,continuous,4009,"r implementing Functor and Functor1D classes ;  Parameteric Function Evaluation Interfaces.Interfaces classes for evaluation of parametric functions ;  ►Numerical AlgorithmsNumerical Algorithm classes from the MathCore Library and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  ►MathMoreThe Mathematical library providing some advanced functionality and based on GSL. See the MathMore Library page ;  ►Numerical AlgorithmsNumerical Algorithm classes from the",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:4140,Deployability,continuous,continuous,4140,"r implementing Functor and Functor1D classes ;  Parameteric Function Evaluation Interfaces.Interfaces classes for evaluation of parametric functions ;  ►Numerical AlgorithmsNumerical Algorithm classes from the MathCore Library and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  ►MathMoreThe Mathematical library providing some advanced functionality and based on GSL. See the MathMore Library page ;  ►Numerical AlgorithmsNumerical Algorithm classes from the",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:4956,Deployability,integrat,integration,4956,,MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:5801,Deployability,continuous,continuous,5801,"and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:5932,Deployability,continuous,continuous,5932,"sses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, suc",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:602,Integrability,interface,interface,602,". ROOT: User's Classes. ; ROOT   6.08/07 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ►MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ►Fitting and Parameter EstimationClasses used for fitting (regression analysis) and estimation of parame",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:828,Integrability,interface,interfaceClasses,828,". ROOT: User's Classes. ; ROOT   6.08/07 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ►MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ►Fitting and Parameter EstimationClasses used for fitting (regression analysis) and estimation of parame",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:1009,Integrability,interface,interfaceInterface,1009,". ROOT: User's Classes. ; ROOT   6.08/07 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ►MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ►Fitting and Parameter EstimationClasses used for fitting (regression analysis) and estimation of parame",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:3164,Integrability,integrat,integration,3164,"r implementing Functor and Functor1D classes ;  Parameteric Function Evaluation Interfaces.Interfaces classes for evaluation of parametric functions ;  ►Numerical AlgorithmsNumerical Algorithm classes from the MathCore Library and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  ►MathMoreThe Mathematical library providing some advanced functionality and based on GSL. See the MathMore Library page ;  ►Numerical AlgorithmsNumerical Algorithm classes from the",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:4956,Integrability,integrat,integration,4956,,MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:7697,Integrability,interface,interface,7697,"tistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:7729,Integrability,interface,interface,7729,"tistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:7761,Integrability,interface,interface,7761,"tistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:9027,Integrability,interface,interface,9027,"he kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  RooFitRooFit toolkit classes. For documentation see (The RooFit Toolkit for Data Modeling)[http://root.cern.ch/drupal/content/roofit] ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats is a package containing statistical tools built on top of RooFit ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Cocoa tutorialsVarious examples showing graphics done with Cocoa ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:9196,Integrability,interface,interface,9196,"tion see (The RooFit Toolkit for Data Modeling)[http://root.cern.ch/drupal/content/roofit] ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats is a package containing statistical tools built on top of RooFit ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Cocoa tutorialsVarious examples showing graphics done with Cocoa ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorial",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:9246,Integrability,interface,interface,9246,"tion see (The RooFit Toolkit for Data Modeling)[http://root.cern.ch/drupal/content/roofit] ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats is a package containing statistical tools built on top of RooFit ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Cocoa tutorialsVarious examples showing graphics done with Cocoa ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorial",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:9759,Integrability,interface,interface,9759," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:11680,Integrability,interface,interface,11680,iprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  XML tutorialsXML examples . ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:30 using Doxygen 1.8.13. ,MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:12411,Integrability,interface,interface,12411,iprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  XML tutorialsXML examples . ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:30 using Doxygen 1.8.13. ,MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:6795,Performance,perform,performance,6795,"continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:10512,Safety,safe,safety,10512," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:8076,Testability,benchmark,benchmark,8076," Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  RooFitRooFit toolkit classes. For documentation see (The RooFit Toolkit for Data Modeling)[http://root.cern.ch/drupal/content/roofit] ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats is a package containing statistical tools built on top of RooFit ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Cocoa tutorialsVarious examples showing graphics done with Cocoa ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files i",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:8115,Testability,benchmark,benchmark,8115," Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  RooFitRooFit toolkit classes. For documentation see (The RooFit Toolkit for Data Modeling)[http://root.cern.ch/drupal/content/roofit] ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats is a package containing statistical tools built on top of RooFit ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros illustrating many aspect of ROOT ;  Cocoa tutorialsVarious examples showing graphics done with Cocoa ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files i",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:10079,Testability,test,test,10079," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:11393,Testability,test,test,11393," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/modules.html:11074,Usability,simpl,simple,11074," Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  ►Math tutorialsExamples showing the Math classes ;  ►TUnfold tutorialsTest programs for the classes TUnfold and related ;  TUnfoldDensity and TUnfoldBinning test suiteThis is an example of unfolding a two-dimensional distribution ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  ",MatchSource.WIKI,doc/v608/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/modules.html
https://root.cern/doc/v608/namespaces.html:2309,Testability,test,test,2309,"ns to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  NCocoaTutorials;  NDetail;  NExecutorUtils;  ►NExperimental;  NDetail;  NHist;  NInternal;  ►NFitNamespace for the fitting classes ;  NFitUtilNamespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  NHFitInterface;  NGLTutorials;  ►NInternal;  NExecutorUtils;  NTThreadedObjectUtils;  ►NMacOSX;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  Ntest;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NTF1Helper;  ►NTMetaUtils;  NAST2SourceTools;  NpropNames;  NTreeUtils;  NTThreadedObjectUtils;  ►Nv5;  NTFastFun;  Nrootmarks;  NROOTwriter;  NSelectionRulesUtils;  Nshapes;  Nsqlio;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ndetail;  Nsurfaces;  NTClassEdit;  Ntest;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  NBlas;  NkNN;  NTMVAGlob;  Ntornado;  Ntree;  NTStreamerInfoActions;  ►Nvdt;  Ndetails;  Nwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo. ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:30 using Doxygen 1.8.13. ",MatchSource.WIKI,doc/v608/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v608/namespaces.html
https://root.cern/doc/v610/annotated.html:17785,Availability,error,error,17785,"quaredWeightsKeeps track of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoo",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:17807,Availability,error,error,17807,"ck of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelih",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:18534,Availability,error,error,18534,"icFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NTDF;  CTAction;  CTActionBase;  CTColumnValueHelper class that updates and returns TTree branches as well as TDataFrame temporary columns ;  CTTDFValueTuple;  CTTDFValueTuple< TTypeList<",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:25870,Availability,error,error,25870,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:40817,Availability,error,error,40817,"rom ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLib;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatr",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:43386,Availability,error,error,43386,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:55637,Availability,avail,available,55637,"ntsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumil",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:55772,Availability,error,error,55772,"ction"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumili",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:58231,Availability,avail,available,58231,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:59993,Availability,error,error,59993,"Failed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffC",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:60261,Availability,error,errors,60261,"ng values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a g",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:60406,Availability,error,errors,60406,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:61817,Availability,error,errors,61817,"inimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.e ;  CMnMachinePrecisionDetermines the relative floating point arithmetic precision ;  CMnMigradAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinimizeAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinosAPI class for Minos Error analysis (asymmetric errors); minimization has to be done before and Minimum must be valid; possibility to ask only for one side of the Minos Error; ;  CMnParabolaThis class defines a parabola of the form a*x*x + b*x + c ;  CMnParabolaFactory;  CMnParabolaPointA point of a parabola ;  CMnParameterScanScans the values of FCN as a function of one Parameter and retains the best function and Parameter values found ;  CMnPlotMnPlot produces a text-screen graphical output of (x,y) points, e.g ;  CMnPosDefForce the covariance matrix to be positive defined by adding extra terms in the diagonal ;  CMnPrint;  CMnRefCountedPointer;  CMnReferenceCounter;  CMnScanAPI class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for mini",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:63632,Availability,error,errors,63632,"  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has par",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:63764,Availability,error,errors,63764,"API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Ne",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:70795,Availability,error,error,70795,udaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidation;  CCrossValidationResult;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:71862,Availability,error,errors,71862,"CFitterBaseBase class for TMVA fitters ;  CGeneticAlgorithmBase definition for genetic algorithm ;  CGeneticFitterFitter using a Genetic Algorithm ;  CGeneticGenesCut optimisation interface class for genetic algorithm ;  CGeneticPopulationPopulation definition for genetic algorithm ;  CGeneticRangeRange definition for genetic algorithm ;  CGiniIndexImplementation of the GiniIndex as separation criterion ;  CGiniIndexWithLaplaceImplementation of the GiniIndex With Laplace correction as separation criterion ;  CHuberLossFunctionHuber Loss Function ;  CHuberLossFunctionBDTHuber BDT Loss Function ;  CHyperParameterOptimisation;  CHyperParameterOptimisationResult;  CIFitterTargetInterface for a fitter 'target' ;  CIMethodInterface for all concrete MVA method implementations ;  CIncrement;  CIntervalThe TMVA::Interval Class ;  CIPruneToolIPruneTool - a helper interface class to prune a decision tree ;  CIPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook ;  CKDEKernelKDE Kernel for ""smoothing"" the PDFs ;  CkNNThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CLDA;  CLeastSquaresLossFunctionLeast Squares Loss Function ;  CLeastSquaresLossFunctionBDTLeast Squares BDT Loss Function ;  CLogIntervalThe TMVA::Interval Class ;  CLossFunction;  CLossFunctionBDT;  CLossFunctionEventInfo;  CMCFitterFitter using Monte Carlo sampling of parameters ;  CMethodANNBaseBase class for all TMVA methods using artificial neural networks ;  CMethodBaseVirtual base Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural ",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:76364,Availability,error,error,76364," the discriminant ;  CPDEFoamDiscriminantDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamEventThis PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights ;  CPDEFoamEventDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamKernelBaseThis class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget ;  CPDEFoamTargetDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamVect;  CPDFPDF wrapper for histograms; uses user-defined spline interpolation ;  CPruningInfo;  CPyMethodBase;  ►CQuickMVAProbEstimator;  CEventInfo;  CRandomGenerator;  CRank;  CRankingRanking for variables in method (implementation) ;  CReaderServes to use the MVAs in a specific analysis context ;  CRegressionVarianceCalculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms ;  CResultsClass that is the base-class for a vector of result ;  CResultsClassificationClass that is the base-class for a vector of result ;  CResultsMulticlassClass which takes the results of a multiclass classification ;  CResultsRegressionClass that is the base-class for a vector of result ;  CRMethodBase;  CROCCalc;  CROCCurve;  CRootFinderRoot finding using Brents algorithm (translated from CERNLIB function RZERO) ;  CRuleImplementation of a rule ;  CRu",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:87149,Availability,error,error,87149,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:97796,Availability,error,error,97796,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:97897,Availability,error,error,97897,"base class for RooFit objects that are to be attached to ROOT directories ;  CRooDLLSignificanceMCSModuleRooDLLSignificanceMCSModule is an add-on modules to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero) ;  CRooDoubleRooDouble is a minimal implementation of a TObject holding a Double_t value ;  CRooDstD0BGSpecial p.d.f shape that can be used to model the background of D*-D0 mass difference distributions ;  CRooEffGenContextRooEffGenContext is a specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function ;  CRooEfficiencyRooEfficiency is a PDF helper class to fit efficiencies parameterized by a supplied function F ;  ►CRooEffProd;  CCacheElem;  CRooEllipseA RooEllipse is a two-dimensional ellipse that can be used to represent an error contour ;  CRooErrorHandler;  CRooErrorVarRooErrorVar is an auxilary class that represents the error of a RooRealVar as a seperate object ;  ►CRooExpensiveObjectCacheRooExpensiveObjectCache is a singleton class that serves as repository for objects that are expensive to calculate ;  CExpensiveObject;  CRooExponentialExponential p.d.f ;  CRooExtendedBinding;  CRooExtendedTermRooExtendedTerm is a p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed ;  CRooExtendPdf;  ►CRooFactoryWSToolRooFactoryWSTool is a clase like TTree::MakeClass() that generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names ;  CIFace;  CSpecialsIFace;  ►CRooFFTConvPdf;  CFFTCacheElem;  CRooFirstMomentRooFirstMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooFIter;  CRooFitResult;  CRooFoamGeneratorClas",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:101475,Availability,error,error,101475,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:105106,Availability,error,errors,105106,"ciated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:110163,Availability,error,error,110163,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:118077,Availability,error,error,118077,,MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:160411,Availability,avail,available,160411,"istBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLite;  CTGLiteJob;  CTGLiteJobStatus;  CTGLiteResult;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeCon",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:164321,Availability,error,error,164321,"TGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGLViewer ;  CTGLVoxelPainterPaint TH3 histograms as ""voxels"" - colored boxes, transparent if transfer function was specified ;  CTGLWidgetGL window with context ;  ►CTGMainFrame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:165875,Availability,error,errors,165875,"ame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin an",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:165979,Availability,error,error,165979,"orFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithI",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:166063,Availability,error,error,166063,"r;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobS",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:166393,Availability,error,error,166393,"Pack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobStatus;  CTGridJobStatusList;  CTGridResult;  CTGroupButtonA specialized TButton used in a group of Buttons ;  CTGRowLayout;  CTGScrollBar;  CTGScrollBarElement;  CTGSearchDialog;  CTGSearchType;  CTGSelectBoxThis class represent a specialized expression editor for TTVLVEntry 'true name' and 'alias' data members ;  CTGSelectedPic",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
https://root.cern/doc/v610/annotated.html:197648,Availability,error,error,197648,"for TSpline3 knot ;  CTSplinePoly5Class for TSpline5 knot ;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring is legal ;  CTSVDUnfoldSVD Approach to Data Unfolding ;  CTSVG",MatchSource.WIKI,doc/v610/annotated.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v610/annotated.html
