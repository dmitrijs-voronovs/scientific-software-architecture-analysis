id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:39662,Modifiability,coupling,coupling,39662,"N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of ene",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:42315,Modifiability,adapt,adapted,42315,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:43104,Modifiability,adapt,adapted,43104,"sired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:49258,Modifiability,variab,variables,49258,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56825,Modifiability,coupling,coupling,56825," TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56920,Modifiability,coupling,coupling,56920,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56967,Modifiability,coupling,coupling,56967,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:57109,Modifiability,coupling,coupling,57109," available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:60759,Modifiability,variab,variable,60759,"he keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:60809,Modifiability,variab,variable,60809,"gram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The tw",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:61511,Modifiability,adapt,adapted,61511,"tion, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:66303,Modifiability,coupling,coupling,66303,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:70316,Modifiability,config,configurational,70316,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:76205,Modifiability,coupling,coupling,76205,"ten troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR); CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR); CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR); CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:83147,Modifiability,adapt,adapted,83147,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:89369,Modifiability,variab,variables,89369," — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis funct",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:89597,Modifiability,coupling,coupling,89597,"Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: st",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:117638,Modifiability,extend,extended,117638,"ng type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, gues",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:117768,Modifiability,extend,extended,117768,"es: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user inpu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:117894,Modifiability,extend,extended,117894,"oolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:126385,Modifiability,flexible,flexible,126385," Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:128159,Modifiability,config,configruation,128159,"CF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:135917,Modifiability,coupling,coupling,135917,"l symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably elimin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:136075,Modifiability,coupling,coupling,136075," boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:137590,Modifiability,coupling,coupling,137590," find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian mat",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:137760,Modifiability,coupling,coupling,137760,"block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the e",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:167474,Modifiability,variab,variable,167474,"C) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_O",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:167523,Modifiability,variab,variable,167523,"ion of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:186864,Modifiability,coupling,coupling,186864,"tring; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:208576,Modifiability,adapt,adapted,208576,"er type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:216096,Modifiability,config,configurations,216096,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:5476,Performance,perform,performing,5476,"t: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for B",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:6521,Performance,optimiz,optimization,6521,"ing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:6840,Performance,cache,cache,6840,"tring; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculation",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:6977,Performance,perform,perform,6977," Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:7197,Performance,cache,cache,7197,"sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:7259,Performance,cache,cache,7259,"sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:7529,Performance,cache,cache,7529,"Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that al",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:7741,Performance,cache,cache,7741,"g on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitud",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:7803,Performance,cache,cache,7803,"g on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitud",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8084,Performance,cache,cache,8084,"ing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that al",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8298,Performance,cache,cache,8298,"f 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8360,Performance,cache,cache,8360,"f 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8630,Performance,cache,cache,8630,"l for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8848,Performance,cache,cache,8848,"y help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory proble",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:8910,Performance,cache,cache,8910,"y help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory proble",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:9191,Performance,cache,cache,9191,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:9458,Performance,cache,cache,9458,"ry problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Typ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:9700,Performance,cache,cache,9700,"r libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:9762,Performance,cache,cache,9762,"r libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10032,Performance,cache,cache,10032,"problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonica",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10162,Performance,cache,cache,10162,"\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10281,Performance,cache,cache,10281,"E — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Def",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10412,Performance,cache,cache,10412,"integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10568,Performance,cache,cached,10568,"); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:24902,Performance,cache,cache,24902,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:25096,Performance,perform,performed,25096,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Sp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:27004,Performance,perform,performance,27004,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:27378,Performance,optimiz,optimization,27378,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the S",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:29641,Performance,optimiz,optimizations,29641,"tion scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the r",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:29808,Performance,optimiz,optimizations,29808,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum nu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:31177,Performance,perform,performed,31177,"2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:32374,Performance,optimiz,optimization,32374," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:38518,Performance,optimiz,optimization,38518,"d in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:38646,Performance,optimiz,optimizations,38646,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The va",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:38712,Performance,optimiz,optimizer,38712,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The va",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:39116,Performance,perform,performed,39116,"ether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:41248,Performance,perform,performed,41248,"ger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR —",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:46728,Performance,perform,performs,46728,"e all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:46893,Performance,perform,performs,46893,"hat this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47071,Performance,perform,performs,47071,"o Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47305,Performance,optimiz,optimization,47305,"for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47323,Performance,optimiz,optimization,47323,"tracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47465,Performance,optimiz,optimizations,47465,"ingle d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47531,Performance,optimiz,optimizer,47531,"ingle d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47832,Performance,optimiz,optimization,47832,"d-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47878,Performance,optimiz,optimizations,47878,"as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47944,Performance,optimiz,optimizer,47944,"as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:48176,Performance,optimiz,optimizations,48176,"2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. E",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:48216,Performance,optimiz,optimizations,48216,"ecifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:48282,Performance,optimiz,optimizer,48282,"ecifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:48483,Performance,optimiz,optimization,48483,"ry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:49165,Performance,optimiz,optimization,49165," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:49285,Performance,optimiz,optimized,49285,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:50998,Performance,perform,performs,50998,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:51136,Performance,perform,performs,51136,"isk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:52945,Performance,perform,performed,52945,"le\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:54589,Performance,optimiz,optimizations,54589,"r CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:55506,Performance,optimiz,optimization,55506,"Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specif",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56191,Performance,optimiz,optimizations,56191,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56257,Performance,optimiz,optimizer,56257,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:56527,Performance,perform,performs,56527,"d: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will termin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:57499,Performance,optimiz,optimization,57499,"; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calcu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:57802,Performance,optimiz,optimization,57802,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:57854,Performance,optimiz,optimizations,57854,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:57920,Performance,optimiz,optimizer,57920,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:67170,Performance,perform,performed,67170," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:68884,Performance,perform,performed,68884,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:70121,Performance,perform,performed,70121,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:72292,Performance,perform,performed,72292,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:82583,Performance,optimiz,optimization,82583," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:83302,Performance,perform,performed,83302,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:83606,Performance,perform,performed,83606,"ubsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The v",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:88346,Performance,optimiz,optimization,88346,"ansition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in thi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:88591,Performance,perform,perform,88591,"ollapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLIN",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:93262,Performance,perform,performed,93262,"ault. CUTOFF (DFOCC); DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (FISAPT); FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:106106,Performance,perform,performed,106106,"fault: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:111795,Performance,perform,perform,111795,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:111926,Performance,perform,perform,111926," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:111943,Performance,optimiz,optimizations,111943," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112088,Performance,perform,perform,112088,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112219,Performance,perform,perform,112219,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112236,Performance,optimiz,optimizations,112236,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112475,Performance,perform,perform,112475,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112605,Performance,perform,perform,112605," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112622,Performance,optimiz,optimizations,112622," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112767,Performance,perform,perform,112767,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112897,Performance,perform,perform,112897,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112914,Performance,optimiz,optimizations,112914,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:113550,Performance,optimiz,optimization,113550,"MP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:119848,Performance,perform,perform,119848,"Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:119954,Performance,perform,performs,119954,"e Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:120032,Performance,perform,performs,120032,"erence wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter withou",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:121159,Performance,optimiz,optimization,121159,"_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:123589,Performance,optimiz,optimization,123589,"CI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:125804,Performance,optimiz,optimizations,125804,"t: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:126638,Performance,optimiz,optimization,126638,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:131246,Performance,optimiz,optimized,131246,"uation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:131520,Performance,optimiz,optimized,131520,"lse. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:131717,Performance,optimiz,optimization,131717,"lt. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are L",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:132071,Performance,optimiz,optimization,132071,"efault. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:134278,Performance,optimiz,optimization,134278,"hould be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:134717,Performance,optimiz,optimizations,134717,"IUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:135216,Performance,optimiz,optimization,135216,"to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:135391,Performance,optimiz,optimized,135391,"ITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:140340,Performance,perform,perform,140340,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INDEPENDENT_J_TYPE (SCF); SCF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:145070,Performance,perform,performed,145070,"ll three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. LEVEL_SHIFT (DFOCC); DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF); MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC); OCC — Level shift to aid convergence. Type: double; Default: 0.02. LINEAR (CCRESPONSE); CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC); DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC); OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING); OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:153796,Performance,perform,performed,153796,"second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:154201,Performance,optimiz,optimization,154201,"— Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:160936,Performance,optimiz,optimization,160936,"iven excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:161042,Performance,optimiz,optimization,161042,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:163269,Performance,perform,perform,163269,"? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC); DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:164263,Performance,optimiz,optimized-,164263,"D (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:164381,Performance,optimiz,optimized-,164381,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn seri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:166465,Performance,perform,performed,166465,"_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Exper",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:173346,Performance,perform,perform,173346," boolean; Default: false. OCC_ORBS_PRINT (OCC); OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. OMP_N_THREAD (CPHF); CPHF — The maximum number of integral threads",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:175645,Performance,optimiz,optimization,175645," false. ONEPDM_GRID_CUTOFF (CCDENSITY); CCDENSITY — Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP (CCDENSITY); CCDENSITY — Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY); CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Po",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176056,Performance,optimiz,optimization,176056,"ype: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algor",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176239,Performance,optimiz,optimization,176239,"D. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176580,Performance,perform,performed,176580,"ype: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LIN",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176873,Performance,optimiz,optimize,176873,"edundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: stri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176951,Performance,optimiz,optimize,176951,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:186441,Performance,perform,perform,186441,"ties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN (GLOBALS); GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY); CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:187745,Performance,perform,perform,187745,"slates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:187826,Performance,perform,perform,187826," — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:193417,Performance,perform,performing,193417,"N, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:194484,Performance,optimiz,optimizations,194484,"e on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:195514,Performance,optimiz,optimized,195514,"(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:195732,Performance,optimiz,optimized,195732,"at the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:204467,Performance,optimiz,optimized,204467,"olute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC); DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT); CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI); DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:208136,Performance,perform,perform,208136,"UBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondition max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_R",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:208250,Performance,perform,perform,208250,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:209521,Performance,perform,perform,209521,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum si",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:209596,Performance,perform,performed,209596,"ir energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will ter",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:209714,Performance,perform,perform,209714,"e; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenv",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:211062,Performance,optimiz,optimization,211062,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:3869,Safety,avoid,avoid,3869,"will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:27444,Safety,safe,safe,27444,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the S",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:86881,Safety,safe,safety,86881," second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AD_STATES (CPHF); CPHF — Which states to save AD Matrices for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_AMPLITUDE_CUTOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. CIS_DOPDM_STATES (CPHF); CPHF — Which states to save AO difference OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:90092,Safety,safe,safety,90092," COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS (GLOBALS); GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS); GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds ESP - Dt, ESP ORBITALS - Psi_a_N, Psi_b_N BASIS_FUNCTIONS - Phi_N LOL - LOLa, LOLb ELF - ELFa, ELFb. Type: array; Default: No Default. CUBIC_BASI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:108206,Safety,avoid,avoid,108206," DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:125208,Safety,safe,safety,125208,"ype: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances b",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:129240,Safety,redund,redundant,129240,"oefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING); OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:175869,Safety,redund,redundant,175869,"d to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY); CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:199852,Safety,redund,redundant,199852,"(Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:202689,Safety,safe,safety,202689,"e. SAPT0_E20DISP (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:202925,Safety,safe,safety,202925,": false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling fa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:212074,Safety,safe,safety,212074,"ization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhono",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:43476,Security,access,access,43476,", while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword \(\times 10^{-6}\). Type: integer; Default: 0. CFOUR_FOCK (CFOUR); CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:52130,Security,access,access,52130,"s a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:6028,Testability,benchmark,benchmarking,6028,"ring; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:54017,Testability,test,tested,54017,"igher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:59941,Testability,log,logical,59941," be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:64038,Testability,test,testing,64038,"ng. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:102273,Testability,log,logarithmic,102273," Type: python; Default: No Default. DFT_DISPERSION_PARAMETERS (SCF); SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Type: array; Default: No Default. DFT_FUNCTIONAL (SCF); SCF — The DFT combined functional name, e.g. B3LYP, or GEN to use a python reference to a custom functional specified by DFT_CUSTOM_FUNCTIONAL. Type: string; Default: HF. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:161274,Testability,test,test,161274,"s. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output fil",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:193963,Testability,test,tested,193963,"ctor guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coup",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:211273,Testability,test,testing,211273,"rgy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:212470,Testability,test,test,212470,"RMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:212559,Testability,test,test,212559,"value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:215743,Testability,test,testing,215743,"lt: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:18464,Usability,simpl,simply,18464," recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:37141,Usability,clear,clearly,37141,"yword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR); CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:69101,Usability,simpl,simply,69101,"ual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:15880,Availability,toler,tolerance,15880,"; GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type:",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:23650,Availability,avail,available,23650,"arse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:23741,Availability,avail,available,23741,"in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) B",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:25254,Availability,avail,available,25254,"-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) use",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:26763,Availability,avail,available,26763,": integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy(",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27025,Availability,avail,available,27025,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:30685,Availability,error,error,30685,"ntly only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFO",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31147,Availability,avail,available,31147,"2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31322,Availability,avail,available,31322," no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of compu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31562,Availability,avail,available,31562," the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:35430,Availability,avail,available,35430,"-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. CFOUR_ESTATE_CONV (CFOUR); CFOUR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evalu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:38343,Availability,avail,available,38343,"0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the tre",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:40922,Availability,avail,available,40922,"tched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without st",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:45947,Availability,avail,available,45947,"the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_G",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49062,Availability,avail,available,49062,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:51591,Availability,avail,available,51591,"s a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56077,Availability,avail,available,56077,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57566,Availability,error,error,57566,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:60593,Availability,toler,tolerant,60593,"xample of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD ap",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:80001,Availability,avail,available,80001,"druply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) tur",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:80688,Availability,avail,available,80688,"CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coe",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:81376,Availability,avail,available,81376,": integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CFOUR — Specifies whether to calculate finite-temperature thermodynamic corrections after a frequency calculation. OFF (=0) skips this; ON (=1) gives abbreviated output; and VERBOSE (=2) gives elaborate output that is separated by translation, rotation and vibration. Default: ON (currently not available in public version). Type: string; Possible Values: OFF, ON, VERBOSE; Default: ON. CFOUR_TRANS_INV (CFOUR); CFOUR — Specifies whether or not translational invariance is exploited in geometrical derivative calculations. USE(=0) specifies that translational invariance is exploited, while IGNORE (=1) turns it off. Type: string; Possible Values: USE, IGNORE; Default: USE. CFOUR_TREAT_PERT (CFOUR); CFOUR — Specifies whether in a correlated NMR chemical shift calculations all perturbations are treated at once or sequentially. Available option are SIMULTANEOUS (=0) and SEQUENTIAL (=1). The latter is at least preferred for large-scale calculations, as it has less demands on the available disk space. Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: A",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:84339,Availability,toler,tolerance,84339,"ncies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:85242,Availability,toler,tolerance,85242,"> 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies fo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:85370,Availability,toler,tolerance,85370,"als. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_ZFIELD (CFOUR); CFOUR — Specifies the Z-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CHOLESKY (DFOCC); DFOCC — Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE (DFOCC); DFOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (FNOCC); FNOCC — tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. CHOLESKY_TOLERANCE (SCF); SCF — Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. CI_DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. CI_FILE_START (DETCI); DETCI (Expert) — What file do we start at for hd/c/s/d CIvects? Should be 50 for normal CI calculations and 54 if we are going to do a second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:87834,Availability,toler,tolerance,87834,"ult. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:89241,Availability,avail,available,89241,"BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Defau",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:95713,Availability,error,error,95713,", CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT El",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:95732,Availability,error,error,95732,", CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT El",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:99173,Availability,down,down,99173,"CF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF); SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF); SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF); SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum err",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:99999,Availability,error,error,99999,"r of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Va",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:100144,Availability,error,error,100144,"y be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Use DF integrals tech to converge the SCF before switching to a conventional tech in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing its value will have no effect on the computation. Type: boolean; Default: false. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_ALPHA_C (SCF); SCF — The DFT Correlation hybrid parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (SCF); SCF (Expert) — The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME (SCF); SCF (Expert) — The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_BS_RADIUS_ALPHA (SCF); SCF — Factor for effective BS radius in radial grid. Type: double; Default: 1.0. DFT_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:103528,Availability,robust,robust,103528," DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolat",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105003,Availability,error,error,105003,"BALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105124,Availability,error,error,105124," use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105335,Availability,error,error,105335,"; CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105460,Availability,error,error,105460," use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105577,Availability,error,error,105577,"trapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105706,Availability,error,error,105706,"SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105827,Availability,error,error,105827,"n to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:105944,Availability,error,error,105944," 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:106340,Availability,error,error,106340,"ximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:106786,Availability,avail,available,106786,"S_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:107879,Availability,checkpoint,checkpoint,107879,"oolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:108931,Availability,checkpoint,checkpoints,108931,"onvenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG —",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:110148,Availability,toler,tolerances,110148," the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:118785,Availability,avail,available,118785,"nded Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. T",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:128708,Availability,checkpoint,checkpoint,128708,"ies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING); OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:129240,Availability,redundant,redundant,129240,"oefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING); OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:135430,Availability,avail,available,135430,"refix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:151167,Availability,avail,available,151167,"SAPT); FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT); FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF); SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY); CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM); CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA); CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE); CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY); CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA); CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE); CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “w",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:151375,Availability,avail,available,151375," the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY); CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM); CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCLAMBDA); CCLAMBDA — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_METHOD (CCRESPONSE); CCRESPONSE — Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY); CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA); CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE); CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:153040,Availability,avail,available,153040,"oms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:153266,Availability,avail,available,153266,"eats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_C",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:157172,Availability,error,error,157172," 50. MAXITER (DCFT); DCFT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. M",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:157947,Availability,avail,available,157947,"teger; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI); DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:159143,Availability,avail,available,159143,"his number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI); DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI); DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors us",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:165642,Availability,avail,available,165642,"pin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:165712,Availability,avail,available,165712,"pin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:168104,Availability,avail,available,168104,"therwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_OR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:173448,Availability,avail,available,173448,"e: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. OMP_N_THREAD (CPHF); CPHF — The maximum number of integral threads (0 for Process::environment.get_n_threads()). Type: integer; Default: 0. ONEPDM (CCDENSI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:175869,Availability,redundant,redundant,175869,"d to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY); CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176121,Availability,avail,available,176121,"l potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:178397,Availability,avail,available,178397,"onjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:189434,Availability,error,error,189434,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type:",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:189590,Availability,error,error,189590," discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199852,Availability,redundant,redundant,199852,"(Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:202540,Availability,avail,available,202540,"y terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20DISP (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:211259,Availability,toler,tolerance,211259,"rgy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:215102,Availability,avail,available,215102," computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. TRANSLATE_PSI4 (CFOUR); CFOUR — Do translate set Psi4 options to their cfour counterparts. Type: boolean; Default: true. TRIPLES_ALGORITHM (PSIMRCC); PSIMRCC — The type of algorithm to use for (T) computations. Type: string; Possible Values: SPIN_ADAPTED, RESTRICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:1984,Deployability,update,updates,1984," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10560,Deployability,release,release,10560,"); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:15110,Deployability,update,update,15110,"ouble; Default: 1.27. CC_RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV, for CC. Type: integer; Default: -1. CC_RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III, for CC. Type: integer; Default: -1. CC_RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:16399,Deployability,configurat,configurations,16399,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:21519,Deployability,release,release,21519,"ests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:26266,Deployability,continuous,continuous,26266,"(CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kal",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49985,Deployability,integrat,integration,49985,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:65846,Deployability,release,release,65846,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:65946,Deployability,release,release,65946,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:70316,Deployability,configurat,configurational,70316,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:82424,Deployability,update,update,82424," Type: string; Possible Values: SIMULTANEOUS, SEQUENTIAL; Default: SIMULTANEOUS. CFOUR_UIJ_THRESHOLD (CFOUR); CFOUR — Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:82554,Deployability,update,updates,82554," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:93569,Deployability,update,update,93569," Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:93611,Deployability,update,update,93611," Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:93649,Deployability,update,update,93649," Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) co",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:93967,Deployability,update,updates,93967,"ined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 gue",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:94000,Deployability,update,update,94000,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:94038,Deployability,update,update,94038,"efault convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:94362,Deployability,update,updates,94362," damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:94395,Deployability,update,update,94395," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-elect",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:94433,Deployability,update,update,94433," into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF — The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-elect",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:109637,Deployability,update,update,109637,"ace localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (DMRG); DMRG — Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noise prefactors for successive",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:137474,Deployability,update,update,137474," is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:139105,Deployability,update,update,139105,"EININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is deter",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:139293,Deployability,update,update,139293," in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:139437,Deployability,update,update,139437," Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep bloc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:139688,Deployability,update,update,139688,"IMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:139917,Deployability,update,update,139917,"pe: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. HESS_UPDATE (OPTKING); OPTKING — Hessian update scheme. Type: string; Possible Values: NONE, BFGS, MS, POWELL, BOFILL; Default: BFGS. HESS_UPDATE_LIMIT (OPTKING); OPTKING — Do limit the magnitude of changes caused by the Hessian update?. Type: boolean; Default: true. HESS_UPDATE_LIMIT_MAX (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Typ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:157246,Deployability,update,update,157246," 50. MAXITER (DCFT); DCFT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. M",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:178013,Deployability,update,update,178013,". Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORTH_TYPE (DFOCC); DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OVERLAP_CHECK (CCEOM); CCEOM — Report overlaps with old excited-state wave functions, if * available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (DFOCC); DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:181380,Deployability,integrat,integration,181380,"couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_DIPOLE (SCF); SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization sc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187478,Deployability,update,updates,187478," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of par",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187503,Deployability,update,updated,187503," Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of par",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187602,Deployability,update,updated,187602,"ALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:189294,Deployability,update,updates,189294,"ce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherica",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:189398,Deployability,update,updates,189398,"IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type:",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:190297,Deployability,integrat,integration,190297,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:193436,Deployability,update,update,193436,"N, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:193618,Deployability,update,updates,193618,"CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations ma",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:194701,Deployability,update,updates,194701,"ions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbital",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199041,Deployability,install,installation,199041," orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212700,Deployability,integrat,integration,212700,"se. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:213278,Deployability,update,update,213278,"s of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC); OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:215491,Deployability,update,update,215491,"RICTED, UNRESTRICTED; Default: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:216096,Deployability,configurat,configurations,216096,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:219660,Deployability,update,updated,219660,"Default: DETCI. WFN (GLOBALS); GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF); SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF); MCSCF — The symmetry of the SCF wavefunction. Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_SYM (PSIMRCC); PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Possible Values: A, AG, AU, AP, APP, A1, A2, B, BG, BU, B1, B2, B3, B1G, B2G, B3G, B1U, B2U, B3U, 0, 1, 2, 3, 4, 5, 6, 7, 8; Default: 1. WFN_TYPE (DFOCC); DFOCC — Type of the wavefunction. Type: string; Possible Values: DF-OMP2, DF-OMP3, DF-OLCCD, DF-OMP2.5, DFGRAD, DF-CCSD, DF-CCD, DF-CCSD(T), DF-CCSD(AT), QCHF; Default: DF-OMP2. WFN_TYPE (OCC); OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. WRITER_FILE_LABEL (GLOBALS); GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY); CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY); CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC); PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY); CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA); CCLAMBDA — Do use zeta?. Type: boolean; Default: false. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:2004,Energy Efficiency,energy,energy,2004," (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:2059,Energy Efficiency,efficient,efficient,2059,"E. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING); OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AEL (CCDENSITY); CCDENSITY (Expert) — Do compute the approximate excitation level? See Stanton and Bartlett, JCP, 98, 1993, 7034. Type: boolean; Default: false. AIO_CPHF (SAPT); SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT); SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCFT); DCFT — Algorithm to use for the density cumulant and orbital updates in the DCFT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY); CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE); CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY); CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY); CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:4067,Energy Efficiency,reduce,reduces,4067,"efault is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:4121,Energy Efficiency,reduce,reduce,4121,"efault is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:4144,Energy Efficiency,energy,energy,4144,"efault is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:15396,Energy Efficiency,energy,energy,15396,"maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC); FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY); CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC); FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS); GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:15989,Energy Efficiency,energy,energy,15989," string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI); DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI); DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI); DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:17432,Energy Efficiency,reduce,reduces,17432,"singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:17587,Energy Efficiency,energy,energy,17587,"le; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:17639,Energy Efficiency,energy,energy,17639,"le; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:19398,Energy Efficiency,reduce,reduced,19398,"UARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR); CFOUR — Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_A",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:21330,Energy Efficiency,energy,energy,21330,"f you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR); CFOUR — Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vector",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:22352,Energy Efficiency,reduce,reduced,22352," of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR); CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:22951,Energy Efficiency,reduce,reduced,22951,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR); CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR); CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:25181,Energy Efficiency,energy,energy,25181,"AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27748,Energy Efficiency,energy,energy,27748,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction schem",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27789,Energy Efficiency,energy,energy,27789,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction schem",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27978,Energy Efficiency,charge,charge,27978,"CSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31480,Energy Efficiency,energy,energy,31480,"ay; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31869,Energy Efficiency,energy,energy,31869,"ype: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:32341,Energy Efficiency,energy,energy,32341," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:32883,Energy Efficiency,energy,energy,32883,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:32930,Energy Efficiency,energy,energy,32930,"rgy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Default. CFOUR_ECP (CFOUR); CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR); CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:35942,Energy Efficiency,energy,energy,35942," — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR); CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR); CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:42315,Energy Efficiency,adapt,adapted,42315,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:42518,Energy Efficiency,energy,energy,42518,"entations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:43104,Energy Efficiency,adapt,adapted,43104,"sired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:45450,Energy Efficiency,energy,energy,45450,"structs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK). Type: string; Possible Values: PK, AO; Default: No Default. CFOUR_FREQ_ALGORITHM (CFOUR); CFOUR — FREQ_ALGORIT experimental use. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_FROZEN_CORE (CFOUR); CFOUR — Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49000,Energy Efficiency,efficient,efficient,49000,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49111,Energy Efficiency,energy,energy,49111,"er of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesia",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49200,Energy Efficiency,energy,energy,49200," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:51511,Energy Efficiency,reduce,reduce,51511,"OUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:52244,Energy Efficiency,energy,energy,52244,"cular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:52280,Energy Efficiency,energy,energy,52280,"cular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56015,Energy Efficiency,efficient,efficient,56015,"ore memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of O",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:58273,Energy Efficiency,energy,energy,58273,"ES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irredu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:58419,Energy Efficiency,energy,energy,58419,"ve eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the r",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:60385,Energy Efficiency,energy,energy,60385,"mmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:61511,Energy Efficiency,adapt,adapted,61511,"tion, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:63382,Energy Efficiency,energy,energy,63382," case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the \(\alpha\) and the \(\beta\) spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:64964,Energy Efficiency,energy,energy,64964,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:64975,Energy Efficiency,energy,energy,64975,"ed block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR); CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release r",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:73204,Energy Efficiency,energy,energy,73204,"t matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolea",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:73603,Energy Efficiency,reduce,reduced,73603,"ibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR); CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR); CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix e",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:76909,Energy Efficiency,energy,energy,76909,"rface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR); CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR); CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR); CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calcul",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:79412,Energy Efficiency,energy,energy,79412,"ng CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR); CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR); CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR); CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR); CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR); CF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:83147,Energy Efficiency,adapt,adapted,83147,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:88716,Energy Efficiency,charge,charge,88716,"TH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CU",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:95593,Energy Efficiency,efficient,efficient,95593,"ve problems with oscillatory convergence. Type: double; Default: 0.0. DCFT_FUNCTIONAL (DCFT); DCFT — Chooses appropriate DCFT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliar",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:95779,Energy Efficiency,energy,energy,95779,", CEPA0; Default: ODC-12. DCFT_GUESS (DCFT); DCFT (Expert) — Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DCFT_TYPE (DCFT); DCFT — What algorithm to use for the DCFT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DEBUG (CPHF); CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS); GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT); CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT); SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT); SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP); EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS); GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI); DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC); FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS); GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCFT (DCFT); DCFT — Auxiliary basis set for DCFT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT); SAPT — Auxiliary basis set for SAPT El",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:104035,Energy Efficiency,energy,energy,104035," in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vector",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:104625,Energy Efficiency,energy,energy,104625,") is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC); PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS); GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY); CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA); CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE); CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI); DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF); MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCFT); DCFT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:107280,Energy Efficiency,energy,energy,107280,"CFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://s",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:107592,Energy Efficiency,energy,energy,107592,"g DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS); GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. D",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:110294,Energy Efficiency,energy,energy,110294,"Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG); DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG); DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG); DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (D",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:110742,Energy Efficiency,reduce,reduced,110742,"ty RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG); DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG); DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG); DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG); DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG); DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG); DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG); DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:111871,Energy Efficiency,energy,energy,111871,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112164,Energy Efficiency,energy,energy,112164,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112550,Energy Efficiency,energy,energy,112550,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112842,Energy Efficiency,energy,energy,112842,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:113786,Energy Efficiency,energy,energy,113786,"orm spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:113946,Energy Efficiency,energy,energy,113946,"imizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default:",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:114153,Energy Efficiency,energy,energy,114153,"_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:114393,Energy Efficiency,energy,energy,114393," No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for ene",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:114590,Energy Efficiency,energy,energy,114590,"0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:114786,Energy Efficiency,energy,energy,114786,"aling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:114985,Energy Efficiency,energy,energy,114985,Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT,MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:115269,Energy Efficiency,energy,energy,115269,"efault convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default conv",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:115366,Energy Efficiency,energy,energy,115366,"ONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:115600,Energy Efficiency,energy,energy,115600,"criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:115800,Energy Efficiency,energy,energy,115800,"criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC); FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Defau",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:115994,Energy Efficiency,energy,energy,115994,"onvergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on scre",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:116182,Energy Efficiency,energy,energy,116182,"ENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC); MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:116492,Energy Efficiency,energy,energy,116492,"ol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC); OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a dampin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:116834,Energy Efficiency,energy,energy,116834,"F Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SAPT); SAPT — Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117078,Energy Efficiency,charge,charge,117078,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117097,Energy Efficiency,energy,energy,117097,"CPHF equations. Type: conv double; Default: 1e-10. E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. Wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117227,Energy Efficiency,energy,energy,117227,"& Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117335,Energy Efficiency,energy,energy,117335,"EA_POLES (OCC); OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP); EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP); EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinate",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:118138,Energy Efficiency,energy,energy,118138,"e: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:123840,Energy Efficiency,charge,charge,123840,"; DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:129930,Energy Efficiency,energy,energy,129930," 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING); OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:136337,Energy Efficiency,energy,energy,136337,"or the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stor",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:137847,Energy Efficiency,energy,energy,137847," could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Typ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:138043,Energy Efficiency,energy,energy,138043,"IZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC); PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC); DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:149907,Energy Efficiency,power,power,149907,"ns for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. LOCAL_DO_SINGLES (CCEOM); CCEOM —. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCEOM); CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA); CCLAMBDA — Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE); CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_GHOST (CCEOM); CCEOM — Permit ghost atoms to hold projected atomic orbitals to include in the virtual space in local-EOM-CCSD calculations. Type: integer; Default: -1. LOCAL_IBO_CONDITION (FISAPT); FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT); FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT); FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT); FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT); FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (FISAPT); FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF); SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY); CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METHOD (CCEOM); CCEOM — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:152419,Energy Efficiency,energy,energy,152419,"s the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY); CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA); CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE); CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:152812,Energy Efficiency,energy,energy,152812,"Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM); CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT); FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY); CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM); CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:153751,Energy Efficiency,energy,energy,153751,"second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:154676,Energy Efficiency,energy,energy,154676,"tions between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE ve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:156275,Energy Efficiency,energy,energy,156275,"le; Default: 1e-3. MAX_NUM_VECS (DETCI); DETCI — Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAXITER (CCENERGY); CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM); CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA); CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE); CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCFT); DCFT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT); FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC); FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF); MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PSIMRCC); PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT); SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation updat",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:157723,Energy Efficiency,energy,energy,157723,"teger; Default: 100. MAXITER (SAPT); SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF); SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MCSCF_ALGORITHM (DETCI); DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_DIIS_ERROR_TYPE (DETCI); DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI); DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI); DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI); DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_E_CONVERGENCE (DETCI); DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI); DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:158768,Energy Efficiency,energy,energy,158768,". See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI); DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI); DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI); DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI); DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI); DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI); DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI); DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MEMORY (ADC); ADC — The amount of memory available (in Mb). Type: integer; Default: 1000. MIN_CCD_DIISVECS (SAPT); SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT); FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI); DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI); DETCI (Expert) — Do allow “mixed” excitations involving ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:160737,Energy Efficiency,energy,energy,160737,"nvolving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output fi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:165599,Energy Efficiency,energy,energy,165599,"pin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:165631,Energy Efficiency,energy,energy,165631,"pin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:165701,Energy Efficiency,energy,energy,165701,"pin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:166590,Energy Efficiency,energy,energy,166590,"DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set p",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:168123,Energy Efficiency,energy,energy,168123,"therwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_OR",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:170219,Energy Efficiency,energy,energy,170219,"? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4 (SAPT); SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY); CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM); CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC); ADC — The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. NO_DFILE (DETCI); DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_RESPONSE (SAPT); SAPT — Don’t solve the CPHF equations? Evaluate \(E_{ind}^{(20)}\) and \(E_{exch-ind}^{(20)}\) instead of their response-including counterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. NO_SINGLES (PSIMRCC); PSIMRCC — Do disregard updating single excitation amplitudes?. Type: boolean; Default: false. NORM_TOLERANCE (ADC); ADC — The cutoff norm of residual vector in SEM step. Type: conv double; Default: 1e-6. NORMAL_MODES_WRITE (FINDIF); FINDIF — Do write a file containing the normal modes in Molden format? If so, the filename will end in .molden_normal_modes, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. NUM_AMPS_PRINT (ADC); ADC — Number of components of transition amplitudes printed. Type: integer; Default: 5. NUM_AMPS_PRINT (CCENERGY); CCENERGY — Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. NUM_AMPS_PRINT (CCEOM); CCEOM — Number of important CC amplitudes to print. Type: integer; Default: 5. NUM_AMPS_PRINT (CCLAMBDA); CCLAMBDA — Numb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:180031,Energy Efficiency,charge,charges,180031,"; Default: FLETCHER_REEVES. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_CONVERGENCE (OCC); OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC); DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC); OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS); GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (GLOBALS); GLOBALS — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (GLOBALS); GLOBALS (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for basis set incompleteness?. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC); PSIMRCC (Expert) — Do include the terms that couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_DIPOLE (SCF); SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:188021,Energy Efficiency,energy,energy,188021,"S); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: con",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:188134,Energy Efficiency,energy,energy,188134,"gets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:188280,Energy Efficiency,reduce,reduce,188280,"_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA); CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE); CCRESPONSE — Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the RMS of the residual vector in density cu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199413,Energy Efficiency,energy,energy,199413,"ne) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199508,Energy Efficiency,energy,energy,199508,"ount symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199603,Energy Efficiency,energy,energy,199603,"symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:200683,Energy Efficiency,energy,energy,200683,"The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_B, 3-TRIMER, 3-DIMER_AB, 3-DIMER_BC, 3-DIMER_AC, 3-MONOMER_A, 3-MONOMER_B, 3-MONOMER_C; Default: FALSE. SAPT0_E10 (SAPT); SAPT (Expert) — For SAPT0 only, compute only first-order electrostatics and exchange. The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:208576,Energy Efficiency,adapt,adapted,208576,"er type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:208702,Energy Efficiency,energy,energy,208702,"hod. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:210261,Energy Efficiency,energy,energy,210261,"nge-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212912,Energy Efficiency,energy,energy,212912," boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI); DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Defau",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6148,Integrability,rout,routines,6148,"ing; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6747,Integrability,depend,depending,6747," Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, whil",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:28657,Integrability,contract,contraction,28657," Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:28762,Integrability,contract,contraction,28762,"ted). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:28810,Integrability,contract,contraction,28810,"ted). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR); CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:46162,Integrability,contract,contracted,46162,"ng the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR); CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:46375,Integrability,contract,contracted,46375,"(OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geomet",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:46462,Integrability,contract,contracted,46462,"n. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR); CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49985,Integrability,integrat,integration,49985,"n where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57572,Integrability,message,message,57572,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:66013,Integrability,depend,dependent,66013,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:66589,Integrability,depend,dependent,66589,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:68977,Integrability,depend,depending,68977,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:72442,Integrability,message,message,72442," is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:122230,Integrability,rout,routine,122230,"SD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and bet",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:132855,Integrability,depend,dependent,132855," Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GDMA_LIMIT (GDMA); GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the default",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:181380,Integrability,integrat,integration,181380,"couple different reference determinants in perturbative CBS correction computations?. Type: boolean; Default: true. PERTURB_DIPOLE (SCF); SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF); SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI); DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF); SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF); SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF); SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALGO (SCF); SCF (Expert) — Select the PK algorithm to use. For debug purposes, selection will be automated later. Type: string; Possible Values: REORDER, YOSHIMINE; Default: REORDER. PK_ALL_NONSYM (SCF); SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF); SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PK_NO_INCORE (SCF); SCF (Expert) — Deactivate in core algorithm. For debug purposes. Type: boolean; Default: false. POINTS (FINDIF); FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POLE_MAXITER (ADC); ADC — Maximum iteration number in pole searching. Type: integer; Default: 20. PPL_TYPE (DFOCC); DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PR (ADC); ADC — Do use the partial renormalization sc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187093,Integrability,rout,routing,187093,"ues are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boole",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:190297,Integrability,integrat,integration,190297,"l vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI); DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (FNOCC); FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC); OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC); PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF); SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF); SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RAS1 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS1. Type: array; Default: No Default. RAS2 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS2. Type: array; Default: No Default. RAS3 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS3. Type: array; Default: No Default. RAS34_MAX (DETCI); DETCI — maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX (DETCI); DETCI — maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4 (GLOBALS); GLOBALS (Expert) — An array giving the number of orbitals per irrep for RAS4. Type: array; Default: No Default. RAS4_MAX (DETCI); DETCI — maximum number of electrons in RAS IV. Type: integer; Default: -1. READ_SCF_3INDEX (DFOCC); DF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:196745,Integrability,depend,depending,196745,"). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:196907,Integrability,depend,depending,196907,"FO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. RMS_MOGRAD_CONVERGENCE (OCC); OCC — Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. ROOTS_PER_IRREP (ADC); ADC — The poles per irrep vector. Type: array; Default: No Default. ROOTS_PER_IRREP (CCDENSITY); CCDENSITY — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROOTS_PER_IRREP (CCEOM); CCEOM — Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. ROOTS_PER_IRREP (CCLAMBDA); CCLAMBDA — The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:198658,Integrability,depend,dependent,198658," No Default. ROTATE_MO_ANGLE (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF); MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO); THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING); OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC); FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:200347,Integrability,depend,dependencies,200347,"ect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); SCF (Expert) — Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT (SCF); SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF); SCF (Expert) — SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. SAPT (SCF); SCF (Expert) — Are going to do SAPT? If so, what part?. Type: string; Possible Values: FALSE, 2-DIMER, 2-MONOMER_A, 2-MONOMER_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212700,Integrability,integrat,integration,212700,"se. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6375,Modifiability,extend,extended,6375,"imary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain type",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:16399,Modifiability,config,configurations,16399,"ional energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI); DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI); DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT); SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT); SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT); SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC); OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC); FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC); FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC); OCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC); OCC — CEPA Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC); OCC — CEPA same-spin scaling value from SCS-CCSD. Type: double; Default: 1.13. CEPA_TYPE (OCC); OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR); CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:25938,Modifiability,enhance,enhance,25938,"e used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:39662,Modifiability,coupling,coupling,39662,"N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of ene",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:42315,Modifiability,adapt,adapted,42315,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:43104,Modifiability,adapt,adapted,43104,"sired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49258,Modifiability,variab,variables,49258,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56825,Modifiability,coupling,coupling,56825," TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56920,Modifiability,coupling,coupling,56920,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56967,Modifiability,coupling,coupling,56967,"al to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57109,Modifiability,coupling,coupling,57109," available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:60759,Modifiability,variab,variable,60759,"he keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:60809,Modifiability,variab,variable,60809,"gram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The tw",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:61511,Modifiability,adapt,adapted,61511,"tion, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR); CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR); CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:66303,Modifiability,coupling,coupling,66303,"nal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR); CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:70316,Modifiability,config,configurational,70316,"ical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:76205,Modifiability,coupling,coupling,76205,"ten troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR); CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR); CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR); CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR); CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR); CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR); CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:83147,Modifiability,adapt,adapted,83147,"per version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:89369,Modifiability,variab,variables,89369," — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis funct",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:89597,Modifiability,coupling,coupling,89597,"Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: st",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117638,Modifiability,extend,extended,117638,"ng type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, gues",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117768,Modifiability,extend,extended,117768,"es: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP); EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user inpu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:117894,Modifiability,extend,extended,117894,"oolean; Default: true. EFP_ELST_DAMPING (EFP); EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP); EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. EFP_POL_DAMPING (EFP); EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. Type: string; Possible Values: TT, OFF; Default: TT. EKT_EA (OCC); OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC); DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC); OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCFT); DCFT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING); OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM); CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:126385,Modifiability,flexible,flexible,126385," Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:128159,Modifiability,config,configruation,128159,"CF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], ...]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY); CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF); MCSCF — Do attempt to force a two configruation solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:135917,Modifiability,coupling,coupling,135917,"l symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably elimin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:136075,Modifiability,coupling,coupling,136075," boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:137590,Modifiability,coupling,coupling,137590," find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian mat",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:137760,Modifiability,coupling,coupling,137760,"block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI); DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING); OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING); OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING); OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI); DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI); DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC); PSIMRCC — Do include the fourth-order contributions to the e",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:167474,Modifiability,variab,variable,167474,"C) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_O",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:167523,Modifiability,variab,variable,167523,"ion of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC); MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI); DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC); DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:186864,Modifiability,coupling,coupling,186864,"tring; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:208576,Modifiability,adapt,adapted,208576,"er type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after conve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:216096,Modifiability,config,configurations,216096,"nal algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WFN (CCDENSITY); CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY); CCENERGY (Expert) — Wavefunction type. Type: string; Possible Values: CCSD, CCSD_T, CCSD_AT, EOM_CCSD, LEOM_CCSD, BCCD, BCCD_T, CC2, CC3, EOM_CC2, EOM_CC3, CCSD_MVD; Default: NONE. WFN (CCEOM); CCEOM (Expert) — Wavefunction type. Type: string; Possible Values: EO",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:5476,Performance,perform,performing,5476,"t: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for B",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6521,Performance,optimiz,optimization,6521,"ing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6840,Performance,cache,cache,6840,"tring; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculation",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6977,Performance,perform,perform,6977," Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:7197,Performance,cache,cache,7197,"sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:7259,Performance,cache,cache,7259,"sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:7529,Performance,cache,cache,7529,"Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that al",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:7741,Performance,cache,cache,7741,"g on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitud",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:7803,Performance,cache,cache,7803,"g on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitud",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8084,Performance,cache,cache,8084,"ing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that al",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8298,Performance,cache,cache,8298,"f 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8360,Performance,cache,cache,8360,"f 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8630,Performance,cache,cache,8630,"l for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8848,Performance,cache,cache,8848,"y help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory proble",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:8910,Performance,cache,cache,8910,"y help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory proble",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:9191,Performance,cache,cache,9191,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:9458,Performance,cache,cache,9458,"ry problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Typ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:9700,Performance,cache,cache,9700,"r libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:9762,Performance,cache,cache,9762,"r libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10032,Performance,cache,cache,10032,"problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonica",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10162,Performance,cache,cache,10162,"\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10281,Performance,cache,cache,10281,"E — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Def",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10412,Performance,cache,cache,10412,"integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:10568,Performance,cache,cached,10568,"); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:24902,Performance,cache,cache,24902,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:25096,Performance,perform,performed,25096,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Sp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27004,Performance,perform,performance,27004,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27378,Performance,optimiz,optimization,27378,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the S",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:29641,Performance,optimiz,optimizations,29641,"tion scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the r",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:29808,Performance,optimiz,optimizations,29808,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum nu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:31177,Performance,perform,performed,31177,"2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:32374,Performance,optimiz,optimization,32374," OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR); CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR); CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Ty",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:38518,Performance,optimiz,optimization,38518,"d in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:38646,Performance,optimiz,optimizations,38646,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The va",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:38712,Performance,optimiz,optimizer,38712,"group having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The va",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:39116,Performance,perform,performed,39116,"ether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:41248,Performance,perform,performed,41248,"ger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR); CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR); CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR); CFOUR —",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:46728,Performance,perform,performs,46728,"e all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:46893,Performance,perform,performs,46893,"hat this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR); CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47071,Performance,perform,performs,47071,"o Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47305,Performance,optimiz,optimization,47305,"for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode)",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47323,Performance,optimiz,optimization,47323,"tracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47465,Performance,optimiz,optimizations,47465,"ingle d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47531,Performance,optimiz,optimizer,47531,"ingle d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. Th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47832,Performance,optimiz,optimization,47832,"d-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47878,Performance,optimiz,optimizations,47878,"as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:47944,Performance,optimiz,optimizer,47944,"as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:48176,Performance,optimiz,optimizations,48176,"2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. E",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:48216,Performance,optimiz,optimizations,48216,"ecifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:48282,Performance,optimiz,optimizer,48282,"ecifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:48483,Performance,optimiz,optimization,48483,"ry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49165,Performance,optimiz,optimization,49165," optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:49285,Performance,optimiz,optimized,49285,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:50998,Performance,perform,performs,50998,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:51136,Performance,perform,performs,51136,"isk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:52945,Performance,perform,performed,52945,"le\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:54589,Performance,optimiz,optimizations,54589,"r CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:55506,Performance,optimiz,optimization,55506,"Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specif",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56191,Performance,optimiz,optimizations,56191,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56257,Performance,optimiz,optimizer,56257,"word CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested vi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:56527,Performance,perform,performs,56527,"d: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will termin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57499,Performance,optimiz,optimization,57499,"; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR); CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calcu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57802,Performance,optimiz,optimization,57802,"ltiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR); CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57854,Performance,optimiz,optimizations,57854,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:57920,Performance,optimiz,optimizer,57920,"ed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR); CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR); CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR); CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR); CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: inte",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:67170,Performance,perform,performed,67170," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR); CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR); CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:68884,Performance,perform,performed,68884,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:70121,Performance,perform,performed,70121,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:72292,Performance,perform,performed,72292,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:82583,Performance,optimiz,optimization,82583," the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR); CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:83302,Performance,perform,performed,83302,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:83606,Performance,perform,performed,83606,"ubsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR); CFOUR — Specifies the Y-component of an external electric field. The v",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:88346,Performance,optimiz,optimization,88346,"ansition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in thi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:88591,Performance,perform,perform,88591,"ollapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLIN",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:93262,Performance,perform,performed,93262,"ault. CUTOFF (DFOCC); DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (FISAPT); FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:106106,Performance,perform,performed,106106,"fault: 6. DIIS_MAX_VECS (DETCI); DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:111795,Performance,perform,perform,111795,"rray; Default: No Default. DMRG_UNITARY_WRITE (DMRG); DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:111926,Performance,perform,perform,111926," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:111943,Performance,optimiz,optimizations,111943," Type: boolean; Default: true. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112088,Performance,perform,perform,112088,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112219,Performance,perform,perform,112219,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112236,Performance,optimiz,optimizations,112236,"n?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112475,Performance,perform,perform,112475,"persion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112605,Performance,perform,perform,112605," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112622,Performance,optimiz,optimizations,112622," we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112767,Performance,perform,perform,112767,"omponent-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. G",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112897,Performance,perform,perform,112897,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:112914,Performance,optimiz,optimizations,112914,"try optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:113550,Performance,optimiz,optimization,113550,"MP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:119848,Performance,perform,perform,119848,"Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:119954,Performance,perform,performs,119954,"e Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:120032,Performance,perform,performs,120032,"erence wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter withou",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:121159,Performance,optimiz,optimization,121159,"_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:123589,Performance,optimiz,optimization,123589,"CI); DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI); DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI); DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING); OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT); FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT); FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT); FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT); FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:125804,Performance,optimiz,optimizations,125804,"t: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:126638,Performance,optimiz,optimization,126638,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:131246,Performance,optimiz,optimized,131246,"uation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:131520,Performance,optimiz,optimized,131520,"lse. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:131717,Performance,optimiz,optimization,131717,"lt. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, ... to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are L",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:132071,Performance,optimiz,optimization,132071,"efault. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:134278,Performance,optimiz,optimization,134278,"hould be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA); GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA); GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:134717,Performance,optimiz,optimizations,134717,"IUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:135216,Performance,optimiz,optimization,135216,"to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:135391,Performance,optimiz,optimized,135391,"ITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:140340,Performance,perform,perform,140340,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INDEPENDENT_J_TYPE (SCF); SCF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: in",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:145070,Performance,perform,performed,145070,"ll three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF); SCF — Minimum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. LEVEL_SHIFT (DFOCC); DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF); MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC); OCC — Level shift to aid convergence. Type: double; Default: 0.02. LINEAR (CCRESPONSE); CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC); DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINEQ_SOLVER (OCC); OCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINESEARCH_STATIC_MAX (OPTKING); OPTKING — If doing a static line search, this fixes the largest step, whose largest change in an internal c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:153796,Performance,perform,performed,153796,"second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA); CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OP",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:154201,Performance,optimiz,optimization,154201,"— Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF); SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC); DFOCC — Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MAX_MOGRAD_CONVERGENCE (OCC); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:160936,Performance,optimiz,optimization,160936,"iven excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC); DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:161042,Performance,optimiz,optimization,161042,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:163269,Performance,perform,perform,163269,"? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC); DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:164263,Performance,optimiz,optimized-,164263,"D (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:164381,Performance,optimiz,optimized-,164381,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn seri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:166465,Performance,perform,performed,166465,"_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Exper",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:173346,Performance,perform,perform,173346," boolean; Default: false. OCC_ORBS_PRINT (OCC); OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC); FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT); SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCFT); DCFT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC); DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC); OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC); PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE); CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS); MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. OMP_N_THREAD (CPHF); CPHF — The maximum number of integral threads",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:175645,Performance,optimiz,optimization,175645," false. ONEPDM_GRID_CUTOFF (CCDENSITY); CCDENSITY — Cutoff (e/A^3) for printing one-particle density matrix values on a grid. Type: double; Default: 1.0e-30. ONEPDM_GRID_DUMP (CCDENSITY); CCDENSITY — Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY); CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Po",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176056,Performance,optimiz,optimization,176056,"ype: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algor",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176239,Performance,optimiz,optimization,176239,"D. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176580,Performance,perform,performed,176580,"ype: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LIN",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176873,Performance,optimiz,optimize,176873,"edundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: stri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:176951,Performance,optimiz,optimize,176951,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:186441,Performance,perform,perform,186441,"ties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN (GLOBALS); GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY); CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187745,Performance,perform,perform,187745,"slates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:187826,Performance,perform,perform,187826," — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC); DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF); SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP); EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. QMEFP_ELST (EFP); EFP — Do include electrostatics energy term in QM/EFP computation?. Type: boolean; Default: true. QMEFP_POL (EFP); EFP — Do include polarization energy term in EFP computation?. Type: boolean; Default: true. R4S (DETCI); DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:193417,Performance,perform,performing,193417,"N, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:194484,Performance,optimiz,optimizations,194484,"e on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:195514,Performance,optimiz,optimized,195514,"(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:195732,Performance,optimiz,optimized,195732,"at the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGE",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:204467,Performance,optimiz,optimized,204467,"olute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC); DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT); CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI); DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:208136,Performance,perform,perform,208136,"UBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondition max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_R",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:208250,Performance,perform,perform,208250,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:209521,Performance,perform,perform,209521,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum si",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:209596,Performance,perform,performed,209596,"ir energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will ter",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:209714,Performance,perform,perform,209714,"e; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenv",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:211062,Performance,optimiz,optimization,211062,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety f",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:3869,Safety,avoid,avoid,3869,"will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA); CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT); CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCFT); DCFT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING); OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Defa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:27444,Safety,safe,safe,27444,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the S",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:86881,Safety,safe,safety,86881," second monomer. Type: integer; Default: 50. CI_MAXITER (DETCI); DETCI — Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. CI_NUM_THREADS (DETCI); DETCI (Expert) — Number of threads for DETCI. Type: integer; Default: 1. CI_TYPE (GLOBALS); GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI); DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. CIS_AD_STATES (CPHF); CPHF — Which states to save AD Matrices for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_AMPLITUDE_CUTOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. CIS_DOPDM_STATES (CPHF); CPHF — Which states to save AO difference OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:90092,Safety,safe,safety,90092," COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in this case. Note that when coupled induction is turned off, the Psi variables SAPT IND20,R ENERGY and SAPT EXCH-IND20,R ENERGY actually contain the uncoupled induction! A corresponding warning is issued in the output file. Type: boolean; Default: true. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS); GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS); GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS (GLOBALS); GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS); GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds ESP - Dt, ESP ORBITALS - Psi_a_N, Psi_b_N BASIS_FUNCTIONS - Phi_N LOL - LOLa, LOLb ELF - ELFa, ELFb. Type: array; Default: No Default. CUBIC_BASI",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:108206,Safety,avoid,avoid,108206," DMRG_CASPT2_CALC (DMRG); DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG); DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG); DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG); DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG); DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG); DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG); DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG); DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG); DMRG — Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG); DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG); DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG); DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG); DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:125208,Safety,safe,safety,125208,"ype: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop F-SAPT data. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT); FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT); FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT); FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT); FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT); FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT); FISAPT — Manual link bond specification [[Atom1, Atom2], ...]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT); FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT); FISAPT — Filepath to drop scalar data. Type: string; Default: plot/. FITTING_ALGORITHM (CPHF); CPHF — Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (CPHF); CPHF — The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. FIXED_BEND (OPTKING); OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances b",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:129240,Safety,redund,redundant,129240,"oefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF); SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF); SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF); SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF); SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF); SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF); SCF — The occupations of the orbital indices specified above (\(0.0\ge occ \ge 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING); OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING); OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS); GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:175869,Safety,redund,redundant,175869,"d to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY); CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF); SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC); DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:199852,Safety,redund,redundant,199852,"(Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT); CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate * installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC); FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC); FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC); FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC); FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI); DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_ORTHOGONALIZATION (SCF); SCF — SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE (SCF); SCF — Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density in SAD Guess. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF); SCF — Convergence criterion for SCF energy in SAD Guess. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF); SCF (Expert) — Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER (SCF); ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:202689,Safety,safe,safety,202689,"e. SAPT0_E20DISP (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double;",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:202925,Safety,safe,safety,202925,": false. SAPT0_E20IND (SAPT); SAPT (Expert) — For SAPT0 only, compute only second-order induction The integrals are computed before any terms, so all integrals will be computed even if they are not needed for the requested term. Type: boolean; Default: false. SAPT_LEVEL (SAPT); SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT); SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT); SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT); SAPT — Memory safety. Type: double; Default: 0.9. SAVE_JK (SCF); SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF); SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The Schwarz cutoff value. Type: double; Default: 1.0e-12. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling fa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212074,Safety,safe,safety,212074,"ization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhono",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:43476,Security,access,access,43476,", while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR); CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR); CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR); CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR); CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR); CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword \(\times 10^{-6}\). Type: integer; Default: 0. CFOUR_FOCK (CFOUR); CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:52130,Security,access,access,52130,"s a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; De",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:6028,Testability,benchmark,benchmarking,6028,"ring; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS); GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:54017,Testability,test,tested,54017,"igher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:59941,Testability,log,logical,59941," be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:64038,Testability,test,testing,64038,"ng. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR); CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR); CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR); CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, wh",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:102273,Testability,log,logarithmic,102273," Type: python; Default: No Default. DFT_DISPERSION_PARAMETERS (SCF); SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Type: array; Default: No Default. DFT_FUNCTIONAL (SCF); SCF — The DFT combined functional name, e.g. B3LYP, or GEN to use a python reference to a custom functional specified by DFT_CUSTOM_FUNCTIONAL. Type: string; Default: HF. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:161274,Testability,test,test,161274,"s. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output fil",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:193963,Testability,test,tested,193963,"ctor guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coup",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:211273,Testability,test,testing,211273,"rgy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212470,Testability,test,test,212470,"RMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:212559,Testability,test,test,212559,"value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regu",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:215743,Testability,test,testing,215743,"lt: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:18464,Usability,simpl,simply,18464," recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR); CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR); CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR); CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR); CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:37141,Usability,clear,clearly,37141,"yword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR); CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html:69101,Usability,simpl,simply,69101,"ual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.1.0/autodoc_options_c_bymodule-1.html:483,Deployability,update,updated,483,"﻿. Keywords by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_options_c_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_options_c_bymodule-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_options_c_bymodule.html:483,Deployability,update,updated,483,"﻿. Keywords by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_options_c_bymodule.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html:1979,Deployability,update,updated,1979,"    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html:487,Energy Efficiency,meter,meters,487,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html:839,Energy Efficiency,joule,joule,839,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html:965,Energy Efficiency,joule,joule,965,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html:1979,Deployability,update,updated,1979,"    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html:487,Energy Efficiency,meter,meters,487,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html:839,Energy Efficiency,joule,joule,839,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html:965,Energy Efficiency,joule,joule,965,"﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. h; 6.62606896E-34; The Planck constant (Js). c; 2.99792458E8; Speed of light (ms$^{-1}$). kb; 1.3806504E-23; The Boltzmann constant (JK$^{-1}$). R; 8.314472; Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917720859; Bohr to Angstroms conversion factor. bohr2m; 0.52917720859E-10; Bohr to meters conversion factor. bohr2cm; 0.52917720859E-8; Bohr to centimeters conversion factor. amu2g; 1.660538782E-24; Atomic mass units to grams conversion factor. amu2kg; 1.660538782E-27; Atomic mass units to kg conversion factor. au2amu; 5.485799097E-4; Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744E-18; Hartree to joule conversion factor. hartree2aJ; 4.359744; Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; Calorie to joule conversion factor. dipmom_au2si; 8.47835281E-30; Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.54174623; Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640952E-30; Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999679; Speed of light in atomic units. hartree2ev; 27.21138; Hartree to eV conversion factor. hartree2wavenumbers; 219474.6; Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5095; Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.500; Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6.579684E9; Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7551; kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; Vacuum permittivity (Fm$^{-1}$). na; 6.02214179E23; Avagadro’s number. me; 9.10938215E-31; Electron rest mass (in kg). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases-1.html:128,Availability,avail,availability,128,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Basis Sets by Element. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_,MatchSource.WIKI,psi4manual/1.1.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases-1.html:132561,Deployability,update,updated,132561,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . minix; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Basis Sets by Element. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases.html:128,Availability,avail,availability,128,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Basis Sets by Element. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g_d_,MatchSource.WIKI,psi4manual/1.1.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases.html:132561,Deployability,update,updated,132561,"  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . minix; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Basis Sets by Element. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:469,Availability,checkpoint,checkpoint,469,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:6232,Availability,error,error,6232,"; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:7064,Deployability,update,updated,7064,"; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:3928,Integrability,contract,contractions,3928,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:719,Modifiability,flexible,flexible,719,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html:234,Performance,optimiz,optimization,234,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:469,Availability,checkpoint,checkpoint,469,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:6232,Availability,error,error,6232,"; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:7064,Deployability,update,updated,7064,"; Derivative ERIs are stored in files 200, 201, 202, etc. File 200. 220; PSIF_3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS;  . 228; PSIF_3B_SAPT_BB_DF_INTS;  . 229; PSIF_3B_SAPT_CC_DF_INTS;  . 230; PSIF_3B_SAPT_AMPS;  . 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:3928,Integrability,contract,contractions,3928,"CC_CINTS_NEW;  . 118; PSIF_CC_DINTS_NEW;  . 119; PSIF_CC_EINTS_NEW;  . 120; PSIF_CC_FINTS_NEW;  . 121; PSIF_CC_LAMBDA;  . 122; PSIF_CC_RAMPS;  . 123; PSIF_CC_LAMPS;  . 124; PSIF_CC_LR;  . 125; PSIF_CC_DIIS_ERR;  . 126; PSIF_CC_DIIS_AMP;  . 127; PSIF_CC_TMP;  . 128; PSIF_CC_TMP0;  . 129; PSIF_CC_TMP1;  . 130; PSIF_CC_TMP2;  . 131; PSIF_CC_TMP3;  . 132; PSIF_CC_TMP4;  . 133; PSIF_CC_TMP5;  . 134; PSIF_CC_TMP6;  . 135; PSIF_CC_TMP8;  . 137; PSIF_CC_TMP9;  . 138; PSIF_CC_TMP10;  . 139; PSIF_CC_TMP11;  . 140; PSIF_EOM_D;  . 141; PSIF_EOM_CME;  . 142; PSIF_EOM_Cme;  . 143; PSIF_EOM_CMNEF;  . 144; PSIF_EOM_Cmnef;  . 145; PSIF_EOM_CMnEf;  . 146; PSIF_EOM_SIA;  . 147; PSIF_EOM_Sia;  . 148; PSIF_EOM_SIJAB;  . 149; PSIF_EOM_Sijab;  . 150; PSIF_EOM_SIjAb;  . 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:719,Modifiability,flexible,flexible,719,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html:234,Performance,optimiz,optimization,234,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING;  . 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX;  . 31; PSIF_DSCF;  . 32; PSIF_CHKPT; new libpsio checkpoint file number. 33; PSIF_SO_TEI;  . 34; PSIF_SO_PK;  . 35; PSIF_OEI;  . 36; PSIF_SO_ERF_TEI;  . 37; PSIF_SO_ERFC_TEI;  . 38; PSIF_SO_R12;  . 39; PSIF_SO_R12T1;  . 40; PSIF_DERINFO;  . 41; PSIF_SO_PRESORT;  . 42; PSIF_OLD_CHKPT; Until we have flexible PSIF_CHKPT this will store previous calculation info. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY;  . 46; PSIF_AO_DGDBZ;  . 50; PSIF_PSIMRCC_INTEGRALS;  . 51; PSIF_PSIMRCC_RESTART;  . 52; PSIF_MCSCF;  . 53; PSIF_TPDM_HALFTRANS;  . 60; PSIF_DETCAS;  . 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-tranformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 65; PSIF_DFT_GRID; Storage for DFT/pseudospectral grid. 66; PSIF_DF_TENSOR;  . 67; PSIF_PS_TENSOR;  . 71; PSIF_TPDM_PRESORT;  . 72; PSIF_MO_TEI;  . 73; PSIF_MO_OPDM;  . 74; PSIF_MO_TPDM;  . 75; PSIF_MO_LAG;  . 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM;  . 78; PSIF_DBOC; dboc:. 79; PSIF_MO_R12;  . 80; PSIF_MO_R12T2;  . 81; PSIF_MO_AA_TEI;  . 82; PSIF_MO_BB_TEI;  . 83; PSIF_MO_AB_TEI;  . 84; PSIF_MO_AA_TPDM;  . 85; PSIF_MO_BB_TPDM;  . 86; PSIF_MO_AB_TPDM;  . 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html:584,Deployability,update,updated,584,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html:165,Modifiability,variab,variable,165,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html:190,Modifiability,variab,variable,190,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html:584,Deployability,update,updated,584,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html:165,Modifiability,variab,variable,165,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html:190,Modifiability,variab,variable,190,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCDENSITY; CCENERGY; CCEOM; CCLAMBDA; CCRESPONSE; CCTRIPLES; DCFT; DETCI; DFMP2; DFOCC; DMRG; EFP; FISAPT; FNOCC; MCSCF; MRCC; OCC; OPTKING; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3637,Deployability,update,updated,3637," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:5144,Deployability,update,updated,5144,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:859,Energy Efficiency,energy,energy,859,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1173,Energy Efficiency,energy,energy,1173,"ng best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1597,Energy Efficiency,energy,energy,1597,"th ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:2028,Energy Efficiency,energy,energy,2028,"CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cart",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:2942,Energy Efficiency,energy,energy,2942,"rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3442,Energy Efficiency,energy,energy,3442,". cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3666,Energy Efficiency,energy,energy,3666," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4466,Energy Efficiency,energy,energy,4466,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4786,Energy Efficiency,energy,energy,4786,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3618,Modifiability,variab,variables,3618," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:805,Performance,optimiz,optimization,805,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1491,Performance,optimiz,optimization,1491,"CSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1692,Performance,optimiz,optimization,1692,"ohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfou",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1851,Performance,optimiz,optimization,1851,". cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1948,Performance,optimiz,optimization,1948,"-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using autom",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3083,Performance,optimiz,optimization,3083,"four and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/s",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:3718,Performance,perform,performed,3718," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4357,Performance,optimiz,optimization,4357,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4568,Performance,optimiz,optimization,4568,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:165,Testability,test,testing,165,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:1300,Testability,test,tests,1300,"csd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4042,Testability,test,testing,4042,"-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html:4220,Testability,test,testing,4220,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3637,Deployability,update,updated,3637," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:5144,Deployability,update,updated,5144,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:859,Energy Efficiency,energy,energy,859,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1173,Energy Efficiency,energy,energy,1173,"ng best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1597,Energy Efficiency,energy,energy,1597,"th ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:2028,Energy Efficiency,energy,energy,2028,"CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cart",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:2942,Energy Efficiency,energy,energy,2942,"rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3442,Energy Efficiency,energy,energy,3442,". cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks t",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3666,Energy Efficiency,energy,energy,3666," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4466,Energy Efficiency,energy,energy,4466,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4786,Energy Efficiency,energy,energy,4786,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3618,Modifiability,variab,variables,3618," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:805,Performance,optimiz,optimization,805,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1491,Performance,optimiz,optimization,1491,"CSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1692,Performance,optimiz,optimization,1692,"ohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfou",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1851,Performance,optimiz,optimization,1851,". cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1948,Performance,optimiz,optimization,1948,"-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using autom",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3083,Performance,optimiz,optimization,3083,"four and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/s",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:3718,Performance,perform,performed,3718," ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4357,Performance,optimiz,optimization,4357,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4568,Performance,optimiz,optimization,4568,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:165,Testability,test,testing,165,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CFOUR¶. Input File; Description. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:1300,Testability,test,tests,1300,"csd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4042,Testability,test,testing,4042,"-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PS",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html:4220,Testability,test,testing,4220,"unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_chemps2-1.html:507,Deployability,update,updated,507,"﻿. CHEMPS2. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CHEMPS2¶. Input File; Description. chemps2/caspt2-n2; dmrg-caspt2 on nitrogen. chemps2/natural-orbital; dmrg-scf on N2. chemps2/caspt2-small; dmrg-caspt2 on nitrogen. chemps2/scf-n2; dmrg-scf on N2. chemps2/ci-h2o; dmrg-ci on water. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_chemps2-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_chemps2.html:507,Deployability,update,updated,507,"﻿. CHEMPS2. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. CHEMPS2¶. Input File; Description. chemps2/caspt2-n2; dmrg-caspt2 on nitrogen. chemps2/natural-orbital; dmrg-scf on N2. chemps2/caspt2-small; dmrg-caspt2 on nitrogen. chemps2/scf-n2; dmrg-scf on N2. chemps2/ci-h2o; dmrg-ci on water. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_chemps2.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:8036,Availability,checkpoint,checkpoint,8036,"cks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4005,Deployability,install,install,4005,"ntract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4268,Deployability,update,update,4268,"06) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5692,Deployability,update,update,5692,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9884,Deployability,update,update,9884,"ation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24950,Deployability,update,updated,24950,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27590,Deployability,update,update,27590,"imization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29741,Deployability,update,update,29741,"only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:30764,Deployability,update,updated,30764,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32223,Deployability,update,update,32223,"let orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:35355,Deployability,update,updated,35355,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:663,Energy Efficiency,energy,energy,663,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:1345,Energy Efficiency,energy,energy,1345,"5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:1605,Energy Efficiency,energy,energy,1605,"ith EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2782,Energy Efficiency,energy,energy,2782,"ous extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3000,Energy Efficiency,energy,energy,3000,"arge; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3874,Energy Efficiency,energy,energy,3874,"fied using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4080,Energy Efficiency,energy,energy,4080,"g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4153,Energy Efficiency,charge,charge,4153,"irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4169,Energy Efficiency,energy,energy,4169,"irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5036,Energy Efficiency,energy,energy,5036,"Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional wit",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5084,Energy Efficiency,energy,energy,5084,". sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O mol",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5177,Energy Efficiency,energy,energy,5177,"rgy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5335,Energy Efficiency,energy,energy,5335,"on. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5379,Energy Efficiency,energy,energy,5379," using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-p",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5558,Energy Efficiency,energy,energy,5558,"thylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5829,Energy Efficiency,energy,energy,5829," Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:6086,Energy Efficiency,energy,energy,6086,"rgy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:6267,Energy Efficiency,energy,energy,6267," variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methylo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:6386,Energy Efficiency,energy,energy,6386,"or the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:7755,Energy Efficiency,energy,energy,7755," cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:7960,Energy Efficiency,energy,energy,7960,"isSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:8846,Energy Efficiency,energy,energy,8846," cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9478,Energy Efficiency,energy,energy,9478,"T (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:10087,Energy Efficiency,energy,energy,10087,"test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:10394,Energy Efficiency,energy,energy,10394,"correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target ex",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:11185,Energy Efficiency,energy,energy,11185," H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single poi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:11850,Energy Efficiency,energy,energy,11850,"rence numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:11872,Energy Efficiency,energy,energy,11872,"n in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:12314,Energy Efficiency,energy,energy,12314,"s designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:12475,Energy Efficiency,energy,energy,12475,"t, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule w",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:12792,Energy Efficiency,energy,energy,12792," in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-6",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:12933,Energy Efficiency,energy,energy,12933,"DZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ leve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13220,Energy Efficiency,energy,energy,13220,"ribed using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13524,Energy Efficiency,energy,energy,13524,"s is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13836,Energy Efficiency,energy,energy,13836,"nput. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14210,Energy Efficiency,energy,energy,14210,"cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14329,Energy Efficiency,energy,energy-large,14329," but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14430,Energy Efficiency,energy,energy,14430,"gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15123,Energy Efficiency,energy,energy,15123,"RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; V",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15457,Energy Efficiency,energy,energy,15457,"** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15956,Energy Efficiency,energy,energy,15956,"astup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16157,Energy Efficiency,energy,energy,16157,"CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16300,Energy Efficiency,energy,energy,16300,"h; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16766,Energy Efficiency,energy,energy,16766,"Z \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16881,Energy Efficiency,energy,energy,16881,"r. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17016,Energy Efficiency,energy,energy,17016,"water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17319,Energy Efficiency,energy,energy,17319,"energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVD",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17581,Energy Efficiency,energy,energy,17581," presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18253,Energy Efficiency,energy,energy,18253,"PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18303,Energy Efficiency,energy,energy,18303,"g energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of ben",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18381,Energy Efficiency,energy,energy,18381,"uivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18452,Energy Efficiency,energy,energy,18452," computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18858,Energy Efficiency,energy,energy,18858,"the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) ope",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18908,Energy Efficiency,energy,energy,18908,"n must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with j",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18981,Energy Efficiency,energy,energy,18981,"e positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:19103,Energy Efficiency,energy,energy,19103,"5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G opti",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:19822,Energy Efficiency,energy,energy,19822,"ntral bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy poi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:19903,Energy Efficiency,energy,energy,19903,"; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian inp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20808,Energy Efficiency,energy,energy,20808,"c37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20919,Energy Efficiency,energy,energy,20919,"nd density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21041,Energy Efficiency,energy,energy,21041,"omputed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21101,Energy Efficiency,energy,energy,21101,"F. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-gra",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:22284,Energy Efficiency,energy,energy,22284,"ad1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:22320,Energy Efficiency,energy,energy,22320,"ad1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:22414,Energy Efficiency,energy,energy,22414,"of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise corr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:23431,Energy Efficiency,energy,energy,23431,"ion energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartes",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:23888,Energy Efficiency,energy,energy,23888,"p; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:23984,Energy Efficiency,energy,energy,23984,"hane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24755,Energy Efficiency,energy,energy,24755,"z et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24979,Energy Efficiency,energy,energy,24979,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:25146,Energy Efficiency,energy,energy,25146," so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:25804,Energy Efficiency,energy,energy,25804,"etch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:25947,Energy Efficiency,energy,energy,25947,"ce scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26184,Energy Efficiency,energy,energy,26184,"angle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26670,Energy Efficiency,energy,energy,26670,"est CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handl",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26967,Energy Efficiency,energy,energy,26967,"nimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27050,Energy Efficiency,energy,energy,27050,"-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27146,Energy Efficiency,energy,energy,27146,"p2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are rea",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27727,Energy Efficiency,energy,energy,27727," state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:28010,Energy Efficiency,energy,energy,28010," cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:28608,Energy Efficiency,energy,energy,28608,"s and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29053,Energy Efficiency,energy,energy,29053,"adical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29529,Energy Efficiency,energy,energy,29529,"bs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 29",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29614,Energy Efficiency,energy,energy,29614,"or the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scan",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29882,Energy Efficiency,energy,energy,29882,"xch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:30071,Energy Efficiency,energy,energy,30071,"ecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:30797,Energy Efficiency,charge,charge,30797,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:31010,Energy Efficiency,energy,energy,31010,"mputation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32178,Energy Efficiency,energy,energy,32178," state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ anal",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32731,Energy Efficiency,energy,energy,32731,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:33326,Energy Efficiency,energy,energy,33326," basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:33376,Energy Efficiency,energy,energy,33376,"C-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to m",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:33460,Energy Efficiency,energy,energy,33460,"ed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34321,Energy Efficiency,energy,energy,34321,"; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34421,Energy Efficiency,energy,energy,34421,"laced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Create",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34690,Energy Efficiency,energy,energy,34690,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34796,Energy Efficiency,energy,energy,34796,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:35015,Energy Efficiency,energy,energy,35015,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:12767,Integrability,wrap,wrapper,12767," in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-6",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14916,Integrability,depend,depend,14916,"l ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15019,Integrability,depend,depend,15019,"ne*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation invo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17196,Integrability,interface,interface,17196,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17213,Integrability,interface,interface,17213,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21007,Integrability,interface,interface,21007,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24025,Integrability,rout,routing,24025,"2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is perfor",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24555,Integrability,depend,depend,24555,"cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24658,Integrability,depend,depend,24658,"+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water mol",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32696,Integrability,wrap,wrappers,32696,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3973,Modifiability,plugin,plugins,3973,"ntract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9352,Modifiability,variab,variables,9352,"E, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9435,Modifiability,variab,variables,9435,"S=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17744,Modifiability,variab,variables,17744,"(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:24931,Modifiability,variab,variables,24931,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:299,Performance,optimiz,optimizations,299,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:725,Performance,optimiz,optimization,725,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:796,Performance,optimiz,optimization,796,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:1802,Performance,optimiz,optimization,1802,"tion for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2636,Performance,perform,performed,2636,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:4244,Performance,perform,performs,4244,"06) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5652,Performance,perform,performs,5652,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:7560,Performance,perform,performing,7560,"req-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:8126,Performance,optimiz,optimization,8126,"f the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9222,Performance,perform,performed,9222,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9604,Performance,perform,performs,9604,". scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorith",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9622,Performance,optimiz,optimization,9622,". scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorith",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9864,Performance,perform,performs,9864,"ation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:10511,Performance,optimiz,optimization,10511,"adical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O mo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13264,Performance,optimiz,optimization,13264,"apolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-fr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13342,Performance,optimiz,optimized,13342,"apolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-fr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13612,Performance,optimiz,optimization,13612,"r full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14493,Performance,optimiz,optimization,14493,"eckrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15209,Performance,optimiz,optimization,15209,"gy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15544,Performance,optimiz,optimization,15544,"MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. df",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15785,Performance,optimiz,optimization,15785,"tings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15863,Performance,optimiz,optimization,15863," all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16101,Performance,perform,performed,16101,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16237,Performance,optimiz,optimizations,16237,"ozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18551,Performance,optimiz,optimized,18551," computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:18696,Performance,optimiz,optimization,18696,"les, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20326,Performance,optimiz,optimization,20326,"ctrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20456,Performance,optimiz,optimized,20456,"uencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20856,Performance,optimiz,optimization,20856,"n-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21909,Performance,perform,performed,21909,"nergy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:25031,Performance,perform,performed,25031,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:25884,Performance,optimiz,optimizations,25884,"e geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-C",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26048,Performance,optimiz,optimizations,26048,"ce scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26597,Performance,optimiz,optimization,26597,"freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26793,Performance,perform,performed,26793,"rgy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, whe",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27556,Performance,perform,performs,27556,"imization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:28499,Performance,optimiz,optimization,28499,"sing the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29364,Performance,perform,performed,29364,"uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the sa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29717,Performance,perform,performs,29717,"only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32199,Performance,perform,performs,32199,"let orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32625,Performance,optimiz,optimization,32625,"ning virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; F",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32721,Performance,optimiz,optimize,32721,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:33268,Performance,optimiz,optimization,33268," extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF single",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34092,Performance,perform,performed,34092,"CTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:5966,Safety,avoid,avoided,5966,"fferent algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27868,Safety,avoid,avoided,27868,"ing a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in therm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32368,Safety,avoid,avoided,32368,"ptimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2649,Security,validat,validate,2649,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16114,Security,validat,validate,16114,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:1131,Testability,test,test,1131,"CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 com",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2382,Testability,test,test,2382,"s sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psim",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2612,Testability,test,test,2612,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3387,Testability,test,test,3387," of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3421,Testability,test,test,3421," of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:3893,Testability,test,tests,3893,"fied using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:6526,Testability,test,tested,6526,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O mo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:6824,Testability,test,test,6824,"y computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:7554,Testability,test,test,7554,"req-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:7680,Testability,test,tests,7680,"ipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesia",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:8479,Testability,test,test,8479,"c-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy w",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:8737,Testability,test,test,8737,"cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9077,Testability,test,test,9077,"zation, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF En",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9208,Testability,test,test,9208,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9338,Testability,test,test,9338,"E, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9403,Testability,test,testing,9403,"S=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:10711,Testability,test,tests,10711," equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the e",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13678,Testability,test,testing,13678," CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:14028,Testability,test,test,14028,"tracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on optio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15638,Testability,test,test,15638,"of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16077,Testability,test,test,16077,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16393,Testability,test,tests,16393,"ninger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:17223,Testability,test,testing,17223,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:19545,Testability,test,test,19545,"STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnoc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:19613,Testability,test,test,19613,"STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnoc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20991,Testability,test,test,20991,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21280,Testability,test,tested,21280,"P level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; R",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21764,Testability,test,test,21764,"t. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active spac",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:21895,Testability,test,test,21895,"nergy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:23079,Testability,test,test,23079,"cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:23689,Testability,test,testing,23689," integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (s",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26231,Testability,test,test,26231," dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:27216,Testability,test,test,27216,"This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:28344,Testability,test,test,28344,"ymmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:28679,Testability,test,tests,28679,"tual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:29115,Testability,test,tests,29115,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:30441,Testability,test,test,30441,"2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Sc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:32986,Testability,test,testing,32986,"rtiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or globa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:33947,Testability,test,test,33947,"erent ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:34078,Testability,test,test,34078,"CTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:8036,Availability,checkpoint,checkpoint,8036,"cks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4005,Deployability,install,install,4005,"ntract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4268,Deployability,update,update,4268,"06) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5692,Deployability,update,update,5692,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9884,Deployability,update,update,9884,"ation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24950,Deployability,update,updated,24950,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27590,Deployability,update,update,27590,"imization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29741,Deployability,update,update,29741,"only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:30764,Deployability,update,updated,30764,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32223,Deployability,update,update,32223,"let orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:35355,Deployability,update,updated,35355,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:663,Energy Efficiency,energy,energy,663,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:1345,Energy Efficiency,energy,energy,1345,"5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:1605,Energy Efficiency,energy,energy,1605,"ith EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:2782,Energy Efficiency,energy,energy,2782,"ous extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3000,Energy Efficiency,energy,energy,3000,"arge; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3874,Energy Efficiency,energy,energy,3874,"fied using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4080,Energy Efficiency,energy,energy,4080,"g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4153,Energy Efficiency,charge,charge,4153,"irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4169,Energy Efficiency,energy,energy,4169,"irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5036,Energy Efficiency,energy,energy,5036,"Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional wit",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5084,Energy Efficiency,energy,energy,5084,". sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O mol",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5177,Energy Efficiency,energy,energy,5177,"rgy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5335,Energy Efficiency,energy,energy,5335,"on. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5379,Energy Efficiency,energy,energy,5379," using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-p",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5558,Energy Efficiency,energy,energy,5558,"thylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5829,Energy Efficiency,energy,energy,5829," Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:6086,Energy Efficiency,energy,energy,6086,"rgy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:6267,Energy Efficiency,energy,energy,6267," variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methylo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:6386,Energy Efficiency,energy,energy,6386,"or the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:7755,Energy Efficiency,energy,energy,7755," cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:7960,Energy Efficiency,energy,energy,7960,"isSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:8846,Energy Efficiency,energy,energy,8846," cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9478,Energy Efficiency,energy,energy,9478,"T (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:10087,Energy Efficiency,energy,energy,10087,"test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:10394,Energy Efficiency,energy,energy,10394,"correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target ex",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:11185,Energy Efficiency,energy,energy,11185," H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single poi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:11850,Energy Efficiency,energy,energy,11850,"rence numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:11872,Energy Efficiency,energy,energy,11872,"n in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:12314,Energy Efficiency,energy,energy,12314,"s designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:12475,Energy Efficiency,energy,energy,12475,"t, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule w",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:12792,Energy Efficiency,energy,energy,12792," in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-6",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:12933,Energy Efficiency,energy,energy,12933,"DZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ leve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13220,Energy Efficiency,energy,energy,13220,"ribed using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13524,Energy Efficiency,energy,energy,13524,"s is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13836,Energy Efficiency,energy,energy,13836,"nput. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14210,Energy Efficiency,energy,energy,14210,"cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14329,Energy Efficiency,energy,energy-large,14329," but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14430,Energy Efficiency,energy,energy,14430,"gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15123,Energy Efficiency,energy,energy,15123,"RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; V",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15457,Energy Efficiency,energy,energy,15457,"** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serve",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15956,Energy Efficiency,energy,energy,15956,"astup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16157,Energy Efficiency,energy,energy,16157,"CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16300,Energy Efficiency,energy,energy,16300,"h; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16766,Energy Efficiency,energy,energy,16766,"Z \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16881,Energy Efficiency,energy,energy,16881,"r. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17016,Energy Efficiency,energy,energy,17016,"water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17319,Energy Efficiency,energy,energy,17319,"energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVD",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17581,Energy Efficiency,energy,energy,17581," presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18253,Energy Efficiency,energy,energy,18253,"PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18303,Energy Efficiency,energy,energy,18303,"g energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of ben",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18381,Energy Efficiency,energy,energy,18381,"uivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18452,Energy Efficiency,energy,energy,18452," computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18858,Energy Efficiency,energy,energy,18858,"the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) ope",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18908,Energy Efficiency,energy,energy,18908,"n must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with j",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18981,Energy Efficiency,energy,energy,18981,"e positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and d",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:19103,Energy Efficiency,energy,energy,19103,"5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G opti",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:19822,Energy Efficiency,energy,energy,19822,"ntral bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy poi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:19903,Energy Efficiency,energy,energy,19903,"; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian inp",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20808,Energy Efficiency,energy,energy,20808,"c37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20919,Energy Efficiency,energy,energy,20919,"nd density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21041,Energy Efficiency,energy,energy,21041,"omputed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21101,Energy Efficiency,energy,energy,21101,"F. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-gra",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:22284,Energy Efficiency,energy,energy,22284,"ad1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:22320,Energy Efficiency,energy,energy,22320,"ad1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:22414,Energy Efficiency,energy,energy,22414,"of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise corr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:23431,Energy Efficiency,energy,energy,23431,"ion energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartes",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:23888,Energy Efficiency,energy,energy,23888,"p; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:23984,Energy Efficiency,energy,energy,23984,"hane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24755,Energy Efficiency,energy,energy,24755,"z et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24979,Energy Efficiency,energy,energy,24979,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:25146,Energy Efficiency,energy,energy,25146," so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:25804,Energy Efficiency,energy,energy,25804,"etch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:25947,Energy Efficiency,energy,energy,25947,"ce scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26184,Energy Efficiency,energy,energy,26184,"angle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26670,Energy Efficiency,energy,energy,26670,"est CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handl",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26967,Energy Efficiency,energy,energy,26967,"nimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27050,Energy Efficiency,energy,energy,27050,"-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27146,Energy Efficiency,energy,energy,27146,"p2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are rea",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27727,Energy Efficiency,energy,energy,27727," state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:28010,Energy Efficiency,energy,energy,28010," cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:28608,Energy Efficiency,energy,energy,28608,"s and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29053,Energy Efficiency,energy,energy,29053,"adical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29529,Energy Efficiency,energy,energy,29529,"bs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 29",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29614,Energy Efficiency,energy,energy,29614,"or the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scan",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29882,Energy Efficiency,energy,energy,29882,"xch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:30071,Energy Efficiency,energy,energy,30071,"ecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:30797,Energy Efficiency,charge,charge,30797,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:31010,Energy Efficiency,energy,energy,31010,"mputation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32178,Energy Efficiency,energy,energy,32178," state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ anal",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32731,Energy Efficiency,energy,energy,32731,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:33326,Energy Efficiency,energy,energy,33326," basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:33376,Energy Efficiency,energy,energy,33376,"C-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to m",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:33460,Energy Efficiency,energy,energy,33460,"ed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34321,Energy Efficiency,energy,energy,34321,"; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34421,Energy Efficiency,energy,energy,34421,"laced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Create",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34690,Energy Efficiency,energy,energy,34690,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34796,Energy Efficiency,energy,energy,34796,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:35015,Energy Efficiency,energy,energy,35015,"x input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:12767,Integrability,wrap,wrapper,12767," in the active space. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-6",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14916,Integrability,depend,depend,14916,"l ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15019,Integrability,depend,depend,15019,"ne*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation invo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17196,Integrability,interface,interface,17196,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17213,Integrability,interface,interface,17213,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21007,Integrability,interface,interface,21007,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24025,Integrability,rout,routing,24025,"2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is perfor",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24555,Integrability,depend,depend,24555,"cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24658,Integrability,depend,depend,24658,"+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water mol",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32696,Integrability,wrap,wrappers,32696,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3973,Modifiability,plugin,plugins,3973,"ntract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9352,Modifiability,variab,variables,9352,"E, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9435,Modifiability,variab,variables,9435,"S=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17744,Modifiability,variab,variables,17744,"(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian i",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:24931,Modifiability,variab,variables,24931,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:299,Performance,optimiz,optimizations,299,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:725,Performance,optimiz,optimization,725,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:796,Performance,optimiz,optimization,796,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradien",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:1802,Performance,optimiz,optimization,1802,"tion for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pV",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:2636,Performance,perform,performed,2636,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:4244,Performance,perform,performs,4244,"06) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5652,Performance,perform,performs,5652,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:7560,Performance,perform,performing,7560,"req-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:8126,Performance,optimiz,optimization,8126,"f the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9222,Performance,perform,performed,9222,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9604,Performance,perform,performs,9604,". scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorith",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9622,Performance,optimiz,optimization,9622,". scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorith",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9864,Performance,perform,performs,9864,"ation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:10511,Performance,optimiz,optimization,10511,"adical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O mo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13264,Performance,optimiz,optimization,13264,"apolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-fr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13342,Performance,optimiz,optimized,13342,"apolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-fr",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13612,Performance,optimiz,optimization,13612,"r full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14493,Performance,optimiz,optimization,14493,"eckrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15209,Performance,optimiz,optimization,15209,"gy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15544,Performance,optimiz,optimization,15544,"MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. df",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15785,Performance,optimiz,optimization,15785,"tings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc,",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15863,Performance,optimiz,optimization,15863," all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16101,Performance,perform,performed,16101,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16237,Performance,optimiz,optimizations,16237,"ozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18551,Performance,optimiz,optimized,18551," computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability a",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:18696,Performance,optimiz,optimization,18696,"les, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20326,Performance,optimiz,optimization,20326,"ctrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a do",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20456,Performance,optimiz,optimized,20456,"uencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20856,Performance,optimiz,optimization,20856,"n-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21909,Performance,perform,performed,21909,"nergy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:25031,Performance,perform,performed,25031,"for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:25884,Performance,optimiz,optimizations,25884,"e geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-C",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26048,Performance,optimiz,optimizations,26048,"ce scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Opt",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26597,Performance,optimiz,optimization,26597,"freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26793,Performance,perform,performed,26793,"rgy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, whe",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27556,Performance,perform,performs,27556,"imization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:28499,Performance,optimiz,optimization,28499,"sing the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29364,Performance,perform,performed,29364,"uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the sa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29717,Performance,perform,performs,29717,"only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32199,Performance,perform,performs,32199,"let orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32625,Performance,optimiz,optimization,32625,"ning virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; F",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32721,Performance,optimiz,optimize,32721,"rbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:33268,Performance,optimiz,optimization,33268," extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF single",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34092,Performance,perform,performed,34092,"CTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:5966,Safety,avoid,avoided,5966,"fferent algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27868,Safety,avoid,avoided,27868,"ing a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in therm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32368,Safety,avoid,avoided,32368,"ptimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ ene",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:2649,Security,validat,validate,2649,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16114,Security,validat,validate,16114,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:1131,Testability,test,test,1131,"CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 com",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:2382,Testability,test,test,2382,"s sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psim",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:2612,Testability,test,test,2612,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3387,Testability,test,test,3387," of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3421,Testability,test,test,3421," of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:3893,Testability,test,tests,3893,"fied using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:6526,Testability,test,tested,6526,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O mo",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:6824,Testability,test,test,6824,"y computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:7554,Testability,test,test,7554,"req-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:7680,Testability,test,tests,7680,"ipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesia",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:8479,Testability,test,test,8479,"c-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy w",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:8737,Testability,test,test,8737,"cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9077,Testability,test,test,9077,"zation, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF En",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9208,Testability,test,test,9208,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9338,Testability,test,test,9338,"E, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:9403,Testability,test,testing,9403,"S=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, an",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:10711,Testability,test,tests,10711," equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the e",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:13678,Testability,test,testing,13678," CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:14028,Testability,test,test,14028,"tracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on optio",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:15638,Testability,test,test,15638,"of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16077,Testability,test,test,16077,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:16393,Testability,test,tests,16393,"ninger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfm",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:17223,Testability,test,testing,17223,"tesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for th",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:19545,Testability,test,test,19545,"STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnoc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:19613,Testability,test,test,19613,"STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnoc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:20991,Testability,test,test,20991,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21280,Testability,test,tested,21280,"P level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; R",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21764,Testability,test,test,21764,"t. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active spac",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:21895,Testability,test,test,21895,"nergy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy P",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:23079,Testability,test,test,23079,"cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basi",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:23689,Testability,test,testing,23689," integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (s",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:26231,Testability,test,test,26231," dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatri",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:27216,Testability,test,test,27216,"This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:28344,Testability,test,test,28344,"ymmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed o",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:28679,Testability,test,tests,28679,"tual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-1",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:29115,Testability,test,tests,29115,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:30441,Testability,test,test,30441,"2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Sc",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:32986,Testability,test,testing,32986,"rtiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or globa",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:33947,Testability,test,test,33947,"erent ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html:34078,Testability,test,test,34078,"CTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html:233,Deployability,install,install,233,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html:721,Deployability,update,updated,721,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html:474,Energy Efficiency,energy,energy,474,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html:201,Modifiability,plugin,plugins,201,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html:233,Deployability,install,install,233,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html:721,Deployability,update,updated,721,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html:474,Energy Efficiency,energy,energy,474,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html:201,Modifiability,plugin,plugins,201,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dkh-1.html:412,Deployability,update,updated,412,"﻿. DKH. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DKH¶. Input File; Description. dkh/molpro-2order; DKH comparison Psi4 vs. Molpro from http://forum.psicode.org/t/problems-enabling-dkh/388/3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dkh-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dkh-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dkh.html:412,Deployability,update,updated,412,"﻿. DKH. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. DKH¶. Input File; Description. dkh/molpro-2order; DKH comparison Psi4 vs. Molpro from http://forum.psicode.org/t/problems-enabling-dkh/388/3. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_dkh.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_dkh.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd-1.html:535,Deployability,update,updated,535,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_erd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd-1.html:330,Energy Efficiency,energy,energy,330,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_erd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd.html:535,Deployability,update,updated,535,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_erd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd.html:330,Energy Efficiency,energy,energy,330,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_erd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_erd.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_gdma-1.html:365,Deployability,update,updated,365,"﻿. GDMA. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. GDMA¶. Input File; Description. gdma/gdma1; Water RHF/cc-pVTZ distributed multipole analysis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_gdma-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_gdma.html:365,Deployability,update,updated,365,"﻿. GDMA. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. GDMA¶. Input File; Description. gdma/gdma1; Water RHF/cc-pVTZ distributed multipole analysis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_gdma.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:963,Deployability,update,updated,963,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:445,Performance,perform,performed,445,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:723,Performance,perform,performed,723,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:291,Testability,test,testing,291,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:464,Testability,test,test,464,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:577,Testability,test,test,577,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html:742,Testability,test,test,742,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:963,Deployability,update,updated,963,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:445,Performance,perform,performed,445,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:723,Performance,perform,performed,723,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:291,Testability,test,testing,291,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:464,Testability,test,test,464,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:577,Testability,test,test,577,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html:742,Testability,test,test,742,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. LIBEFP¶. Input File; Description. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html:738,Deployability,update,updated,738,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html:273,Energy Efficiency,energy,energy,273,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html:546,Energy Efficiency,energy,energy,546,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html:179,Performance,optimiz,optimization,179,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html:474,Performance,optimiz,optimization,474,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html:738,Deployability,update,updated,738,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html:273,Energy Efficiency,energy,energy,273,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html:546,Energy Efficiency,energy,energy,546,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html:179,Performance,optimiz,optimization,179,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html:474,Performance,optimiz,optimization,474,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_pcmsolver-1.html:477,Deployability,update,updated,477,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. PCMSOLVER¶. Input File; Description. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation. pcmsolver/dft; pcm. pcmsolver/scf; pcm. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_pcmsolver.html:477,Deployability,update,updated,477,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. PCMSOLVER¶. Input File; Description. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation. pcmsolver/dft; pcm. pcmsolver/scf; pcm. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:1332,Availability,avail,available,1332,"ectron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:1652,Availability,avail,available,1652," is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in mos",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:2114,Availability,avail,availability,2114,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving ",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:9957,Deployability,update,updated,9957,"to psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19[ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. (See; mints2 for an example.); 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:4404,Energy Efficiency,energy,energy,4404," STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:4431,Energy Efficiency,energy,energy,4431," STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:4554,Energy Efficiency,energy,energy,4554," flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the d",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:4623,Energy Efficiency,energy,energy,4623," when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:6382,Integrability,depend,dependence,6382," PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.70",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:6799,Integrability,rout,routes,6799,"for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is s",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:8321,Modifiability,variab,variable,8321,"2391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/psi4/share/psi4/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19[ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding addit",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:2841,Performance,perform,performs,2841,"ectrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will ",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:6566,Performance,perform,performing,6566,"; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file wi",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:3844,Safety,detect,detect,3844," the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting d",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets-1.html:6134,Usability,simpl,simply,6134," according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set wi",MatchSource.WIKI,psi4manual/1.1.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets-1.html
https://psicode.org/psi4manual/1.1.0/basissets.html:1332,Availability,avail,available,1332,"ectron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:1652,Availability,avail,available,1652," is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in mos",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:2114,Availability,avail,availability,2114,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving ",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:9957,Deployability,update,updated,9957,"to psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19[ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. (See; mints2 for an example.); 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:4404,Energy Efficiency,energy,energy,4404," STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:4431,Energy Efficiency,energy,energy,4431," STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:4554,Energy Efficiency,energy,energy,4554," flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the d",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:4623,Energy Efficiency,energy,energy,4623," when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:6382,Integrability,depend,dependence,6382," PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.70",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:6799,Integrability,rout,routes,6799,"for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is s",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:8321,Modifiability,variab,variable,8321,"2391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/psi4/share/psi4/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH.; Request the new basis set in an input file in the usual manner.; 1set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19[ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding addit",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:2841,Performance,perform,performs,2841,"ectrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that, consistent; with EMSL, skips the letter J. Note that Gaussian94 convention is; not to skip this letter. Another portion of the G94 format, labeling; angular momentum with L=l syntax is not presently implemented,; though this is coming.; 1; 2; 3L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will ",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:6566,Performance,perform,performing,6566,"; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file wi",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:3844,Safety,detect,detect,3844," the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; 1; 2; 3; 4; 5; 6basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32# sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting d",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets.html:6134,Usability,simpl,simply,6134," according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; 1; 2; 3; 4; 5; 6; 7set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; 1; 2; 3df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; 1set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set wi",MatchSource.WIKI,psi4manual/1.1.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets.html
https://psicode.org/psi4manual/1.1.0/basissets_byelement-1.html:140,Availability,avail,availability,140,﻿. Basis Sets by Element. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Element¶. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;,MatchSource.WIKI,psi4manual/1.1.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.1.0/basissets_byelement-1.html:132550,Deployability,update,updated,132550," ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . minix; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.1.0/basissets_byelement.html:140,Availability,avail,availability,140,﻿. Basis Sets by Element. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Element¶. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn.  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Pople;  ;  . sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;,MatchSource.WIKI,psi4manual/1.1.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byelement.html
https://psicode.org/psi4manual/1.1.0/basissets_byelement.html:132550,Deployability,update,updated,132550," ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . dzp; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-ds; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sadlej-lpol-fs; 5D/7F; H;  ;  ;  ;  ; C; N; O; F;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . psi3-dzp; 6D/10F; H;  ;  ;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . minix; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. dz; 6D/10F; H;  ; Li;  ; B; C; N; O; F; Ne;  ;  ; Al; Si; P; S; Cl;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  . Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byelement.html
https://psicode.org/psi4manual/1.1.0/basissets_byfamily-1.html:18150,Deployability,update,updated,18150,"f2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcseg-0; aug-pcseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. aug-pcseg-1; aug-pcseg-1; def2-svp-jkfit; def2-svpd-ri; —. aug-pcseg-2; aug-pcseg-2; def2-tzvpp-jkfit; def2-tzvppd-ri; —. aug-pcseg-3; aug-pcseg-3; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcseg-4; aug-pcseg-4; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; —. aug-pcSseg-0; aug-pcsseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. aug-pcSseg-1; aug-pcsseg-1; def2-svp-jkfit; def2-svpd-ri; —. aug-pcSseg-2; aug-pcsseg-2; def2-tzvpp-jkfit; def2-tzvppd-ri; —. aug-pcSseg-3; aug-pcsseg-3; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; —. pcseg-0; pcseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-svp-jkfit; def2-svp-ri; —. pcseg-2; pcseg-2; def2-tzvpp-jkfit; def2-tzvpp-ri; —. pcseg-3; pcseg-3; def2-qzvpp-jkfit; def2-qzvpp-ri; —. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; —. pcSseg-0; pcsseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. pcSseg-1; pcsseg-1; def2-svp-jkfit; def2-svp-ri; —. pcSseg-2; pcsseg-2; def2-tzvpp-jkfit; def2-tzvpp-ri; —. pcSseg-3; pcsseg-3; def2-qzvpp-jkfit; def2-qzvpp-ri; —. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byfamily-1.html
https://psicode.org/psi4manual/1.1.0/basissets_byfamily.html:18150,Deployability,update,updated,18150,"f2-tzvpp-jkfit; def2-tzvpp-ri; —. def2-TZVPPD; def2-tzvppd; def2-tzvpp-jkfit; def2-tzvppd-ri; —. def2-QZVP; def2-qzvp; def2-qzvp-jkfit; def2-qzvp-ri; —. def2-QZVPD; def2-qzvpd; def2-qzvp-jkfit; —; —. def2-QZVPP; def2-qzvpp; def2-qzvpp-jkfit; def2-qzvpp-ri; —. def2-QZVPPD; def2-qzvppd; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcseg-0; aug-pcseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. aug-pcseg-1; aug-pcseg-1; def2-svp-jkfit; def2-svpd-ri; —. aug-pcseg-2; aug-pcseg-2; def2-tzvpp-jkfit; def2-tzvppd-ri; —. aug-pcseg-3; aug-pcseg-3; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcseg-4; aug-pcseg-4; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; —. aug-pcSseg-0; aug-pcsseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. aug-pcSseg-1; aug-pcsseg-1; def2-svp-jkfit; def2-svpd-ri; —. aug-pcSseg-2; aug-pcsseg-2; def2-tzvpp-jkfit; def2-tzvppd-ri; —. aug-pcSseg-3; aug-pcsseg-3; def2-qzvpp-jkfit; def2-qzvppd-ri; —. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; —. pcseg-0; pcseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-svp-jkfit; def2-svp-ri; —. pcseg-2; pcseg-2; def2-tzvpp-jkfit; def2-tzvpp-ri; —. pcseg-3; pcseg-3; def2-qzvpp-jkfit; def2-qzvpp-ri; —. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; —. pcSseg-0; pcsseg-0; def2-sv_p_-jkfit; def2-sv_p_-ri; —. pcSseg-1; pcsseg-1; def2-svp-jkfit; def2-svp-ri; —. pcSseg-2; pcsseg-2; def2-tzvpp-jkfit; def2-tzvpp-ri; —. pcSseg-3; pcsseg-3; def2-qzvpp-jkfit; def2-qzvpp-ri; —. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; —; —; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_byfamily.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:243,Availability,avail,available,243,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:484,Availability,avail,available,484,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:804,Availability,avail,available,804,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:1256,Availability,avail,availability,1256,"ns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:1406,Availability,avail,available,1406,"ted; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:3342,Availability,avail,available,3342,". 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,p);  ; 6-311+G(3df,p);  ; 6-311++G(3df,p);  . 6-311G(3df,2p);  ; 6-311+G(3df,2p);  ; 6-311++G(3df,2p);  . 6-311G(3df,2pd);  ; 6-311+G(3df,2pd);  ; 6-311++G(3df,2pd);  . 6-311G(3df,3pd);  ; 6-311+G(3df,3pd);  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D\(\zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\);  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\);  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\);  ;  ; maTZ; maQZ. \(\cdots\); s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; a",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:3863,Availability,avail,available,3863,"c-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\);  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\);  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\);  ;  ; maTZ; maQZ. \(\cdots\); s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:4278,Availability,avail,available,4278,;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; hea,MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:4727,Availability,avail,available,4727,5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; de,MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:5196,Availability,avail,available,5196,"; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set f",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:5599,Availability,avail,available,5599," cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are pro",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:5811,Availability,avail,available,5811,"aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Na",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6040,Availability,avail,available,6040,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6922,Deployability,update,updated,6922,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6321,Testability,stub,stub,6321,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6337,Testability,stub,stub,6337,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6425,Testability,stub,stub,6425,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6562,Testability,stub,stubXZ-JKFIT,6562,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:243,Availability,avail,available,243,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:484,Availability,avail,available,484,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:804,Availability,avail,available,804,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:1256,Availability,avail,availability,1256,"ns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:1406,Availability,avail,available,1406,"ted; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/share/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G;  ;  ;  ;  ;  . 3-21G;  ;  ;  ;  ;  .  ;  ;  ;  ;  ;  . 6-31G;  ; 6-31+G;  ; 6-31++G;  . 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**.  ;  ;  ;  ;  ;  . 6-311G;  ; 6-311+G;  ; 6-311++G;  . 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d);  ; 6-311+G(2d);  ; 6-311++G(2d);  . 6-311G(2d,p);  ; 6-311+G(2d,p);  ; 6-311++G(2d,p);  . 6-311G(2d,2p);  ; 6-311+G(2d,2p);  ; 6-311++G(2d,2p);  . 6-311G(2df);  ; 6-311+G(2df);  ; 6-311++G(2df);  . 6-311G(2df,p);  ; 6-311+G(2df,p);  ; 6-311++G(2df,p);  . 6-311G(2df,2p);  ; 6-311+G(2df,2p);  ; 6-311++G(2df,2p);  . 6-311G(2df,2pd);  ; 6-311+G(2df,2pd);  ; 6-311++G(2df,2pd);  . 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:3342,Availability,avail,available,3342,". 6-311G(3df);  ; 6-311+G(3df);  ; 6-311++G(3df);  . 6-311G(3df,p);  ; 6-311+G(3df,p);  ; 6-311++G(3df,p);  . 6-311G(3df,2p);  ; 6-311+G(3df,2p);  ; 6-311++G(3df,2p);  . 6-311G(3df,2pd);  ; 6-311+G(3df,2pd);  ; 6-311++G(3df,2pd);  . 6-311G(3df,3pd);  ; 6-311+G(3df,3pd);  ; 6-311++G(3df,3pd);  . Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets.  ; Li-Kr main group; H & He; D\(\zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\);  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\);  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\);  ;  ; maTZ; maQZ. \(\cdots\); s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; a",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:3863,Availability,avail,available,3863,"c-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\);  ; haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\);  ; jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\);  ;  ; maTZ; maQZ. \(\cdots\); s, p;  ;  ;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:4278,Availability,avail,available,4278,;  ; aaQZ. cc-pVXZ;  ;  ; DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; hea,MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:4727,Availability,avail,available,4727,5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DK; DTQ5;  ;  ;  ;  ;  ; DTQ5; DTQ5;  . cc-pCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DK; –TQ5;  ;  ;  ;  ;  ; –TQ5; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; de,MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:5196,Availability,avail,available,5196,"; –TQ5;  . cc-pwCV(X+d)Z-DK;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pV(X+d)Z-JKFIT; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set f",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:5599,Availability,avail,available,5599," cc-pwCVXZ-JKFIT [3];  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-JKFIT;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are pro",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:5811,Availability,avail,available,5811,"aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Na",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6040,Availability,avail,available,6040,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6922,Deployability,update,updated,6922,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6321,Testability,stub,stub,6321,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6337,Testability,stub,stub,6337,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6425,Testability,stub,stub,6425,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/basissets_tables.html:6562,Testability,stub,stubXZ-JKFIT,6562,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables.html
https://psicode.org/psi4manual/1.1.0/bibliography-1.html:8935,Deployability,update,updated,8935,". Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Bozkaya:2013:ocepa]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 139, 054104 (2013). [Bozkaya:2013:omp3grad]U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). [Hohenberg:1964:136]P. Hohenberg and W. Kohn,; Phys. Rev. 136, B864-B871 (1964). [Kohn:1965:A1133]W. Kohn and L.J. Sham,; Phys. Rev. 140, A1133-A1138 (1965). [Parr:1989]R.G. Parr and W. Yang,; Density Functional Theory of Atoms and Molecules Oxford University Press, USA, 1989 ISBN:0195357736, 9780195357738. [FW:1950]L. L. Foldy and S. A. Wouthuysen,; Phys. Rev. 78, 29-36 (1950). [Kutzelnigg:1984]W. Kutzelnigg,; Int. J. Quantum Chem. 25, 107-129 (1984). [Smith:2016:2197]D. Smith, L. Burns, K. Patkowski, and D. Sherrill,; J. Phys. Chem. Lett. 7, 2197-2203 (2016). [Szabo:1982]A. Szabo and N. S. Ostlund,; Modern Quantum Chemistry: Introduction to Advanced Electronic Structure Theory; 1982 ISBN:0486691861. [Grimme:2015:054107]S. Grimme, J. Brandenburg, C. Bannwarth, and A. Hansen,; J. Chem. Phys. 143, 054107 (2015). [Sure:2013:1672]R. Sure and S. Grimme,; J. Comput. Chem. 15, 1672 (2013). [Kallay:2008p144101]M. Kallay and J. Gauss,; J. Chem. Phys. 129, 144101 (2008). [Martin:2014:785]J. M. L. Martin,; Mol. Phys. 112, 785 (2014). [Cammi:2009:164104]R. Cammi,; J. Chem. Phys. 131, 164104 (2009). [Tomasi:2005:2999]J. Tomasi, B. Mennucci, and R. Cammi; Chem. Rev. 105, 2999 (2005). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/bibliography-1.html
https://psicode.org/psi4manual/1.1.0/bibliography.html:8935,Deployability,update,updated,8935,". Bozkaya and H. F. Schaefer,; J. Chem. Phys. 136, 204114 (2012). [Bozkaya:2013:ocepa]U. Bozkaya and C. D. Sherrill; J. Chem. Phys. 139, 054104 (2013). [Bozkaya:2013:omp3grad]U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013). [Grimme:2004:1463]; Grimme, J. Comp. Chem. 25 1463-1473 (2004). [Grimme:2006:1787]; Grimme, J. Comp. Chem. 27, 1787-1799 (2006). [Grimme:2010:154104]S. Grimme, J. Antony, S. Ehrlich, and H. Krieg,; J. Chem. Phys. 132, 154104 (2010). [Grimme:2011:1456]S. Grimme, S. Ehrlich, and L. Goerigk,; J. Comput. Chem. 32, 1456 (2011). [Wu:2002:515]Q. Wu and W. Yang,; J. Chem. Phys. 116, 515 (2002). [Hohenberg:1964:136]P. Hohenberg and W. Kohn,; Phys. Rev. 136, B864-B871 (1964). [Kohn:1965:A1133]W. Kohn and L.J. Sham,; Phys. Rev. 140, A1133-A1138 (1965). [Parr:1989]R.G. Parr and W. Yang,; Density Functional Theory of Atoms and Molecules Oxford University Press, USA, 1989 ISBN:0195357736, 9780195357738. [FW:1950]L. L. Foldy and S. A. Wouthuysen,; Phys. Rev. 78, 29-36 (1950). [Kutzelnigg:1984]W. Kutzelnigg,; Int. J. Quantum Chem. 25, 107-129 (1984). [Smith:2016:2197]D. Smith, L. Burns, K. Patkowski, and D. Sherrill,; J. Phys. Chem. Lett. 7, 2197-2203 (2016). [Szabo:1982]A. Szabo and N. S. Ostlund,; Modern Quantum Chemistry: Introduction to Advanced Electronic Structure Theory; 1982 ISBN:0486691861. [Grimme:2015:054107]S. Grimme, J. Brandenburg, C. Bannwarth, and A. Hansen,; J. Chem. Phys. 143, 054107 (2015). [Sure:2013:1672]R. Sure and S. Grimme,; J. Comput. Chem. 15, 1672 (2013). [Kallay:2008p144101]M. Kallay and J. Gauss,; J. Chem. Phys. 129, 144101 (2008). [Martin:2014:785]J. M. L. Martin,; Mol. Phys. 112, 785 (2014). [Cammi:2009:164104]R. Cammi,; J. Chem. Phys. 131, 164104 (2009). [Tomasi:2005:2999]J. Tomasi, B. Mennucci, and R. Cammi; Chem. Rev. 105, 2999 (2005). Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/bibliography.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:544,Availability,down,download,544,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1168,Availability,avail,available,1168,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1385,Availability,error,errors,1385,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:2716,Availability,error,errors,2716," building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneo",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:3548,Availability,error,error,3548,"igure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:415,Deployability,update,update,415,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:492,Deployability,install,install,492,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:533,Deployability,install,installer,533,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:566,Deployability,install,install,566,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:607,Deployability,install,installer,607,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:639,Deployability,install,install,639,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:704,Deployability,update,update,704,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:829,Deployability,install,installer,829,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac wi",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1036,Deployability,install,install,1036,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1095,Deployability,install,install,1095,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1142,Deployability,configurat,configuration,1142,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1237,Deployability,install,install,1237,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1417,Deployability,configurat,configuration,1417,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:2811,Deployability,install,installation,2811," building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneo",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:3000,Deployability,install,installation,3000,"c without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extension",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:3637,Deployability,install,installed,3637,"igure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:4249,Deployability,update,updated,4249,"igure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1550,Integrability,depend,dependencies,1550," binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing er",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:2299,Integrability,depend,dependencies,2299,"lation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; ",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:986,Modifiability,config,configure,986,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1142,Modifiability,config,configuration,1142,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1284,Modifiability,config,configure,1284,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1417,Modifiability,config,configuration,1417,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1473,Modifiability,config,configure,1473,"op-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1607,Modifiability,config,configure,1607," binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing er",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1732,Modifiability,config,configure,1732," binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing er",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:1780,Modifiability,config,configure,1780," binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing er",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:2043,Modifiability,config,configure,2043,"mpact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compila",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
https://psicode.org/psi4manual/1.1.0/build_faq-1.html:2320,Modifiability,config,configure,2320,"lation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; How to set PSIDATADIR and why. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; ",MatchSource.WIKI,psi4manual/1.1.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_faq-1.html
