id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:508,Usability,simpl,simpleapi,508,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:588,Usability,simpl,simpleapi,588,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:729,Usability,simpl,simpleapi,729,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:850,Usability,simpl,simpleapi,850,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669:153,Modifiability,plugin,plugins,153,"Now, as you said Maxime, the definitive solution would be to implement component specific tests where the components are implemented and not in a shared plugins like SceneCreator or SofaTest but this is still something to do (One step at a time).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669:90,Testability,test,tests,90,"Now, as you said Maxime, the definitive solution would be to implement component specific tests where the components are implemented and not in a shared plugins like SceneCreator or SofaTest but this is still something to do (One step at a time).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:609,Availability,error,error,609,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1283,Availability,error,error,1283,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1320,Availability,error,error,1320,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1289,Integrability,message,message,1289,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:557,Safety,avoid,avoid,557,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:76,Usability,simpl,simpleapi,76,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:402,Usability,simpl,simpleapi,402,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:1355,Usability,simpl,simpleapi,1355,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:218,Availability,recover,recovering,218,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:595,Integrability,depend,dependent,595,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:218,Safety,recover,recovering,218,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:120,Usability,simpl,simple,120,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:518,Usability,usab,usable,518,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:6,Modifiability,refactor,refactoring,6,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:60,Modifiability,plugin,plugin,60,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:209,Modifiability,plugin,plugin,209,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:237,Modifiability,plugin,plugins,237,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:420,Modifiability,refactor,refactoring,420,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:112,Testability,test,test,112,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:225,Usability,simpl,simply,225,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:28,Integrability,message,message,28,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:387,Integrability,message,message,387,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:710,Integrability,message,message,710,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:280,Modifiability,plugin,plugins,280,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:620,Modifiability,plugin,plugins,620,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:608,Performance,load,loading,608,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:170,Usability,simpl,simpleapi,170,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:301,Usability,Simpl,SimpleApi,301,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:14,Integrability,message,message,14,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:143,Modifiability,plugin,plugin,143,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:56,Performance,load,loaded,56,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:101,Performance,load,loading,101,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:175,Performance,load,load,175,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:221,Performance,load,load,221,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444
https://github.com/sofa-framework/sofa/pull/419#issuecomment-334459491:81,Availability,error,error,81,I will try to solve the Link issue in a new branch. @maxime-tournier here is the error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64_pr2/518/console,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419#issuecomment-334459491
https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909:172,Modifiability,plugin,plugins,172,"I actually just used grep to parse clang's compilation output to find the files and lines where the warning occurred, then sed to add the override keyword. I didn't do all plugins so there might still be a lot to add. But for the ones I went through, the number of override warnings went from over 1000 to none (with clang 5 on Linux).; It's true that I didn't test on Mac... At least now when we add override somewhere it should remove warnings rather than add more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909
https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909:361,Testability,test,test,361,"I actually just used grep to parse clang's compilation output to find the files and lines where the warning occurred, then sed to add the override keyword. I didn't do all plugins so there might still be a lot to add. But for the ones I went through, the number of override warnings went from over 1000 to none (with clang 5 on Linux).; It's true that I didn't test on Mac... At least now when we add override somewhere it should remove warnings rather than add more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909
https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316:41,Deployability,update,update,41,"Hi @vmagno ; Great job, could you please update the PR to take into account the changes made in master ? ; (Small tips: Most of the the problematic files have been moved in the plugins directory :))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316
https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316:177,Modifiability,plugin,plugins,177,"Hi @vmagno ; Great job, could you please update the PR to take into account the changes made in master ? ; (Small tips: Most of the the problematic files have been moved in the plugins directory :))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253:11,Integrability,message,message,11,"No ""no-go"" message...so I assume this one is ok and will merge it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336393253
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336569534:200,Performance,load,load,200,When CImgPlugin is not compiled Sofa is crashing on OglModel; I made a PR to fix the crash. https://github.com/sofa-framework/sofa/pull/474. I wonder how we could warn users that they probably want & load the CImgPlugin by default.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336569534
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:209,Integrability,message,message,209,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:26,Performance,load,load,26,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:117,Performance,load,loaded,117,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:172,Performance,load,load,172,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263
https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263:243,Performance,load,load,243,"Maybe we could:; - try to load CImgPlugin by default in runSofa and if it doesn't warn user that textures may not be loaded properly; - if the image factory is not able to load an image either print a warning message or ; try to automatically load the CImgPlugin, print a warning and retry.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424#issuecomment-336570263
https://github.com/sofa-framework/sofa/pull/425#issuecomment-336396630:4,Availability,failure,failure,4,"The failure is not generated by the PR but by the use of clang 6.0 on some sofa-macos builder. ; The underlying question is whether the problematic code is c++11 and thus valid or not. ; If it is not it has to be changed, if it is valid we need to change the compiler ot the sofa-macos builder machine. Anyhow I will rebuild it on the other builder;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/425#issuecomment-336396630
https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:844,Availability,redundant,redundant,844,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181
https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:975,Deployability,integrat,integrate,975,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181
https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:975,Integrability,integrat,integrate,975,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181
https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181:844,Safety,redund,redundant,844,"This is a comment from @damienmarchal in #413 about deprecation task; __________________________________________; To summary this morning discussion with @guparan, @fredroy, @bcarrez, @StephaneCotin, @bruno-marques , @ErwanDouaille ...let's prepare for the sprint.; ; There is a general envy from people that want to participate to put the efforts to make a lighter version of Sofa. . To match this goal, we discussed a workflow this morning in connection with the branch ; https://github.com/SofaDefrost/sofa/tree/deprecating_components; and issue #346 . Concretely during the sprint we may prepare two kind of tasks:; - deprecating as much as component as possible; - stabilizing as much as component as possible . To deprecate the components we need to make a list with the following information: ; - name, some info why to deprecate it bad/redundant/etc... and the string show to the user to explain what to do/replacement and so on. . To stabilize components we need to integrate the work done in the SofaNG so I let @fredroy & @guparan say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333146181
https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507:38,Modifiability,variab,variables,38,"@damienmarchal you mean, delete cmake variables ? or something else ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334382294:42,Energy Efficiency,charge,charge,42,STC is over. ; @guparan & @bcarrez are in charge to have to split the deprecation_branch where we have worked into severals: ; (1) one that deprecate components; (2) one that pluguinize some modules. . I assume we should have (1) done before starting to merge PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334382294
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334384140:380,Testability,test,tests,380,"I agree. I also have to modify the SOFA_BUILD_COMPONENTSET to change the levels from core/full/deprecated to core/light/standard/full where:; - core contains only the ""glue"" of sofa (simulation, framework, ...); - light contains a restricted/basic set of components (to be defined); - standard contains most sofa components and features; - full = standard + deprecated components/tests. Hopefully this will be done by the end of this week.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334384140
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:277,Modifiability,plugin,plugins,277,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:404,Modifiability,plugin,plugins,404,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:1108,Modifiability,plugin,plugins,1108,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:448,Security,access,access,448,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515:32,Modifiability,plugin,plugin,32,"Here is our way of organizing a plugin at defrost:; ```; MyPlugin/; components/; forcefield/; MyForceFieldCompoent.cpp; MyForceFieldCompoent.h; mapping/; visual/; objects/; MyClassThatIsNotAComponent.cpp; MyClassThatIsNotAComponent.h; deprecated/; CMakeList.txt; ```. And we mimick that into the namespaces; ```cpp; namespace sofa::myplugin::components::forcefield::MyForceFieldComponent; ```. Then we ""export"" that into sofa namespace to be consistent with the rest of sofa. ; ```cpp; namespace sofa; {; namespace components; {; using namespace sofa::myplugin::components; }; }; ```. I think this is very close to what Stephane is proposing (it is unclear to me what ""un-supported"" is)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:634,Deployability,update,updated,634,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:138,Modifiability,plugin,plugins,138,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:199,Modifiability,plugin,pluginized,199,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:864,Modifiability,plugin,plugin,864,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:1171,Modifiability,plugin,plugin,1171,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:1297,Modifiability,refactor,refactoring,1297,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185:36,Modifiability,plugin,plugins,36,"My two cents: if you are using core+plugins naming in SOFA, why not going for **core**+components instead of objects+components in plugins? ; Even if the name is not ""core"", just using **the same** in SOFA and plugins would be more consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185:131,Modifiability,plugin,plugins,131,"My two cents: if you are using core+plugins naming in SOFA, why not going for **core**+components instead of objects+components in plugins? ; Even if the name is not ""core"", just using **the same** in SOFA and plugins would be more consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185:210,Modifiability,plugin,plugins,210,"My two cents: if you are using core+plugins naming in SOFA, why not going for **core**+components instead of objects+components in plugins? ; Even if the name is not ""core"", just using **the same** in SOFA and plugins would be more consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:16,Modifiability,plugin,plugins,16,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552
https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:340,Usability,clear,clear,340,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1795,Deployability,Pipeline,Pipeline,1795,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:121,Modifiability,plugin,plugin,121,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1874,Safety,Detect,Detection,1874,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:309,Usability,simpl,simple,309,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:378,Usability,simpl,simpleapi,378,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1726,Usability,simpl,simpleapi,1726,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1811,Usability,simpl,simpleapi,1811,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1891,Usability,simpl,simpleapi,1891,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:2032,Usability,simpl,simpleapi,2032,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:2153,Usability,simpl,simpleapi,2153,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357:63,Deployability,integrat,integration,63,"Thank you @damienmarchal :-); It would be better to create the integration branch with these commits instead of merging in master, don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357:63,Integrability,integrat,integration,63,"Thank you @damienmarchal :-); It would be better to create the integration branch with these commits instead of merging in master, don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333493357
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427:52,Deployability,integrat,integration,52,"@guparan ; You are right, this branch should be our integration branch with all contribution from the coding sprint and when we fell it ready we will merge it into master (but not right now). I made a PR just to see if the removale of SOFA_DECL and typedef's file was viable. . Maybe this integration branch could also contains the PR #414 #424 and #425 so that we don't have to much workload after the sprint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427:289,Deployability,integrat,integration,289,"@guparan ; You are right, this branch should be our integration branch with all contribution from the coding sprint and when we fell it ready we will merge it into master (but not right now). I made a PR just to see if the removale of SOFA_DECL and typedef's file was viable. . Maybe this integration branch could also contains the PR #414 #424 and #425 so that we don't have to much workload after the sprint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427:52,Integrability,integrat,integration,52,"@guparan ; You are right, this branch should be our integration branch with all contribution from the coding sprint and when we fell it ready we will merge it into master (but not right now). I made a PR just to see if the removale of SOFA_DECL and typedef's file was viable. . Maybe this integration branch could also contains the PR #414 #424 and #425 so that we don't have to much workload after the sprint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427
https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427:289,Integrability,integrat,integration,289,"@guparan ; You are right, this branch should be our integration branch with all contribution from the coding sprint and when we fell it ready we will merge it into master (but not right now). I made a PR just to see if the removale of SOFA_DECL and typedef's file was viable. . Maybe this integration branch could also contains the PR #414 #424 and #425 so that we don't have to much workload after the sprint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429#issuecomment-333511427
https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629:16,Usability,simpl,simple,16,"To keep history simple, I will push your commit manually and close this PR afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629
https://github.com/sofa-framework/sofa/pull/433#issuecomment-333823345:50,Safety,avoid,avoid,50,I didn't want to commit directly in the branch to avoid breaking it but it seems that the main branch is already broken ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333823345
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235:208,Modifiability,coupling,coupling,208,"Hi Maxime,. It is funny because I pointed this SPTr stuff in my yesterday's slides for STC4 presenting some of the Sofa anti-patterns. . So on my side I totally agree on the general objective of reducing the coupling between .h and I also fully agree on the method you are proposing on doing that incrementally. . As the topic interest you I would be happy to have your opinion on the following:; - should we advocate to have forward definition only header (something like base_fwd.h) to avoid repeating the same namespace { namespace { namespace {class MyClass;} }} ?; - should we advocate for the use of more opaque object either using PIMPL or storing all data as you suggested in a previous issue:; ```cpp; struct MyObjectData ; ; class MyObject ; {; private: ; struct MyObjectData m_data; ; }; ```. While in the cpp file having; ```cpp; #include <Data.h>; #include <DataFilename.h>; #include <SuperOtherComplexObject>. stuct MyObjectData; {; Data<int> myint;; DataFilename filename;; SuperOtherComplexObject object;; };; ```. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235:488,Safety,avoid,avoid,488,"Hi Maxime,. It is funny because I pointed this SPTr stuff in my yesterday's slides for STC4 presenting some of the Sofa anti-patterns. . So on my side I totally agree on the general objective of reducing the coupling between .h and I also fully agree on the method you are proposing on doing that incrementally. . As the topic interest you I would be happy to have your opinion on the following:; - should we advocate to have forward definition only header (something like base_fwd.h) to avoid repeating the same namespace { namespace { namespace {class MyClass;} }} ?; - should we advocate for the use of more opaque object either using PIMPL or storing all data as you suggested in a previous issue:; ```cpp; struct MyObjectData ; ; class MyObject ; {; private: ; struct MyObjectData m_data; ; }; ```. While in the cpp file having; ```cpp; #include <Data.h>; #include <DataFilename.h>; #include <SuperOtherComplexObject>. stuct MyObjectData; {; Data<int> myint;; DataFilename filename;; SuperOtherComplexObject object;; };; ```. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:329,Integrability,depend,dependency,329,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:409,Modifiability,plugin,plugin,409,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:1171,Usability,guid,guideline,1171,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:1189,Deployability,Pipeline,Pipeline,1189,current hypothesis is that this may be related to the order in which the compiler is doing template instanciation vs un-used code removal. . Now the big picture is that any link force in the .h force to include the full definition of the target object which is way to much. ; Eg: from Node.h (which is included in hundreds of compilation units); ```cpp; #include <sofa/core/behavior/ForceField.h>; #include <sofa/core/behavior/BaseInteractionForceField.h>; #include <sofa/core/behavior/Mass.h>; #include <sofa/core/behavior/BaseProjectiveConstraintSet.h>; #include <sofa/core/behavior/BaseConstraintSet.h>; #include <sofa/core/topology/Topology.h>; #include <sofa/core/topology/BaseTopologyObject.h>; #include <sofa/core/topology/BaseMeshTopology.h>; #include <sofa/core/behavior/LinearSolver.h>; #include <sofa/core/behavior/OdeSolver.h>; #include <sofa/core/behavior/ConstraintSolver.h>; #include <sofa/core/behavior/BaseAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstrai,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2375,Deployability,Configurat,ConfigurationSetting,2375,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2397,Deployability,configurat,configurationSetting,2397,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2375,Modifiability,Config,ConfigurationSetting,2375,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2397,Modifiability,config,configurationSetting,2397,"eAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2829,Modifiability,maintainab,maintainability,2829,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:1222,Performance,load,loader,1222,ted to the order in which the compiler is doing template instanciation vs un-used code removal. . Now the big picture is that any link force in the .h force to include the full definition of the target object which is way to much. ; Eg: from Node.h (which is included in hundreds of compilation units); ```cpp; #include <sofa/core/behavior/ForceField.h>; #include <sofa/core/behavior/BaseInteractionForceField.h>; #include <sofa/core/behavior/Mass.h>; #include <sofa/core/behavior/BaseProjectiveConstraintSet.h>; #include <sofa/core/behavior/BaseConstraintSet.h>; #include <sofa/core/topology/Topology.h>; #include <sofa/core/topology/BaseTopologyObject.h>; #include <sofa/core/topology/BaseMeshTopology.h>; #include <sofa/core/behavior/LinearSolver.h>; #include <sofa/core/behavior/OdeSolver.h>; #include <sofa/core/behavior/ConstraintSolver.h>; #include <sofa/core/behavior/BaseAnimationLoop.h>; #include <sofa/core/visual/VisualLoop.h>; #include <sofa/core/collision/Pipeline.h>; #include <sofa/core/loader/BaseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2978,Usability,simpl,simpler,2978,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:3151,Usability,simpl,simpler,3151,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104
https://github.com/sofa-framework/sofa/pull/436#issuecomment-334394054:414,Availability,error,error,414,"After looking quickly at Link.h, it seems you'd need to make a .inl for the Link and related trait classes. . Also, at least `SingleLink::get` requires `TraitsDestPtr::get` and `TraitsValueType::get`. `TraitsDest::get` may in turn require `T::SPtr` (so this needs fixing since T needs to be defined), and some `TraitsValueType` instantiations require `TraitsDestPtr::get`. Could you post a link to the compilation error on windows so that I can examine the instantiation sequence?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334394054
https://github.com/sofa-framework/sofa/pull/439#issuecomment-338594778:0,Availability,ping,ping,0,ping @olivier-goury :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439#issuecomment-338594778
https://github.com/sofa-framework/sofa/pull/439#issuecomment-339257547:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/439#issuecomment-339257547
https://github.com/sofa-framework/sofa/issues/440#issuecomment-334122081:215,Availability,avail,available,215,"@maxime-tournier I think that @fjourdes raised the question about the projective constraints and the solvers (that construct the global matrix) because of a problem of API. ; In ProjectiveConstraintSet there is two available functions:. virtual void applyConstraint(const MechanicalParams* /*mparams*/, const sofa::core::behavior::MultiMatrixAccessor* /*matrix*/). virtual void applyConstraint(const MechanicalParams* /*mparams*/, defaulttype::BaseVector* /*vector*/, const sofa::core::behavior::MultiMatrixAccessor* /*matrix*/). He was pointing out that these functions are not always implemented in the components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440#issuecomment-334122081
https://github.com/sofa-framework/sofa/issues/440#issuecomment-334132592:342,Availability,mask,mask,342,"@ChristianDuriez I stand corrected, thanks. In any case you can still obtain the projection matrix from the projection of each individual canonical basis vector, which could be the default implementation (+ inefficiency warning ofc). As for the original proposal, I'm not exactly sure I understand: you suggest a FixedConstraint + some Deriv mask for filtering dimensions, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440#issuecomment-334132592
https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861:219,Modifiability,inherit,inheritance,219,"Hi guys @ChristianDuriez @fjourdes ,. I wanted to address this issue.; What would be your advice then ? Implementing only one code for everything (FixedConstraint), make two of them (FixedC and PartialFixedC) but using inheritance? another approach ?; Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861
https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062:125,Integrability,synchroniz,synchronized,125,I really don't get the need for `nbOfMonomial` (Is not `listOfMonoMial.size()` sufficient?); It seems dangerous to keep them synchronized...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334134062
https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252:181,Usability,GUID,GUIDELINES,181,See 48b8dd0c70c400da8a7054f90bb413f8e0ee5483 for `nbOfMonomial` creation. ; This makes me think about [a wise advice I read once](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md#formatting).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252
https://github.com/sofa-framework/sofa/pull/444#issuecomment-334514286:50,Deployability,release,release,50,**WARNING**: I just saw that your PR is against a release (v17.06). This cannot be merged directly in v17.06 as some extra steps need to be done during a backport. Please re-create it against **master** and I will flag it to be backported in v17.06.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/444#issuecomment-334514286
https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320:93,Modifiability,plugin,pluginization,93,"Hi @flargilliere, sorry for the late answer.; Tutorials have been broken since the start of [pluginization work](https://github.com/sofa-framework/sofa/pulls?utf8=%E2%9C%93&q=is%3Apr%20pluginize).; They indeed need a massive fix+cleanup but unfortunately this is not in our task list for the moment (at least until v17.12). ; See https://github.com/sofa-framework/sofa/pull/453 and https://github.com/sofa-framework/sofa/commit/6803323aab31e1889315f93697d48c44a7099bfa for details.; Is this problem critical for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320
https://github.com/sofa-framework/sofa/issues/445#issuecomment-343604100:149,Deployability,release,releases,149,"Well it's not critical at all to me (4 years of Shacra-Defrost work with the code and simulation tool). I just saw that the tutorials are out of the releases so I understand that the coming soon 17.12 is more important now. However, these tutorials are the direction new interns (or other new people) are given to discover Sofa. Therefore, I think that ensuring the good functionality of this tool/scene should be added to future priorities [which you did by tagging with v18.06]. Anyway, keep up the good work guys",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343604100
https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258:75,Modifiability,plugin,plugin,75,Hi François . Fred recently proposed to remove the ImagePng.cpp to use the plugin CImgPlugin. ; So I think we can close this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258
https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592:74,Deployability,install,installer,74,"MFC/ATL SDK is needed to get this header (it is proposed in Visual Studio installer).; I tried to remove it once and had an issue, will retry and log here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592
https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592:146,Testability,log,log,146,"MFC/ATL SDK is needed to get this header (it is proposed in Visual Studio installer).; I tried to remove it once and had an issue, will retry and log here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592
https://github.com/sofa-framework/sofa/pull/448#issuecomment-334517509:241,Deployability,Update,Update,241,"Ok thanks for the udpate, I was wondering where it was coming from. ; For the record this is the info from the version of visual studio express 2015 I am using. Microsoft Visual Studio Express 2015 for Windows Desktop; Version 14.0.25425.01 Update 3; Microsoft .NET Framework; Version 4.7.02046. Installed Version: Desktop Express. Visual Basic 2015 00325-20000-00000-AA919; Microsoft Visual Basic 2015. Visual C# 2015 00325-20000-00000-AA919; Microsoft Visual C# 2015. Visual C++ 2015 00325-20000-00000-AA919; Microsoft Visual C++ 2015. Common Azure Tools 1.8; Provides common services for use by Azure Mobile Services and Microsoft Azure Tools. NuGet Package Manager 3.4.4; NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/. SQL Server Data Tools 14.0.60519.0; Microsoft SQL Server Data Tools",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334517509
https://github.com/sofa-framework/sofa/pull/448#issuecomment-334517509:296,Deployability,Install,Installed,296,"Ok thanks for the udpate, I was wondering where it was coming from. ; For the record this is the info from the version of visual studio express 2015 I am using. Microsoft Visual Studio Express 2015 for Windows Desktop; Version 14.0.25425.01 Update 3; Microsoft .NET Framework; Version 4.7.02046. Installed Version: Desktop Express. Visual Basic 2015 00325-20000-00000-AA919; Microsoft Visual Basic 2015. Visual C# 2015 00325-20000-00000-AA919; Microsoft Visual C# 2015. Visual C++ 2015 00325-20000-00000-AA919; Microsoft Visual C++ 2015. Common Azure Tools 1.8; Provides common services for use by Azure Mobile Services and Microsoft Azure Tools. NuGet Package Manager 3.4.4; NuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/. SQL Server Data Tools 14.0.60519.0; Microsoft SQL Server Data Tools",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334517509
https://github.com/sofa-framework/sofa/pull/453#issuecomment-334871354:23,Testability,test,tests,23,I'm fixing the failing tests in https://github.com/sofa-framework/sofa/pull/457,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-334871354
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335028488:97,Testability,test,tests,97,As suggested by @guparan this one is to merge when we will be sure that #457 will have fixed the tests.; It is still unclear to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335028488
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335177317:41,Testability,test,tests,41,@damienmarchal why aren't you fixing the tests directly in this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335177317
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:170,Modifiability,plugin,pluginizing,170,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:218,Modifiability,plugin,pluginization,218,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:885,Safety,risk,risk,885,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:355,Testability,test,tests,355,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:612,Testability,test,test,612,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:1132,Usability,feedback,feedback,1132,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601:304,Integrability,depend,dependency,304,"@guparan : good question. Actually I also believe it should be split to actually match the current architecture. That is to say each library gets its own test exectuable ( provided one exist ). But for me that was beyond the scope of this pull request, which was to propose the removal of the `SofaTest` dependency from the `framework_test` executable, for the aforementioned reasons.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601:154,Testability,test,test,154,"@guparan : good question. Actually I also believe it should be split to actually match the current architecture. That is to say each library gets its own test exectuable ( provided one exist ). But for me that was beyond the scope of this pull request, which was to propose the removal of the `SofaTest` dependency from the `framework_test` executable, for the aforementioned reasons.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:553,Availability,failure,failure,553,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:575,Availability,error,error,575,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:421,Integrability,depend,dependency,421,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:581,Integrability,message,messages,581,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:670,Integrability,depend,dependencies,670,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:126,Testability,test,tests,126,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:148,Testability,test,tests,148,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:347,Testability,test,test,347,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:372,Testability,test,tests,372,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:468,Testability,test,test,468,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406
https://github.com/sofa-framework/sofa/pull/457#issuecomment-335759427:88,Availability,failure,failure,88,it was agreed during the meeting that this one should be merged despite it contains new failure and may cause compilation problem.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457#issuecomment-335759427
https://github.com/sofa-framework/sofa/pull/459#issuecomment-337896696:62,Deployability,update,updated,62,I am ready to rebase your branch on issofa_constraintsolving (updated with master). Are you OK for me to force push?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337896696
https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578:49,Deployability,update,updated,49,@guparan : I think it is fine to rebase with the updated issofa_constraint_solving branch. I believe the conflicts come from the `override` keyword that was added in many places in the code recently. ; The integration branch [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration) will still work if someone wants want to try.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578
https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578:206,Deployability,integrat,integration,206,@guparan : I think it is fine to rebase with the updated issofa_constraint_solving branch. I believe the conflicts come from the `override` keyword that was added in many places in the code recently. ; The integration branch [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration) will still work if someone wants want to try.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578
https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578:206,Integrability,integrat,integration,206,@guparan : I think it is fine to rebase with the updated issofa_constraint_solving branch. I believe the conflicts come from the `override` keyword that was added in many places in the code recently. ; The integration branch [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration) will still work if someone wants want to try.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-337902578
https://github.com/sofa-framework/sofa/pull/459#issuecomment-356564369:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-356564369
https://github.com/sofa-framework/sofa/pull/459#issuecomment-358261757:0,Availability,ping,ping,0,ping @EulalieCoevoet :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-358261757
https://github.com/sofa-framework/sofa/pull/459#issuecomment-360076166:32,Availability,avail,available,32,hey @EulalieCoevoet will you be available to review this PR by next week ?; This PR starts being a bit old. Thanks !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-360076166
https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:76,Modifiability,plugin,plugins,76,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780
https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:10,Testability,test,tested,10,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780
https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:89,Testability,test,tests,89,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780
https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848:19,Usability,feedback,feedback,19,"Thank you for your feedback Eulalie!; I guess some fixes / merges are required to fit the current master. To start with, let's [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848
https://github.com/sofa-framework/sofa/pull/459#issuecomment-365297797:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365297797
https://github.com/sofa-framework/sofa/pull/459#issuecomment-365332892:30,Testability,test,test,30,"Damned, it seems there's some test failing with BilateralInteractionConstraint_test/0.checkVec3ConstrainedPositions",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365332892
https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425:144,Deployability,update,updated,144,"@EulalieCoevoet there is an issue with the test, do you have time within the 7 upcoming days to have a look at it ? either the test needs to be updated, or the code to be fixed. Let us know if you don't ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425
https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425:43,Testability,test,test,43,"@EulalieCoevoet there is an issue with the test, do you have time within the 7 upcoming days to have a look at it ? either the test needs to be updated, or the code to be fixed. Let us know if you don't ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425
https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425:127,Testability,test,test,127,"@EulalieCoevoet there is an issue with the test, do you have time within the 7 upcoming days to have a look at it ? either the test needs to be updated, or the code to be fixed. Let us know if you don't ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425
https://github.com/sofa-framework/sofa/pull/459#issuecomment-367262010:38,Testability,test,test,38,"Ok, this PR is almost there. Only one test is failing.; @fjourdes have you few minutes to check it out ? thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-367262010
https://github.com/sofa-framework/sofa/pull/459#issuecomment-381506838:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-381506838
https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199:0,Testability,test,test,0,test BilateralInteractionConstraint_test failing due to the constraint which is not exactly met,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199
https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879:117,Availability,toler,tolerance,117,"Hi, ; I think I have solved the test problem.. by changing the test ! ; It was not designed to take into account the tolerance of the solver...; see commit:; https://github.com/fjourdes/sofa/commit/78b84592651836809078c18971300f6abde6806a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879
https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879:32,Testability,test,test,32,"Hi, ; I think I have solved the test problem.. by changing the test ! ; It was not designed to take into account the tolerance of the solver...; see commit:; https://github.com/fjourdes/sofa/commit/78b84592651836809078c18971300f6abde6806a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879
https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879:63,Testability,test,test,63,"Hi, ; I think I have solved the test problem.. by changing the test ! ; It was not designed to take into account the tolerance of the solver...; see commit:; https://github.com/fjourdes/sofa/commit/78b84592651836809078c18971300f6abde6806a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879
https://github.com/sofa-framework/sofa/pull/459#issuecomment-388276678:23,Availability,toler,tolerance,23,"Hi Christian,. Using a tolerance is working, but is this normal that the constraint is not exactly applied? (although it was before)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-388276678
https://github.com/sofa-framework/sofa/pull/459#issuecomment-389088429:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389088429
https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:64,Modifiability,Flexible,Flexible,64,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983
https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:73,Modifiability,plugin,plugin,73,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983
https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:52,Testability,test,test,52,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983
https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:584,Deployability,pipeline,pipeline,584,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258
https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:63,Modifiability,plugin,plugin,63,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258
https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:72,Testability,test,testOmniDriverEmu,72,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258
https://github.com/sofa-framework/sofa/pull/459#issuecomment-390195237:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390195237
https://github.com/sofa-framework/sofa/pull/459#issuecomment-392764507:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-392764507
https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347:42,Modifiability,plugin,plugin,42,Delay problem still exists using Geomagic plugin.; See https://www.sofa-framework.org/community/forum/topic/problem-about-geomagic-plugin-in-v18-12/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347
https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347:131,Modifiability,plugin,plugin-in-,131,Delay problem still exists using Geomagic plugin.; See https://www.sofa-framework.org/community/forum/topic/problem-about-geomagic-plugin-in-v18-12/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:580,Deployability,install,install,580,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:656,Deployability,install,installed,656,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:706,Deployability,update,updated,706,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:752,Deployability,install,install,752,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:64,Integrability,message,message,64,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:338,Modifiability,plugin,plugins,338,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:222,Performance,load,load,222,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:396,Testability,test,test,396,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:36,Availability,failure,failure,36,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:307,Integrability,depend,depending,307,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:117,Testability,test,testReport,117,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:258,Deployability,install,install,258,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:371,Deployability,install,install,371,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:86,Modifiability,Plugin,Plugin,86,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:496,Testability,test,tests,496,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:335,Modifiability,plugin,plugin,335,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:831,Modifiability,plugin,plugin,831,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:247,Testability,test,tests,247,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728
https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:318,Testability,test,test,318,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342433689:99,Testability,test,testReport,99,Actually this is not fixed. See https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/520/testReport/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342433689
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057:20,Availability,ERROR,ERROR,20,"Probably because:; [ERROR][PluginManager] Plugin not found: ""SceneCreator_d""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057:27,Modifiability,Plugin,PluginManager,27,"Probably because:; [ERROR][PluginManager] Plugin not found: ""SceneCreator_d""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057:42,Modifiability,Plugin,Plugin,42,"Probably because:; [ERROR][PluginManager] Plugin not found: ""SceneCreator_d""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:115,Modifiability,variab,variable,115,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:150,Modifiability,variab,variable,150,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:224,Modifiability,variab,variable,224,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:666,Modifiability,variab,variable,666,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342444593:41,Energy Efficiency,charge,charge,41,@guparan & @fjourdes ; Can someone be in charge of solving this ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342444593
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755:33,Modifiability,variab,variable,33,"@fjourdes ; - The SOFA_LIBSUFFIX variable is only used by PluginManager to find a lib. The problem here is that we are in a debug build and some libs like SceneCreator are not suffixed with ""_d"". I don't see where SOFA_LIBSUFFIX would be helpful.; - Not yet for #502. Will do asap... @damienmarchal ; I'm on it. Quick and easy fix is to add `set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d"")` in SceneCreator's CMakeLists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755:58,Modifiability,Plugin,PluginManager,58,"@fjourdes ; - The SOFA_LIBSUFFIX variable is only used by PluginManager to find a lib. The problem here is that we are in a debug build and some libs like SceneCreator are not suffixed with ""_d"". I don't see where SOFA_LIBSUFFIX would be helpful.; - Not yet for #502. Will do asap... @damienmarchal ; I'm on it. Quick and easy fix is to add `set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d"")` in SceneCreator's CMakeLists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686:266,Modifiability,portab,portability,266,"- Regarding your first comment: ; The second point had indeed nothing to do with the actual issue. I was just mentionning that it may be beneficial to use CMAKE_DEBUG_POSTFIX as the default value - provided it is not an empty string - for SOFA_LIBSUFFIX in terms of portability, ""_d"" being the fallback default value if CMAKE_DEBUG_POSTFIX is empty.; On the main CMakeLists.txt, CMAKE_DEBUG_POSTFIX could be set with ""_d"" as the default value. - Regarding the second comment: ; Right now setting the `DEBUG_POSTFIX` at the target level is the consistent way to do it with respect to how things are done in the current implementation. - Finally right now I **don't** know what is the best way to do it, I guess some experiments could be made by just setting the `CMAKE_DEBUG_POSTFIX` at the main CMakeLists.txt level, keeping in mind the probable problem with executables mentioned in https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name. Maybe it has been fixed / changed in recent versions of CMake, however portability must remain a strong concern here. ; Ultimately whatever the best option is, it is **important** that these sort of decisions are **well documented**, including potential side effects.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686
https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686:1045,Modifiability,portab,portability,1045,"- Regarding your first comment: ; The second point had indeed nothing to do with the actual issue. I was just mentionning that it may be beneficial to use CMAKE_DEBUG_POSTFIX as the default value - provided it is not an empty string - for SOFA_LIBSUFFIX in terms of portability, ""_d"" being the fallback default value if CMAKE_DEBUG_POSTFIX is empty.; On the main CMakeLists.txt, CMAKE_DEBUG_POSTFIX could be set with ""_d"" as the default value. - Regarding the second comment: ; Right now setting the `DEBUG_POSTFIX` at the target level is the consistent way to do it with respect to how things are done in the current implementation. - Finally right now I **don't** know what is the best way to do it, I guess some experiments could be made by just setting the `CMAKE_DEBUG_POSTFIX` at the main CMakeLists.txt level, keeping in mind the probable problem with executables mentioned in https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name. Maybe it has been fixed / changed in recent versions of CMake, however portability must remain a strong concern here. ; Ultimately whatever the best option is, it is **important** that these sort of decisions are **well documented**, including potential side effects.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342478686
https://github.com/sofa-framework/sofa/issues/464#issuecomment-350731008:54,Deployability,update,update,54,"Not really, #461 was a quick fix.; The real fix is to update libQGLViewer to latest version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/464#issuecomment-350731008
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:125,Modifiability,plugin,pluginPath,125,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:149,Modifiability,plugin,pluginName,149,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:166,Modifiability,plugin,pluginPath,166,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:222,Modifiability,Plugin,Plugin,222,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:286,Modifiability,plugin,plugin,286,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:294,Modifiability,plugin,pluginPath,294,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:318,Modifiability,plugin,pluginName,318,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:343,Modifiability,plugin,pluginPath,343,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:392,Modifiability,Plugin,Plugin,392,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:416,Modifiability,plugin,pluginName,416,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:507,Modifiability,Plugin,PluginManager,507,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:577,Modifiability,plugin,pluginPath,577,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:275,Performance,load,load,275,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:560,Performance,load,loadPluginByPath,560,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:52,Deployability,release,release,52,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:453,Modifiability,Plugin,PluginManager,453,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:218,Performance,load,load,218,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292
https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:400,Testability,test,tests,400,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292
https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261:23,Testability,test,tests,23,[ci-build] [with-scene-tests] 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261
https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:475,Modifiability,variab,variable,475,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901
https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:394,Usability,clear,clearly,394,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901
https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270:109,Deployability,integrat,integrate,109,@ErwanDouaille could you check (very shortly) the API of argument parser in this PR please? we would like to integrate it in v17.12 release ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270
https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270:132,Deployability,release,release,132,@ErwanDouaille could you check (very shortly) the API of argument parser in this PR please? we would like to integrate it in v17.12 release ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270
https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270:109,Integrability,integrat,integrate,109,@ErwanDouaille could you check (very shortly) the API of argument parser in this PR please? we would like to integrate it in v17.12 release ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-353009270
https://github.com/sofa-framework/sofa/pull/468#issuecomment-354967036:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-354967036
https://github.com/sofa-framework/sofa/pull/468#issuecomment-354986412:20,Testability,test,test,20,"@hugtalbot I didn't test it but the argument parser stuff looks good to me. I would suggest to not define b/o characters because, AFAIK, advance timer is not often used so maybe there is better use of b/o character.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-354986412
https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:160,Modifiability,coupling,coupling,160,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799
https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:75,Usability,simpl,simpleapi,75,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:683,Availability,error,error,683,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1097,Availability,avail,available,1097,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2485,Energy Efficiency,energy,energy,2485,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:127,Integrability,depend,depend,127,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1004,Integrability,depend,dependencies,1004,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1173,Integrability,depend,dependency,1173,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:788,Modifiability,coupling,coupling,788,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:99,Testability,test,tests,99,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:109,Testability,test,tests,109,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:168,Testability,test,tests,168,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:501,Testability,test,testing,501,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:552,Testability,test,tests,552,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:646,Testability,test,tests,646,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:772,Testability,test,tests,772,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:898,Testability,test,tests,898,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1052,Testability,test,test,1052,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1210,Testability,test,test,1210,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1274,Testability,test,tests,1274,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1362,Testability,test,tested,1362,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1376,Testability,test,tests,1376,"signed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1635,Testability,test,tests,1635,"se tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1689,Testability,test,tests,1689,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2009,Testability,test,tests,2009,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2386,Testability,test,tests,2386,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:2537,Testability,test,tests,2537,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:76,Usability,clear,clear,76,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1277,Availability,failure,failure,1277,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:771,Integrability,depend,dependencies,771,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1481,Integrability,depend,dependency,1481,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:681,Modifiability,inherit,inheriting,681,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:891,Modifiability,plugin,plugins,891,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1438,Modifiability,coupling,coupling,1438,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1595,Modifiability,plugin,plugins,1595,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1663,Modifiability,plugin,plugin,1663,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:903,Performance,load,loaded,903,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:171,Testability,test,tests,171,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:241,Testability,test,test,241,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:262,Testability,test,test,262,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:328,Testability,test,tests,328,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:367,Testability,test,tests,367,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:675,Testability,test,tests,675,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:789,Testability,test,test,789,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1116,Testability,test,tests,1116,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1242,Testability,test,test,1242,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1335,Testability,test,tests,1335,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1551,Testability,test,tests,1551,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1651,Testability,test,test,1651,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1191,Usability,clear,clear,1191,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1615,Usability,clear,clear,1615,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338598004:95,Integrability,interface,interface,95,@fjourdes: your opinion on latest comment?; I prefer this version as I think we should keep an interface to gtest.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338598004
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:369,Integrability,depend,depends,369,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:659,Integrability,depend,dependency,659,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:247,Testability,test,test,247,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:488,Testability,test,test,488,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:565,Testability,test,test,565,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:1071,Testability,test,testing,1071,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890:36,Testability,test,tests,36,"@guparan : however for example unit tests inside SofaCore / SofaDefaullttype / SofaHelper cannot rely on a Sofa specific testing abstraction layer written on top of gtest, if the guildeline is that a unit test executable can be run solely by linking against the library it is designed to test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890:121,Testability,test,testing,121,"@guparan : however for example unit tests inside SofaCore / SofaDefaullttype / SofaHelper cannot rely on a Sofa specific testing abstraction layer written on top of gtest, if the guildeline is that a unit test executable can be run solely by linking against the library it is designed to test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890:205,Testability,test,test,205,"@guparan : however for example unit tests inside SofaCore / SofaDefaullttype / SofaHelper cannot rely on a Sofa specific testing abstraction layer written on top of gtest, if the guildeline is that a unit test executable can be run solely by linking against the library it is designed to test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890:288,Testability,test,test,288,"@guparan : however for example unit tests inside SofaCore / SofaDefaullttype / SofaHelper cannot rely on a Sofa specific testing abstraction layer written on top of gtest, if the guildeline is that a unit test executable can be run solely by linking against the library it is designed to test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1715,Availability,failure,failure,1715,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1069,Deployability,install,install,1069,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1681,Deployability,integrat,integrate,1681,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:124,Integrability,depend,dependency,124,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:224,Integrability,depend,dependency,224,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:409,Integrability,depend,dependency,409,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:466,Integrability,depend,dependency,466,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:866,Integrability,depend,dependency,866,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1681,Integrability,integrat,integrate,1681,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:276,Modifiability,inherit,inheriting,276,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:576,Modifiability,coupling,coupling,576,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1033,Modifiability,inherit,inherit,1033,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1862,Modifiability,inherit,inheriting,1862,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:271,Testability,test,test,271,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:684,Testability,test,test,684,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:704,Testability,test,test,704,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1109,Testability,test,test,1109,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:1825,Testability,test,tests,1825,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:159,Usability,clear,clear,159,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:654,Usability,clear,clear,654,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1848,Deployability,integrat,integrating,1848,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:2084,Deployability,integrat,integrate,2084,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:337,Integrability,depend,depend,337,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:788,Integrability,depend,dependencies,788,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:884,Integrability,message,message,884,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1620,Integrability,depend,dependency,1620,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1848,Integrability,integrat,integrating,1848,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:2084,Integrability,integrat,integrate,2084,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:189,Testability,test,testing,189,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:495,Testability,test,tests,495,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1372,Testability,test,test,1372,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1568,Testability,test,tests,1568,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1715,Testability,test,test,1715,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1866,Testability,test,test,1866,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:481,Deployability,update,update,481,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:631,Deployability,update,update,631,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:788,Deployability,update,update,788,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:66,Integrability,depend,dependency,66,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:603,Integrability,depend,dependency,603,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:119,Testability,test,test,119,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:496,Testability,test,tests,496,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:646,Testability,test,tests,646,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:799,Testability,test,tests,799,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:64,Integrability,depend,dependencies,64,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:885,Integrability,message,message,885,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:607,Modifiability,refactor,refactored,607,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:244,Testability,test,tests,244,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:266,Testability,test,tests,266,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:485,Testability,test,tests,485,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:577,Testability,test,tests,577,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:785,Testability,test,tests,785,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:855,Testability,log,log,855,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:952,Testability,test,tests,952,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:1023,Testability,test,tests,1023,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:699,Usability,resume,resume,699,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862:64,Testability,test,tests,64,My change is not a regression. Builds are now failing when unit tests crash for an unexpected reason (not due to the test itself).; Sorry to kind of break your PR @damienmarchal :-/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862:117,Testability,test,test,117,My change is not a regression. Builds are now failing when unit tests crash for an unexpected reason (not due to the test itself).; Sorry to kind of break your PR @damienmarchal :-/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858:47,Availability,failure,failure,47,@guparan & @fredroy ; I think I fixed the test failure problem on centos & ubuntu by removing the ; add_target_library( gtest ) in Sofa_test.; Don't ask me why it remove the failure at release I don't know ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858:174,Availability,failure,failure,174,@guparan & @fredroy ; I think I fixed the test failure problem on centos & ubuntu by removing the ; add_target_library( gtest ) in Sofa_test.; Don't ask me why it remove the failure at release I don't know ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858:185,Deployability,release,release,185,@guparan & @fredroy ; I think I fixed the test failure problem on centos & ubuntu by removing the ; add_target_library( gtest ) in Sofa_test.; Don't ask me why it remove the failure at release I don't know ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858:42,Testability,test,test,42,@guparan & @fredroy ; I think I fixed the test failure problem on centos & ubuntu by removing the ; add_target_library( gtest ) in Sofa_test.; Don't ask me why it remove the failure at release I don't know ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343503964:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343503964
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044:59,Usability,feedback,feedback,59,Maxime (@maxime-tournier); I would appreciate to have your feedback on this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044
https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851:48,Usability,feedback,feedback,48,@maxime-tournier I would alreay be happy with a feedback on the approach taken to cut the depdencies. I'm asking because I know the topic interests you.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851
https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584:316,Integrability,depend,dependencies,316,"@hugtalbot , @guparan and everyone else ; This PR; - have discussed with as much as possible persons,; - and is now one month old, ; - succeed on all Tests on the CI since several days. I suggest to have a last look at it & merge it rapidly that we can start working on top of it to improve it and to remove all the dependencies to SofaTest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584
https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584:150,Testability,Test,Tests,150,"@hugtalbot , @guparan and everyone else ; This PR; - have discussed with as much as possible persons,; - and is now one month old, ; - succeed on all Tests on the CI since several days. I suggest to have a last look at it & merge it rapidly that we can start working on top of it to improve it and to remove all the dependencies to SofaTest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584
https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959:1178,Availability,error,error,1178,"Hello François,. Thanks for the PR, my bad. To answer your question the CI is compiling Sofa in debug on linux...so this rise the question why we didn't notice that before ? . I look at the code and this bug being un-noticed for so long result from interesting side effect ; so here are the details:; In LCPCalc.cpp I replaced the function afficheResult by resultToString; In LCPCalc.h I forgot to remove the afficheResult; In ConstraintAnimationCode.cpp the calling code is; ```cpp; if (EMIT_EXTRA_DEBUG_MESSAGE); {; msg_info() << ""getF() after setConstraintEquations:"" ;; helper::afficheResult(CP.getF()->ptr(),CP.getSize());; }; ```; The remarquable thing is that this is not and #ifdef but a normal if. So the problematic code *is* compiled and as the definition is in the .h, everything is fine (at compilation time). Let's now have a look at how is defined the condition, there we have:; ```cpp; #define EMIT_EXTRA_DEBUG_MESSAGE false; ```; This means the code is really compiled but that during the optimization pass (that take place before linking) the bloc of code is removed because it is unreachable. So at link time the call is not there anymore. ; To have the link error happens you either need to set the condition to true (it is not connected with debug flags so you have to manually change that in the .cpp) or to use a compiler that does not do unreachable code removal (maybe a compiler option or something). . So your PR really fix the problem . Now to conclude:; - I'm happy to see that the compiled successfully optimize if(true/false) condition so we can use them much more to replace #ifdef / #endif whenever possible (more readable, easier to maintain). ; - the EMIT_EXTRA_DEBUG_MESSAGE is not linked in any way to the debug compilation...should it be ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959
https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959:1006,Performance,optimiz,optimization,1006,"Hello François,. Thanks for the PR, my bad. To answer your question the CI is compiling Sofa in debug on linux...so this rise the question why we didn't notice that before ? . I look at the code and this bug being un-noticed for so long result from interesting side effect ; so here are the details:; In LCPCalc.cpp I replaced the function afficheResult by resultToString; In LCPCalc.h I forgot to remove the afficheResult; In ConstraintAnimationCode.cpp the calling code is; ```cpp; if (EMIT_EXTRA_DEBUG_MESSAGE); {; msg_info() << ""getF() after setConstraintEquations:"" ;; helper::afficheResult(CP.getF()->ptr(),CP.getSize());; }; ```; The remarquable thing is that this is not and #ifdef but a normal if. So the problematic code *is* compiled and as the definition is in the .h, everything is fine (at compilation time). Let's now have a look at how is defined the condition, there we have:; ```cpp; #define EMIT_EXTRA_DEBUG_MESSAGE false; ```; This means the code is really compiled but that during the optimization pass (that take place before linking) the bloc of code is removed because it is unreachable. So at link time the call is not there anymore. ; To have the link error happens you either need to set the condition to true (it is not connected with debug flags so you have to manually change that in the .cpp) or to use a compiler that does not do unreachable code removal (maybe a compiler option or something). . So your PR really fix the problem . Now to conclude:; - I'm happy to see that the compiled successfully optimize if(true/false) condition so we can use them much more to replace #ifdef / #endif whenever possible (more readable, easier to maintain). ; - the EMIT_EXTRA_DEBUG_MESSAGE is not linked in any way to the debug compilation...should it be ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959
https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959:1533,Performance,optimiz,optimize,1533,"Hello François,. Thanks for the PR, my bad. To answer your question the CI is compiling Sofa in debug on linux...so this rise the question why we didn't notice that before ? . I look at the code and this bug being un-noticed for so long result from interesting side effect ; so here are the details:; In LCPCalc.cpp I replaced the function afficheResult by resultToString; In LCPCalc.h I forgot to remove the afficheResult; In ConstraintAnimationCode.cpp the calling code is; ```cpp; if (EMIT_EXTRA_DEBUG_MESSAGE); {; msg_info() << ""getF() after setConstraintEquations:"" ;; helper::afficheResult(CP.getF()->ptr(),CP.getSize());; }; ```; The remarquable thing is that this is not and #ifdef but a normal if. So the problematic code *is* compiled and as the definition is in the .h, everything is fine (at compilation time). Let's now have a look at how is defined the condition, there we have:; ```cpp; #define EMIT_EXTRA_DEBUG_MESSAGE false; ```; This means the code is really compiled but that during the optimization pass (that take place before linking) the bloc of code is removed because it is unreachable. So at link time the call is not there anymore. ; To have the link error happens you either need to set the condition to true (it is not connected with debug flags so you have to manually change that in the .cpp) or to use a compiler that does not do unreachable code removal (maybe a compiler option or something). . So your PR really fix the problem . Now to conclude:; - I'm happy to see that the compiled successfully optimize if(true/false) condition so we can use them much more to replace #ifdef / #endif whenever possible (more readable, easier to maintain). ; - the EMIT_EXTRA_DEBUG_MESSAGE is not linked in any way to the debug compilation...should it be ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473#issuecomment-336552959
https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337:435,Modifiability,plugin,plugins,435,"Thanks @damienmarchal. Could you detail a bit what has been done here? I see #475 commits, DisplacementTransformEngine files creation and DisplacementMatrixEngine deprecation.; Moreover, `git rename` and `git add` detections are a bit weird: ; modules/SofaMiscEngine/initMiscEngine.h → ...el/SofaFramework/build_option_opengl.h.in; modules/SofaMiscEngine/initMiscEngine.cpp → ...faMiscEngine/DisplacementMatrixEngine.cpp; applications/plugins/SofaMiscEngine/DisplacementMatrixEngine.h detected as created; modules/SofaMiscEngine/DisplacementMatrixEngine.h → ...Engine/DisplacementTransformEngine.h",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337
https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337:214,Safety,detect,detections,214,"Thanks @damienmarchal. Could you detail a bit what has been done here? I see #475 commits, DisplacementTransformEngine files creation and DisplacementMatrixEngine deprecation.; Moreover, `git rename` and `git add` detections are a bit weird: ; modules/SofaMiscEngine/initMiscEngine.h → ...el/SofaFramework/build_option_opengl.h.in; modules/SofaMiscEngine/initMiscEngine.cpp → ...faMiscEngine/DisplacementMatrixEngine.cpp; applications/plugins/SofaMiscEngine/DisplacementMatrixEngine.h detected as created; modules/SofaMiscEngine/DisplacementMatrixEngine.h → ...Engine/DisplacementTransformEngine.h",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337
https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337:485,Safety,detect,detected,485,"Thanks @damienmarchal. Could you detail a bit what has been done here? I see #475 commits, DisplacementTransformEngine files creation and DisplacementMatrixEngine deprecation.; Moreover, `git rename` and `git add` detections are a bit weird: ; modules/SofaMiscEngine/initMiscEngine.h → ...el/SofaFramework/build_option_opengl.h.in; modules/SofaMiscEngine/initMiscEngine.cpp → ...faMiscEngine/DisplacementMatrixEngine.cpp; applications/plugins/SofaMiscEngine/DisplacementMatrixEngine.h detected as created; modules/SofaMiscEngine/DisplacementMatrixEngine.h → ...Engine/DisplacementTransformEngine.h",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337
https://github.com/sofa-framework/sofa/pull/478#issuecomment-336868632:20,Energy Efficiency,green,green,20,It is the return of green in our dashboard... Bruno is the hero of the day !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-336868632
https://github.com/sofa-framework/sofa/pull/478#issuecomment-337161487:8,Energy Efficiency,green,green,8,We want green dashboard :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-337161487
https://github.com/sofa-framework/sofa/pull/478#issuecomment-337484233:0,Energy Efficiency,Green,Green,0,Green dashboard ... hold your breath !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-337484233
https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994:387,Availability,fault,fault,387,Roadmap for a totally green dashboard:; - fix the last centos bug (I heard about bruno started digging into this one); - fix the 14 ubuntu_options_debug (I made #465 that fix it but @fjourdes pointed that one of the pending InSimo PR was doing that in a more powerful/general way...so ...I praise that someone will nudge the InSimo and merge it :)); - fix the windows (well these are my fault...so I will have to spend time on that). But after that...well happy.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994
https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994:22,Energy Efficiency,green,green,22,Roadmap for a totally green dashboard:; - fix the last centos bug (I heard about bruno started digging into this one); - fix the 14 ubuntu_options_debug (I made #465 that fix it but @fjourdes pointed that one of the pending InSimo PR was doing that in a more powerful/general way...so ...I praise that someone will nudge the InSimo and merge it :)); - fix the windows (well these are my fault...so I will have to spend time on that). But after that...well happy.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994
https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994:259,Energy Efficiency,power,powerful,259,Roadmap for a totally green dashboard:; - fix the last centos bug (I heard about bruno started digging into this one); - fix the 14 ubuntu_options_debug (I made #465 that fix it but @fjourdes pointed that one of the pending InSimo PR was doing that in a more powerful/general way...so ...I praise that someone will nudge the InSimo and merge it :)); - fix the windows (well these are my fault...so I will have to spend time on that). But after that...well happy.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/478#issuecomment-337485994
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:119,Availability,fault,fault,119,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:145,Usability,clear,clear,145,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:358,Usability,clear,clear,358,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:373,Usability,clear,clear,373,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275
https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:1155,Modifiability,coupling,coupling,1155,"es of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we will end up with totally different results (because what is advanced for someone is basic to another) so I fear that opening t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994
https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:645,Usability,feedback,feedback,645,"Hello Jérémie,. Thank you for rising this issue and for making a proposition answering the questions asked in #346. ""These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994
https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044:45,Usability,feedback,feedback,45,@IPeterlik @courtecuisse please provide us a feedback on this PR. This would be valuable. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044
https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817:74,Testability,test,testing,74,"So there is no ""no-go"" from any one. So I rebuild from recent master with testing the scene...and then...merge. ; [build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817
https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817:133,Testability,test,tests,133,"So there is no ""no-go"" from any one. So I rebuild from recent master with testing the scene...and then...merge. ; [build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817
https://github.com/sofa-framework/sofa/pull/484#issuecomment-342760490:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-342760490
https://github.com/sofa-framework/sofa/pull/486#issuecomment-338629454:120,Safety,detect,detection,120,Hi @ErwanDouaille thank you for your PR; I just rebased it to clean the commits (rm+add in one commit for better rename detection).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486#issuecomment-338629454
https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:37,Modifiability,Plugin,PluginManager,37,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715
https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:109,Modifiability,plugin,plugin,109,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715
https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:102,Performance,load,load,102,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715
https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:131,Performance,load,loading,131,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715
https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:108,Integrability,depend,dependencies,108,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228
https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:80,Modifiability,plugin,plugin,80,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228
https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:142,Modifiability,coupling,coupling,142,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228
https://github.com/sofa-framework/sofa/issues/489#issuecomment-1050660937:118,Deployability,release,releases,118,This issue can be closed as the unittests are activated now as advised by @fjourdes since ... I dont remember but few releases ago.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/489#issuecomment-1050660937
https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496:168,Modifiability,refactor,refactoring,168,It's not easy to have a comfortable solution for both CMake experts and non-experts but we are trying to make everyone happy by providing highly factorized macros (big refactoring happened in #1433). ; Of course you are free to use them or not.; I close this issue since it's quite old. Feel free to reopen if necessary :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496
https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427:372,Integrability,wrap,wrappers,372,"Hi @damienmarchal ,. Yes, the main idea is to have more control over the simulation. My work will allow to use Sofa as a real python module, in contrast to launching a binary executable that than execute a python script. It's really not a big feature since it only needs a valid entry point in the dynamic library so that python can initialise the module. After that, the wrappers will work the same way as now. The work will then be more around expending the current wrappers to have more control over Sofa's components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427
https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427:468,Integrability,wrap,wrappers,468,"Hi @damienmarchal ,. Yes, the main idea is to have more control over the simulation. My work will allow to use Sofa as a real python module, in contrast to launching a binary executable that than execute a python script. It's really not a big feature since it only needs a valid entry point in the dynamic library so that python can initialise the module. After that, the wrappers will work the same way as now. The work will then be more around expending the current wrappers to have more control over Sofa's components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338945427
https://github.com/sofa-framework/sofa/issues/492#issuecomment-338962423:140,Security,validat,validation,140,I think it is very useful to have this sort of functionality. ; For example it would be very useful for people that want to do analysis and validation of a simulation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338962423
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:425,Availability,down,down,425,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:480,Availability,down,down,480,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:521,Deployability,integrat,integrate,521,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:521,Integrability,integrat,integrate,521,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:223,Performance,load,loaded,223,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741:585,Performance,load,load,585,"> It's really not a big feature. Granted, it's not *that* big, but still:; - you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application); - you need to handle the case where the loaded scene already has python scripts, and let the `PythonEnvironment` know the interpreter is being run from the outside when initializing (and maybe deal with all the `sys.path` / `__file__` abuses down there); - probably have a good fight with the GIL down the road; - how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes? (I would probably put your feature in a module separate from `Sofa` for this reason); - what happens when `Sofa.cleanup()` gets called but python objects still hold c++ objects that are to be destructed when python exits ?. But I am really all for it, so good luck with that :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339347741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:465,Availability,avail,available,465,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1226,Availability,down,down,1226," possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1624,Availability,down,down,1624," there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1865,Deployability,integrat,integrate,1865," But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good questi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:2926,Deployability,Release,Release,2926,"nment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good question. PythonEnvironment::Release is called when python exits (called by the static raii destructor...). I'll have to check this. > But I am really all for it, so good luck with that :-). Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:659,Integrability,message,message,659,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:683,Integrability,Message,MessageDispatcher,683,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1865,Integrability,integrat,integrate,1865," But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good questi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:721,Modifiability,plugin,plugin,721,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:729,Modifiability,config,config,729,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1668,Modifiability,plugin,plugin,1668,"gin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:2681,Modifiability,plugin,plugin,2681,"nment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good question. PythonEnvironment::Release is called when python exits (called by the static raii destructor...). I'll have to check this. > But I am really all for it, so good luck with that :-). Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1030,Performance,load,loaded,1030," trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:1929,Performance,load,load,1929," But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good questi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:2011,Performance,Load,Loading,2011,"nvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good question. PythonEnvironment::Release is called when python exits (called by the static raii destructor...). I'll have to check this. > But I am really all for it, so good luck with that :-). Th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:2105,Safety,avoid,avoid,2105,"nvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. However:. - Loading the SofaPlugin library from within a python script that already imported it should be avoid for now since I'm not sure what side effects this will bring. Right now doing it seems not so bad as, again, we only attach the environment to the already created python environment. ; - A ScriptController will need to be added in order to trigger script events so that the python scene's functions (initGraph, onBeginAnimationStep, etc) are called. The createScene function is called by the SceneLoaderPY so this one is fine. > (I would probably put your feature in a module separate from Sofa for this reason). I think this should be entirely a part of the SofaPython plugin in order to keep what is related to sofa in python there. > what happens when Sofa.cleanup() gets called but python objects still hold c++ objects that are to be destructed when python exits ?. This is a good question. PythonEnvironment::Release is called when python exits (called by the static raii destructor...). I'll have to check this. > But I am really all for it, so good luck with that :-). Th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:168,Testability,test,tests,168,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525
https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:641,Modifiability,plugin,plugin,641,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876
https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:229,Usability,Simpl,Simply,229,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876
https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741:41,Availability,avail,available,41,I'm closing this issue since SOFA is now available as a python module in the [SofaPython3](https://github.com/sofa-framework/plugin.SofaPython3) project.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741
https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741:125,Modifiability,plugin,plugin,125,I'm closing this issue since SOFA is now available as a python module in the [SofaPython3](https://github.com/sofa-framework/plugin.SofaPython3) project.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741
https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771:154,Usability,Simpl,SimpleGUI,154,"@fjourdes sorry for the assignment, miss click. I wanted to assign fredroy :/; But your answer looks good to me, thanks for the PR. I will try to fix the SimpleGUI soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771
https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422:59,Modifiability,config,config,59,"One approach discussed this meeting was:; keep the current config.h for compatibility to external code base but in sofa progressively stop using it and replace it with specific ones eg: ""config/comon_defines.h"" (that does not contains the inclusion of config/build_option_opengl.h/experimental/etc...""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422
https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422:187,Modifiability,config,config,187,"One approach discussed this meeting was:; keep the current config.h for compatibility to external code base but in sofa progressively stop using it and replace it with specific ones eg: ""config/comon_defines.h"" (that does not contains the inclusion of config/build_option_opengl.h/experimental/etc...""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422
https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422:252,Modifiability,config,config,252,"One approach discussed this meeting was:; keep the current config.h for compatibility to external code base but in sofa progressively stop using it and replace it with specific ones eg: ""config/comon_defines.h"" (that does not contains the inclusion of config/build_option_opengl.h/experimental/etc...""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422
https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323:188,Usability,simpl,simple,188,"To me, the real question is do we want to keep float+double at the same time?; I.e. do we want to be able to have double dofs mapped from float dofs themselves mapped from double dofs?. A simple typedef for SReal would be so easy... Otherwise the graal would rather be to keep only float everywhere, and having just a few double where it is really necessary for numerical precision.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340375049:730,Energy Efficiency,efficient,efficient,730,"`ExtVec3f/ExtVec3d` is not enough.; In the most general case, you could want a part of the simulation in float and another one in double (where the dofs can be anything, vec1, deformation gradients...) ; Optionally each one with their own solvers, but not necessarily, mappings can map from float to double.; I think remembering that this was important for GPU/CUDA simulations to be able to map to float. It is easy enough to let the code as now, and compiling only in double, or to remove the extra template instantiations to keep only the one based on SReal as suggested by Max with a possibility to let the other ones that are really required. I repeat the ultimate goal would be to work only with single float, they are more efficient (using less bandwidth, serialization will handle more computations at the same time...) and they are numerically enough in 99.999%. cases We are using double because we never tried to tackle the numerical challenges.; For instance https://www.youtube.com/watch?v=etAYNa6DLKw is only using float.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340375049
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493:167,Availability,robust,robust,167,"Who is *we*?; The feature was used ; removing it has already been discussed many times and refused. I think the problem was: our code (e.g. CGSolver) is not numerical robust in single precision so we need to use double precision implementations, but some part of the code is (was) single precision only (e.g. Cuda forcefields). Once again the real point is why using double precision when single float should be enough?; So if you want to save compilation time and have lighter code => instantiate components only on SReal-based types (what it is already done in Flexible for example).; If you really want to make a change => clean every components that need to be robust in single float and compile sofa always in float only!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493:665,Availability,robust,robust,665,"Who is *we*?; The feature was used ; removing it has already been discussed many times and refused. I think the problem was: our code (e.g. CGSolver) is not numerical robust in single precision so we need to use double precision implementations, but some part of the code is (was) single precision only (e.g. Cuda forcefields). Once again the real point is why using double precision when single float should be enough?; So if you want to save compilation time and have lighter code => instantiate components only on SReal-based types (what it is already done in Flexible for example).; If you really want to make a change => clean every components that need to be robust in single float and compile sofa always in float only!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493:563,Modifiability,Flexible,Flexible,563,"Who is *we*?; The feature was used ; removing it has already been discussed many times and refused. I think the problem was: our code (e.g. CGSolver) is not numerical robust in single precision so we need to use double precision implementations, but some part of the code is (was) single precision only (e.g. Cuda forcefields). Once again the real point is why using double precision when single float should be enough?; So if you want to save compilation time and have lighter code => instantiate components only on SReal-based types (what it is already done in Flexible for example).; If you really want to make a change => clean every components that need to be robust in single float and compile sofa always in float only!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:64,Availability,down,downward,64,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:458,Availability,error,errors,458,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:19,Testability,test,test,19,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:29,Usability,simpl,simple,29,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:359,Usability,simpl,simply,359,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191
https://github.com/sofa-framework/sofa/issues/495#issuecomment-342102732:1761,Testability,test,test,1761,"The feature was used ; removing it has already been discussed many times and refused"" but having something discussed or used (a long time ago) shouldn't be an argument not to ""refresh"" the discussion (in the last 10 years things have changed in term of hardware as well as we have now more insight on the intrusiveness of the selected approach). Having the featured re-discussed again is probably an indication that something is somehow problematic :) . As I said before there is fact two different issues...one is about mixing in the same scene object/solver with different floating point representation while the other is about having SReal mapped to float or double by default. . The current approach, despite it does not match individual preferences, makes a relative consensus: ; SReal to be switched via a define; Vec3 that is using SReal; Vec3d that is using double; Vec3f that is using float; We use vec3d or vec3f when we want to be explicit on the type or we use Vec3 if we don't. And of course life would be easier if everyone agreed to use double only code (or according to Matthieu's opinion float only) but I don't think this will happen soon ;) . To me the real problem is not there, it is in how we have implemented the mixing in the same scene object/solver with different floating point representation. Our current implement is based on instantiating templates in the factory for each types so that when the types matches the objects can work together without conversion cost. ; This design is implemented with the conditional #ifdef SOFA_FLOAT/SOFA_DOUBLE and is very intrusive (our code is harder to write/read/understand, easy to forget things and/or have 'hidden' or subtle bugs (confirmed by the quick test made by @vmagno)) while there is only very specific gain in certain limited use case. . So we are trading run-time speed for a development cost. But the use case is very rare that we may wonder if other approach shouldn't be preferable (eg: a conversion layer instead) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-342102732
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:106,Deployability,update,update,106,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:51,Safety,detect,detect,51,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:160,Usability,simpl,simplifying,160,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342
https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554:116,Modifiability,plugin,plugins,116,"Hi all, . Defrost is happy to announce that we have dropped the SOFA_FLOAT from our SoftRobots & SoftRobots.Inverse plugins. . About PR #853,  If you think this is not the way to go...please tell it now because otherwise it will happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132:32,Usability,intuit,intuitive,32,"+1; Having a clean, generic and intuitive method for marchingCube would be awesome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578:15,Usability,feedback,feedback,15,"Thanks for the feedback Jean-Nicolas, . Could you provide examples of what would look like a generic/inituitive version in your view ? . On my side I'm thinking of something like:; ```xml; <CustomField name=""scalarfield"" source=""myfield.py"" evalFunctionName=""myImplicitFunction""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield"" output=""@topology""/>. <MetaBallField name=""scalarfield2"" radius=""0.5"" positions=""0 0 0""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield2"" output=""@topology2""/>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:203,Modifiability,refactor,refactor,203,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:85,Usability,simpl,simply,85,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:283,Usability,simpl,simple,283,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638
https://github.com/sofa-framework/sofa/pull/497#issuecomment-340510526:167,Testability,test,tests,167,I just added changes to fix warnings created by the missing override and the ordering of data between declaration and initialization in header. [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497#issuecomment-340510526
https://github.com/sofa-framework/sofa/pull/498#issuecomment-340528053:39,Security,access,access,39,"it is not straightforward to me how to access and use the ""enable"" option for the LinearSpring class",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498#issuecomment-340528053
https://github.com/sofa-framework/sofa/pull/498#issuecomment-344610408:22,Performance,cache,cache,22,"Not sure, it may be a cache problem... I launch a fresh build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498#issuecomment-344610408
https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673:30,Deployability,integrat,integration,30,Congrats Lionel for this nice integration PR !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673
https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673:30,Integrability,integrat,integration,30,Congrats Lionel for this nice integration PR !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/501#issuecomment-339616673
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340478465:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340478465
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:132,Deployability,install,installed,132,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:28,Modifiability,Plugin,PluginRepository,28,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:395,Modifiability,Plugin,PluginRepository,395,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:419,Modifiability,variab,variable,419,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769
https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:562,Modifiability,Plugin,PluginRepository,562,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:187,Modifiability,Plugin,PluginRepository,187,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:266,Modifiability,Plugin,PluginRepository,266,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:446,Usability,undo,undocumented,446,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853:65,Modifiability,Plugin,PluginRepository,65,@fjourdes: Ok I understand your suggestion but I didn't touch to PluginRepository construction because I didn't understand what you wanted to do in f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c; Could you explain?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:765,Deployability,install,install,765,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1319,Integrability,depend,depend,1319,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:73,Modifiability,Plugin,PluginRepository,73,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:435,Modifiability,plugin,plugins,435,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:800,Modifiability,Plugin,PluginRepository,800,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1131,Modifiability,plugin,plugin,1131,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1161,Modifiability,Plugin,PluginRepository,1161,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1584,Modifiability,Plugin,PluginRepository,1584,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:2141,Modifiability,plugin,plugin,2141,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:2239,Modifiability,Plugin,PluginRepository,2239,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1124,Performance,load,load,1124,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1090,Testability,test,test,1090,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1313,Testability,test,tests,1313,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1393,Testability,test,test,1393,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746:84,Modifiability,Plugin,PluginRepository,84,"I mean the only thing that could be considered is whether on platforms like gcc the PluginRepository should contain **both** the working directory and `../lib`. But this question has never been an issue so far, so the default behaviour for initialisation should remain the one exposed in ca0402d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746:277,Security,expose,exposed,277,"I mean the only thing that could be considered is whether on platforms like gcc the PluginRepository should contain **both** the working directory and `../lib`. But this question has never been an issue so far, so the default behaviour for initialisation should remain the one exposed in ca0402d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158:65,Modifiability,plugin,plugins,65,"> the ../lib directory for other platforms like linux, where the plugins are usually stored in a lib sub folder of the parent directory where the application reside. For example from the directory where the runSofa executable is, you can look for the directory where SofaPython.lib is located by doing cd ../lib. I understand that and I agree but I'm confused because that's NOT what you were doing [here](https://github.com/sofa-framework/sofa/commit/f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c#diff-7d60c79bd19129acd6a97363d9130f2cR82) with `FileRepository PluginRepository(""SOFA_PLUGIN_PATH"", ""./"");`.; Nevermind, I'm gonna open a new PR to change this and fix the consistency issue with `Utils::getPluginDirectory()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158:556,Modifiability,Plugin,PluginRepository,556,"> the ../lib directory for other platforms like linux, where the plugins are usually stored in a lib sub folder of the parent directory where the application reside. For example from the directory where the runSofa executable is, you can look for the directory where SofaPython.lib is located by doing cd ../lib. I understand that and I agree but I'm confused because that's NOT what you were doing [here](https://github.com/sofa-framework/sofa/commit/f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c#diff-7d60c79bd19129acd6a97363d9130f2cR82) with `FileRepository PluginRepository(""SOFA_PLUGIN_PATH"", ""./"");`.; Nevermind, I'm gonna open a new PR to change this and fix the consistency issue with `Utils::getPluginDirectory()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426:305,Availability,error,error,305,"This is exactly what I mentionned when I said ""I strongly believe that would these paths have been properly restored by f93e2b9 (**my bad**)..."" ; It should have been restored, but I did not do it properly for the **linux** plaform because it is not my main working environment ( so it is easy to slip an error here ) and also probably because I was kind of upset to have to deal with this issue on the first place... [EDIT] I did not take the time to go back enough in the log to find back the last version which had the paths properly set. [/EDIT]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426:474,Testability,log,log,474,"This is exactly what I mentionned when I said ""I strongly believe that would these paths have been properly restored by f93e2b9 (**my bad**)..."" ; It should have been restored, but I did not do it properly for the **linux** plaform because it is not my main working environment ( so it is easy to slip an error here ) and also probably because I was kind of upset to have to deal with this issue on the first place... [EDIT] I did not take the time to go back enough in the log to find back the last version which had the paths properly set. [/EDIT]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102:72,Modifiability,Plugin,PluginRepository,72,"Also further above ""I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102
https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090:12,Usability,clear,clear,12,"Ok it's all clear now, many thanks for your time :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090
https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849:29,Integrability,message,message,29,Thank Mr tablot for cleaning message. . I like this small but yet usefull PR. ; I have added some suggestions to improve your PR a bit.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-342960849
https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137:96,Availability,error,error,96,hey @damienmarchal ; I just tried with the macro at the top of the cpp file and I still get the error (for static function):; `sofa/helper/logging/Messaging.h:177:24: note: expanded from macro 'msg_error'; #define msg_error(...) MSGERROR_CHOOSER(__VA_ARGS__)(__VA_ARGS__); `; Any idea why ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137
https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137:139,Testability,log,logging,139,hey @damienmarchal ; I just tried with the macro at the top of the cpp file and I still get the error (for static function):; `sofa/helper/logging/Messaging.h:177:24: note: expanded from macro 'msg_error'; #define msg_error(...) MSGERROR_CHOOSER(__VA_ARGS__)(__VA_ARGS__); `; Any idea why ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137
https://github.com/sofa-framework/sofa/pull/505#issuecomment-340722660:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505#issuecomment-340722660
https://github.com/sofa-framework/sofa/pull/505#issuecomment-340759048:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505#issuecomment-340759048
https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964:222,Modifiability,plugin,plugin,222,"LGTM; Remark: Bezier2MeshMechanicalMapping.scn, BezierTetrahedronSetTopologyContainer.scn, BezierTriangleSetTopologyContainer.scn and Mesh2BezierTopologicalMapping.scn should be pushed in https://github.com/sofa-framework/plugin.HighOrder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964
https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382:77,Modifiability,plugin,plugin,77,Thanks @bcarrez for taking the time to check :-); @vmagno didn't you fix the plugin to work with latest CGAL? That's what @jnbrunet told us.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382
https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:145,Modifiability,refactor,refactor,145,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522
https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:114,Usability,simpl,simple,114,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522
https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238:32,Testability,test,test,32,"I was looking for writting some test for ArgumentParser, but I don't see any test for SofaKernel/framework/sofa. Is it normal :D ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238
https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238:77,Testability,test,test,77,"I was looking for writting some test for ArgumentParser, but I don't see any test for SofaKernel/framework/sofa. Is it normal :D ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238
https://github.com/sofa-framework/sofa/pull/513#issuecomment-346374716:21,Availability,error,error,21,@bcarrez there is an error with centos. Does all boost libraries are installed on it ? ; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1807/console. Thanks for helping :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346374716
https://github.com/sofa-framework/sofa/pull/513#issuecomment-346374716:69,Deployability,install,installed,69,@bcarrez there is an error with centos. Does all boost libraries are installed on it ? ; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1807/console. Thanks for helping :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346374716
https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915:45,Usability,feedback,feedback,45,Let's wait the 7 days for potential remark / feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915
https://github.com/sofa-framework/sofa/pull/516#issuecomment-344617603:68,Performance,cache,cache,68,"Interesting, didn't know this feature. Yes this is definitely not a cache problem :-(",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/516#issuecomment-344617603
https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:616,Deployability,release,release,616,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607
https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:646,Deployability,release,release,646,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607
https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:411,Integrability,contract,contract,411,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607
https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:304,Modifiability,config,config,304,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607
https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:280,Testability,test,tested,280,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607
https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:330,Deployability,release,release,330,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764
https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:159,Modifiability,plugin,plugin,159,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764
https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:215,Modifiability,plugin,plugin,215,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764
https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:261,Modifiability,plugin,plugins,261,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:77,Deployability,release,release,77,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:140,Deployability,release,release,140,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:148,Deployability,release,released,148,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:554,Deployability,integrat,integration,554,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284:554,Integrability,integrat,integration,554,"@guparan, @hugtalbot ; I really would like to see new features for the 17.12 release and to me this is more important that having the 17.12 release released in 2017 ;) . So please @ErwanDouaille , @bcarrez (and me) please finish your work.; For those that have nearly finish work please make a PR in the WIP state so that we can see. . For the binary distribution... i think that the pre-build binaries may/should not include the experimental feature but at least the tagged version on the repository may have them. . EDIT: @fredroy the sofa from python integration should be also a nice addendum, but there is no PR yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353024284
https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382:65,Modifiability,plugin,plugin,65,"@damienmarchal, headlessrecorder is ready. For the communication plugin I found à bug in zmq matrix support. And I'm in holiday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382
https://github.com/sofa-framework/sofa/pull/518#issuecomment-344862204:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344862204
https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663:218,Modifiability,Plugin,PluginRespository,218,"Many thanks, sorry I did not have any time to take care of it... I just added one commit ( without asking your permission... ) so that `Utils::getPluginDirectory()` returns the content of the first path stored in the `PluginRespository` global variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663
https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663:244,Modifiability,variab,variable,244,"Many thanks, sorry I did not have any time to take care of it... I just added one commit ( without asking your permission... ) so that `Utils::getPluginDirectory()` returns the content of the first path stored in the `PluginRespository` global variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663
https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270:130,Modifiability,Plugin,PluginRespository,130,"As you noted, `Utils::getPluginDirectory()` use should be somewhat discouraged, because it offers less functionality compared to `PluginRespository` which can be expanded by an external application, provided it takes the responsibility of defining the content of the environment variable `SOFA_PLUGIN_PATH`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270
https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270:279,Modifiability,variab,variable,279,"As you noted, `Utils::getPluginDirectory()` use should be somewhat discouraged, because it offers less functionality compared to `PluginRespository` which can be expanded by an external application, provided it takes the responsibility of defining the content of the environment variable `SOFA_PLUGIN_PATH`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270
https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350:115,Modifiability,plugin,plugin,115,"Hello, ; You are totally right ! ; I think that I made the same mistake (not making a difference between finding a plugin & having it activated) in several other place...SofaOpenCL ?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878:39,Availability,error,error,39,"Just a small observation: shouln't the error be printed by the gui instead of the simulation? Since the bbox is only useful when rendering the scene. Right now, it seems that launching a simulation in batch mode will output an error about the missing bbox. In fact, I guess the error should be printed by a camera since we could be writing our own gui, but I guess this could wait until we have a valid InteractiveCamera :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878:227,Availability,error,error,227,"Just a small observation: shouln't the error be printed by the gui instead of the simulation? Since the bbox is only useful when rendering the scene. Right now, it seems that launching a simulation in batch mode will output an error about the missing bbox. In fact, I guess the error should be printed by a camera since we could be writing our own gui, but I guess this could wait until we have a valid InteractiveCamera :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878:278,Availability,error,error,278,"Just a small observation: shouln't the error be printed by the gui instead of the simulation? Since the bbox is only useful when rendering the scene. Right now, it seems that launching a simulation in batch mode will output an error about the missing bbox. In fact, I guess the error should be printed by a camera since we could be writing our own gui, but I guess this could wait until we have a valid InteractiveCamera :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346577878
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214:70,Availability,error,error,70,"I guess the one that needs the bbox should be the one that prints the error. So if the camera needs it, it will output an error. If another component needs it, it should also print an error. Making a generic error at the simulation level seems to be a little bit overkill and do not let place in error personalization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214:122,Availability,error,error,122,"I guess the one that needs the bbox should be the one that prints the error. So if the camera needs it, it will output an error. If another component needs it, it should also print an error. Making a generic error at the simulation level seems to be a little bit overkill and do not let place in error personalization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214:184,Availability,error,error,184,"I guess the one that needs the bbox should be the one that prints the error. So if the camera needs it, it will output an error. If another component needs it, it should also print an error. Making a generic error at the simulation level seems to be a little bit overkill and do not let place in error personalization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214:208,Availability,error,error,208,"I guess the one that needs the bbox should be the one that prints the error. So if the camera needs it, it will output an error. If another component needs it, it should also print an error. Making a generic error at the simulation level seems to be a little bit overkill and do not let place in error personalization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214:296,Availability,error,error,296,"I guess the one that needs the bbox should be the one that prints the error. So if the camera needs it, it will output an error. If another component needs it, it should also print an error. Making a generic error at the simulation level seems to be a little bit overkill and do not let place in error personalization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346580214
https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377:118,Integrability,message,message,118,I moved the checker code into RealGUI (to factorize code between all the viewers). ; One last small issue is that the message wont be raised on the CI...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-346588377
https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:52,Usability,feedback,feedback,52,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787
https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:108,Usability,clear,clear,108,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:131,Integrability,message,message,131,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:314,Modifiability,variab,variable,314,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:106,Usability,simpl,simply,106,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951
https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914:22,Testability,test,tests,22,[ci-build][with-scene-tests]; ; Comme ça.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914
https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106:22,Testability,test,tests,22,[ci-build][with-scene-tests][ci-reformat],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347117728:83,Testability,test,test,83,"Hello, Maxime,. Thanks a lot for the report. Appart from the unconventional way to test strings on my side I fully support the idea of removing the group by prefix feature for two reasons: the first one is that I prefer explicit things vs implicit one. . PS: you don't need to argue :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347117728
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:350,Availability,ERROR,ERROR,350,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:467,Modifiability,plugin,plugins,467,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:155,Safety,abort,aborts,155,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:199,Security,sanitiz,sanitizer,199,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:653,Usability,simpl,simple,653,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:145,Availability,ERROR,ERROR,145,"I've been hit by this too.; Here is the stack trace I've got:. ```; ================================================================= ; ==98239==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00013d5e5ee0 at pc 0x00013d1a0075 bp 0x7fff503dd230 sp 0x7fff503dd228 ; READ of size 4 at 0x00013d5e5ee0 thread T0 ; #0 0x13d1a0074 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsign; ed int) Base.cpp:128 ; #1 0x13d19fd2d in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, bool, ; bool) Base.cpp:100 ; #2 0x10ff6bfe0 in void sofa::core::objectmodel::Base::initData0<double>(sofa::core::objectmodel::Data<double>*, sofa::core::objectmodel::Data<double>::InitData&, double const&, ; char const*, char const*, bool, bool) Base.h:382 ; #3 0x13d2e2817 in sofa::core::objectmodel::Data<double>::InitData sofa::core::objectmodel::Context::initData<double>(sofa::core::objectmodel::Data<double>*, double const&, char ; const*, char const*, bool, bool) Context.h:49; #4 0x13d2e1985 in sofa::core::objectmodel::Context::Context() Context.cpp:37 ; #5 0x13a430622 in sofa::simulation::Node::Node(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:66 ; #6 0x10f90fb5c in sofa::simulation::graph::DAGNode::DAGNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sofa::simulation::graph; ::DAGNode*) DAGNode.cpp:39 ; #7 0x10fa2fb0d in sofa::core::objectmodel::New<sofa::simulation::graph::DAGNode>::New<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #8 0x10f9118ec in sofa::core::objectmodel::New<sofa::simulation::graph::DAGNode>::New<st",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:4210,Availability,down,down,4210,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3774,Integrability,message,message,3774,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3269,Modifiability,variab,variable,3269,"de(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and hav",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:2604,Performance,load,loadSceneWithArguments,2604,"ar, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #8 0x10f9118ec in sofa::core::objectmodel::New<sofa::simulation::graph::DAGNode>::New<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:2988,Performance,load,load,2988,"ion::graph::DAGNode>::New<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, no",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3077,Performance,load,load,3077,"_1::allocator<char> > const; &>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&&&) SPtr.h:57 ; #9 0x10fa5fb10 in sofa::simulation::graph::DAGSimulation::createNewNode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) DAGSimulati; on.cpp:78; #10 0x13a45aa79 in sofa::simulation::Node::create(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) Node.cpp:972 ; #11 0x14a8a7f43 in sofa::simulation::SceneLoaderPY::loadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3956,Usability,simpl,simple,3956,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:4596,Usability,guid,guidance,4596,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566
https://github.com/sofa-framework/sofa/issues/528#issuecomment-592179782:4,Deployability,update,update,4,Any update here ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-592179782
https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647:33,Deployability,UPDATE,UPDATE,33,"This comes from comit 570b09b. > UPDATE: PointSetTopologyContainer maintains a list of point indices, accessible through the data points. Move data nbPoints to private so that only dedicated methods setNbPoints and getNbPoints are accessible to derived / friend classes. Indeed, not sure if Data is needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647
https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647:102,Security,access,accessible,102,"This comes from comit 570b09b. > UPDATE: PointSetTopologyContainer maintains a list of point indices, accessible through the data points. Move data nbPoints to private so that only dedicated methods setNbPoints and getNbPoints are accessible to derived / friend classes. Indeed, not sure if Data is needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647
https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647:231,Security,access,accessible,231,"This comes from comit 570b09b. > UPDATE: PointSetTopologyContainer maintains a list of point indices, accessible through the data points. Move data nbPoints to private so that only dedicated methods setNbPoints and getNbPoints are accessible to derived / friend classes. Indeed, not sure if Data is needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831:36,Availability,redundant,redundant,36,"Hi Damien,; aren't the two features redundant ?; I was actually already using this functionality for a repository including several plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831:132,Modifiability,plugin,plugins,132,"Hi Damien,; aren't the two features redundant ?; I was actually already using this functionality for a repository including several plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831:36,Safety,redund,redundant,36,"Hi Damien,; aren't the two features redundant ?; I was actually already using this functionality for a repository including several plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074:148,Modifiability,plugin,plugins,148,"Hello, Hugo,. CMakeLists are really not my up of tea...; The faced was that SOFA_EXTERNAL_DIRECTORY is internally using add_subdirectory. While the plugins in applications/pluins are using sofa_add_plugin. This results in different behavior. Eg SOFA_EXTERNAL_DIRECTORY/add_subdirectory does not generate a build option named ""PLUGIN_XXXXX"" to activate/deactivate the plugin which is inconsistent with the other plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074:367,Modifiability,plugin,plugin,367,"Hello, Hugo,. CMakeLists are really not my up of tea...; The faced was that SOFA_EXTERNAL_DIRECTORY is internally using add_subdirectory. While the plugins in applications/pluins are using sofa_add_plugin. This results in different behavior. Eg SOFA_EXTERNAL_DIRECTORY/add_subdirectory does not generate a build option named ""PLUGIN_XXXXX"" to activate/deactivate the plugin which is inconsistent with the other plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074:411,Modifiability,plugin,plugins,411,"Hello, Hugo,. CMakeLists are really not my up of tea...; The faced was that SOFA_EXTERNAL_DIRECTORY is internally using add_subdirectory. While the plugins in applications/pluins are using sofa_add_plugin. This results in different behavior. Eg SOFA_EXTERNAL_DIRECTORY/add_subdirectory does not generate a build option named ""PLUGIN_XXXXX"" to activate/deactivate the plugin which is inconsistent with the other plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:196,Modifiability,plugin,plugins,196,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:340,Modifiability,plugin,plugin,340,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:413,Modifiability,plugin,pluginName,413,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:551,Modifiability,variab,variable,551,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366
https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:704,Modifiability,plugin,plugin,704,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:69,Deployability,install,installed,69,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:277,Energy Efficiency,adapt,adapt,277,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:277,Modifiability,adapt,adapt,277,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:157,Testability,test,test,157,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:2140,Deployability,deploy,deploy-,2140,"ch/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea.tissuemeca-0.9.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea.deploy-2.1.4-py2.7.egg'; ]; ```; From iPython:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/bin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:3800,Deployability,deploy,deploy-,3800,".7/site-packages/openalea.tissuemeca-0.9.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea.deploy-2.1.4-py2.7.egg'; ]; ```; From iPython:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/bin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea.tissuemeca-0.9.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea.deploy-2.1.4-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/IPython/extensions', ; '/Users/oali/.ipython']; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:218,Modifiability,plugin,plugins,218,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:311,Modifiability,plugin,plugins,311,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:405,Modifiability,plugin,plugins,405,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:413,Modifiability,Flexible,Flexible,413,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:498,Modifiability,plugin,plugins,498,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:588,Modifiability,plugin,plugins,588,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:5266,Availability,ERROR,ERROR,5266,"n27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:5568,Availability,error,error,5568,"ib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6262,Availability,ERROR,ERROR,6262,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6308,Availability,error,error,6308,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6316,Availability,ERROR,ERROR,6316,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6354,Availability,error,error,6354,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2221,Modifiability,plugin,plugin,2221,.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2374,Modifiability,Plugin,PluginManager,2374,hon@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2396,Modifiability,plugin,plugin,2396,hon@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2543,Modifiability,Plugin,PluginManager,2543,s/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2565,Modifiability,plugin,plugin,2565,s/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2844,Modifiability,plugin,plugins,2844,7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3022,Modifiability,plugin,plugins,3022,init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_de,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3068,Modifiability,Plugin,PluginManager,3068,ang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3090,Modifiability,plugin,plugin,3090,ang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3231,Modifiability,Plugin,PluginManager,3231,e/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3253,Modifiability,plugin,plugin,3253,e/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3394,Modifiability,Plugin,PluginManager,3394,kspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3416,Modifiability,plugin,plugin,3416,kspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3564,Modifiability,Plugin,PluginManager,3564,space/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3586,Modifiability,plugin,plugin,3586,space/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3916,Modifiability,plugin,plugins,3916,ace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:4052,Modifiability,plugin,plugins,4052, [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2199,Performance,Load,Loading,2199,.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2389,Performance,Load,Loaded,2389,hon@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2558,Performance,Load,Loaded,2558,s/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plu,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3083,Performance,Load,Loaded,3083,ang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3246,Performance,Load,Loaded,3246,e/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3409,Performance,Load,Loaded,3409,kspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Fra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:3579,Performance,Load,Loaded,3579,space/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPython.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaAllCommonComponents.dylib; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****. /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6349,Performance,load,load,6349,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6874,Performance,load,loaded,6874,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:693,Testability,test,test,693,"This issue was forgotten (sorry) but we actually have the same problem on our CI.; @oalii Did you manage to find a solution?. ## My research; I created a basic python script doing; ```python; import sys. print ""Using python: "" + sys.executable; print ""**** sys.path ****""; for p in sys.path:; print p; print ""******************"". import os; try:; user_paths = os.environ['PYTHONPATH'].split(os.pathsep); except KeyError:; user_paths = []; print ""*** PYTHONPATH ***""; for p in user_paths:; print p; print ""******************"". import numpy; print ""Numpy found: "" + numpy.__file__; ```. When I run this script with default python:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ python test.py; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/sit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2173,Testability,test,test,2173,rk/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:5616,Testability,test,test,5616,"l/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6295,Testability,test,test,6295,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6724,Testability,test,test,6724,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326
https://github.com/sofa-framework/sofa/issues/531#issuecomment-409518620:695,Deployability,install,installed,695,"Hello,. We had a very similar problem in a slightly different context (relying on python virtualenv on Linux).; The root cause was that the multiarray native lib is apparently expecting to be run from an executable that already export the python API symbols, either from the executable itself, or with libpython loaded with the RTLD_GLOBAL flag. So the solution on Linux (found by @Ngautier) was to add a call to `dlopen(""<LIBPYTHONSONAME>"", RTLD_LAZY | RTLD_GLOBAL)` before initializing the embedded python interpreter (replacing LIBPYTHONSONAME by the internal name of the python library, such as `libpython2.7.so.1.0`). For some reason, this was only an issue if not using the default system-installed python environment (maybe something similar is done automatically in this case). On mac I don't know if the root cause is the same (it could be determined by looking if mutliarray.so does indeed have undefined symbols, using `otool` or similar), and if a similar solution would fix it. But maybe it can help ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-409518620
https://github.com/sofa-framework/sofa/issues/531#issuecomment-409518620:312,Performance,load,loaded,312,"Hello,. We had a very similar problem in a slightly different context (relying on python virtualenv on Linux).; The root cause was that the multiarray native lib is apparently expecting to be run from an executable that already export the python API symbols, either from the executable itself, or with libpython loaded with the RTLD_GLOBAL flag. So the solution on Linux (found by @Ngautier) was to add a call to `dlopen(""<LIBPYTHONSONAME>"", RTLD_LAZY | RTLD_GLOBAL)` before initializing the embedded python interpreter (replacing LIBPYTHONSONAME by the internal name of the python library, such as `libpython2.7.so.1.0`). For some reason, this was only an issue if not using the default system-installed python environment (maybe something similar is done automatically in this case). On mac I don't know if the root cause is the same (it could be determined by looking if mutliarray.so does indeed have undefined symbols, using `otool` or similar), and if a similar solution would fix it. But maybe it can help ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-409518620
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:56,Availability,fault,fault,56,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:74,Availability,mask,mask,74,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:146,Availability,mask,mask,146,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:174,Availability,mask,mask,174,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:263,Availability,mask,mask,263,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800:378,Safety,safe,safe,378,"Just to add a little bit to this, I remember having seg fault due to this mask while doing topological changes. I just looked very quickly to the mask source code, maybe the mask vector doesn't scale with the dof state when changes occurs?. In any way, keeping a mask vector activated and used automatically while it was not asked explicitly by the user doesn't seem to be very safe. Or maybe I'm missing something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532#issuecomment-347520800
https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:202,Integrability,message,message,202,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977
https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:61,Modifiability,plugin,plugin,61,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977
https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:325,Performance,Queue,Queue,325,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977
https://github.com/sofa-framework/sofa/pull/534#issuecomment-354017871:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-354017871
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:33,Deployability,install,installed,33,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:59,Deployability,install,installed,59,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:196,Deployability,install,installed,196,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307:149,Integrability,depend,dependency,149,Hello Erwan & @guparan . Was zmq installed on the CI ? ; I installed it on centos3 and ubuntu but not on macos & windows. ; It seems there is also a dependency on liboscpack that also needs to be installed Am I wrong ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355120307
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:16,Deployability,install,installed,16,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:244,Deployability,install,install,244,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:204,Modifiability,plugin,plugins,204,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157
https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:339,Testability,test,tested,339,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157
https://github.com/sofa-framework/sofa/pull/534#issuecomment-368991680:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-368991680
https://github.com/sofa-framework/sofa/pull/534#issuecomment-384214596:30,Deployability,update,update,30,"Hi @ErwanDouaille . Could you update us about the status of this PR shall it be pursued, cleaned and merged ?; Cheers Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-384214596
https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105:62,Modifiability,plugin,plugin,62,I think there is some issues with the CI as the communication plugin ran fine on my MacOS. What do you say @ErwanDouaille ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105
https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462:75,Deployability,update,update,75,Hi @ErwanDouaille . How are you doing? It's been some time since your last update. Any news on the Communication plugin?; @tgaugry did you use this work on Communication for your own purposes ?. Best!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462
https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462:113,Modifiability,plugin,plugin,113,Hi @ErwanDouaille . How are you doing? It's been some time since your last update. Any news on the Communication plugin?; @tgaugry did you use this work on Communication for your own purposes ?. Best!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:278,Deployability,install,install,278,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:303,Integrability,protocol,protocols,303,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:636,Integrability,protocol,protocol,636,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:50,Modifiability,plugin,plugin,50,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:241,Modifiability,plugin,plugin,241,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:450,Modifiability,plugin,plugin,450,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:619,Modifiability,plugin,plugin,619,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:129,Safety,avoid,avoid,129,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533
https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236:113,Availability,error,errors,113,"All scene examples in the Communication plugin crash, I guess the plugin is not activating thus generating these errors/crashes right @guparan ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236
https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236:40,Modifiability,plugin,plugin,40,"All scene examples in the Communication plugin crash, I guess the plugin is not activating thus generating these errors/crashes right @guparan ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236
https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236:66,Modifiability,plugin,plugin,66,"All scene examples in the Communication plugin crash, I guess the plugin is not activating thus generating these errors/crashes right @guparan ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236
https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535
https://github.com/sofa-framework/sofa/pull/534#issuecomment-675963183:20,Testability,test,tests,20,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-675963183
https://github.com/sofa-framework/sofa/pull/534#issuecomment-679145990:74,Testability,test,tests,74,One warning added : CommunicationSubscriber.inl:36 (-Wreorder). Two scene tests failing:; - receiverRequest.scn; - senderRequest.scn. and several others on CentOS,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-679145990
https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894
https://github.com/sofa-framework/sofa/pull/534#issuecomment-843161945:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-843161945
https://github.com/sofa-framework/sofa/pull/534#issuecomment-853156278:0,Deployability,Update,Updated,0,Updated one last time and moved to https://github.com/sofa-framework/Communication; Feel free to open issues and pull-requests there.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-853156278
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353054406:84,Safety,avoid,avoid,84,@hugtalbot you should provide a coding style file or reformatting it using clang to avoid annoying contributors with spaces/tabs. Two commits to fix indentation and more than 16 days to merge 20 lines of code is a waste of time,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353054406
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:866,Deployability,release,release,866,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:315,Usability,guid,guideline,315,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:340,Usability,guid,guideline,340,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:146,Deployability,install,install,146,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:162,Deployability,install,install,162,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:200,Deployability,configurat,configuration,200,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:184,Modifiability,plugin,plugin,184,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:200,Modifiability,config,configuration,200,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:113,Deployability,update,updated,113,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:143,Usability,guid,guidelines,143,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:187,Usability,guid,guidelines,187,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:553,Usability,guid,guidelines,553,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:616,Usability,GUID,GUIDELINES,616,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:919,Usability,Guid,Guide,919,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234
https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:1001,Usability,GUID,GUIDELINES,1001,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234
https://github.com/sofa-framework/sofa/pull/536#issuecomment-354017678:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-354017678
https://github.com/sofa-framework/sofa/pull/536#issuecomment-355926176:22,Testability,test,tests,22,[ci-build][with-scene-tests][ci-reformat],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-355926176
https://github.com/sofa-framework/sofa/pull/536#issuecomment-356606016:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-356606016
https://github.com/sofa-framework/sofa/pull/536#issuecomment-356976670:61,Testability,test,tests,61,It should be alright now. Let's try to [ci-build][with-scene-tests] :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-356976670
https://github.com/sofa-framework/sofa/pull/536#issuecomment-360112253:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-360112253
https://github.com/sofa-framework/sofa/issues/537#issuecomment-350734968:38,Availability,redundant,redundant,38,Could we close this issue as it seems redundant with #538 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/537#issuecomment-350734968
https://github.com/sofa-framework/sofa/issues/537#issuecomment-350734968:38,Safety,redund,redundant,38,Could we close this issue as it seems redundant with #538 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/537#issuecomment-350734968
https://github.com/sofa-framework/sofa/pull/538#issuecomment-353428621:68,Deployability,release,release,68,"@guparan @hugtalbot @damienmarchal I think it's ready for the 17.12 release, as an experimental feature.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-353428621
https://github.com/sofa-framework/sofa/pull/538#issuecomment-353971184:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-353971184
https://github.com/sofa-framework/sofa/pull/538#issuecomment-354967883:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-354967883
https://github.com/sofa-framework/sofa/pull/538#issuecomment-355360900:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-355360900
https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080:63,Testability,test,test,63,"@damienmarchal @hugtalbot , stupid question. How can I write a test for a GUI ? I don't see any tests for qt/glut ... :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080
https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080:96,Testability,test,tests,96,"@damienmarchal @hugtalbot , stupid question. How can I write a test for a GUI ? I don't see any tests for qt/glut ... :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080
https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781:45,Modifiability,plugin,plugin,45,@guparan can you enable the HeadlessRecorder plugin ? It looks like this plugin is not turned on on CI :/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781
https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781:73,Modifiability,plugin,plugin,73,@guparan can you enable the HeadlessRecorder plugin ? It looks like this plugin is not turned on on CI :/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781
https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590:62,Deployability,install,installed,62,"Here you go.; It may be better to check if FFMPEG and X11 are installed before enabling the plugin.; EDIT: I'll add an `if` block to enable only on Linux, my bad.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590
https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590:92,Modifiability,plugin,plugin,92,"Here you go.; It may be better to check if FFMPEG and X11 are installed before enabling the plugin.; EDIT: I'll add an `if` block to enable only on Linux, my bad.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590
https://github.com/sofa-framework/sofa/pull/538#issuecomment-358614246:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358614246
https://github.com/sofa-framework/sofa/pull/538#issuecomment-358991333:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358991333
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360095580:0,Availability,Failure,Failures,0,Failures are due to old ffmpeg libraries. They changed the api (10/2015 as I remember). ; Actually it´s working on a fresh ubuntu 17.10 but not on the old LTS. I don´t remember the ffmpeg version number. . @bcarrez was working on centos and tried to fetch the correct version before pushing it to the ubuntu vm.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360095580
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360743574:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360743574
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:99,Availability,failure,failure,99,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:49,Deployability,install,installed,49,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:380,Deployability,install,install,380,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:201,Testability,test,test,201,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:247,Testability,test,tested,247,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:346,Testability,test,testing,346,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622:86,Deployability,install,installing,86,"@ErwanDouaille your remark makes sense. ; There are several points to be aware of:; - installing a X server on the slaves will take time; - it may destabilize the build slave (?) (disc space, unforeseen problem running a GUI server on a headless machine,...); - and I agree: if we do it, the next step should be to test all existing GUIs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622:315,Testability,test,test,315,"@ErwanDouaille your remark makes sense. ; There are several points to be aware of:; - installing a X server on the slaves will take time; - it may destabilize the build slave (?) (disc space, unforeseen problem running a GUI server on a headless machine,...); - and I agree: if we do it, the next step should be to test all existing GUIs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622
https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037:8,Modifiability,config,configuring,8,Ahem... configuring a RECENT version of libavcodec and co. is a pain in the... back on Centos. I kindly suggest we disable this feature on centos...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037
https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205:78,Testability,test,tests,78,"With the new exclusion of SOFAGUI_HEADLESS_RECORDER on CentOS, looks like all tests pass correctly.; I think that once the dashboard has finished, this PR will be ready to merge.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205
https://github.com/sofa-framework/sofa/pull/538#issuecomment-369698486:29,Energy Efficiency,green,green,29,Dreams do come true ... It's green !!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-369698486
https://github.com/sofa-framework/sofa/pull/538#issuecomment-369888459:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-369888459
https://github.com/sofa-framework/sofa/issues/539#issuecomment-351352123:359,Availability,toler,tolerance,359,"Hi @jnbrunet ; The scene looks really bad constructed:; - the gravity is set implicitely to 9.81 in y direction; - no mass (therefore nan in output); - and physically a very low stiffness of your material. I wrote this instead:; ```; <?xml version=""1.0""?>; <Node dt=""1"">; <StaticSolver />; <CGLinearSolver name=""CGLinearSolver"" printLog=""1"" iterations=""2500"" tolerance=""1e-08"" threshold=""1e-08"" />; <RegularGridTopology name=""grid"" n=""3 3 25"" min=""0 0 0"" max=""15 15 180"" p0=""0 0 0"" />; <MechanicalObject template=""Vec3d"" name=""dof"" src=""@grid"" showObject=""1"" showObjectScale=""5"" />; <HexahedronSetTopologyContainer src=""@grid"" />; <HexahedronSetGeometryAlgorithms />; <HexahedronFEMForceField template=""Vec3d"" method=""small"" poissonRatio=""0.45"" youngModulus=""1.5e5"" />; <BoxROI name=""fixedROI"" box=""0 0 -3.75 15 15 3.75"" drawBoxes=""1"" />; <FixedConstraint indices=""@fixedROI.indices"" />; <BoxROI name=""forceROI"" box=""0 0 176.25 15 15 183.75"" drawBoxes=""1"" />; <LinearForceField points=""@forceROI.indices"" times=""0 1"" forces=""0 0 0 0 -0.00166667 0"" />; <UniformMass mass=""1"" />; </Node>; ```; I just added a mass and modified the stiffness value.; Can you give it a try ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-351352123
https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:675,Availability,robust,robust,675,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222
https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:174,Usability,simpl,simply,174,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222
https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059:12,Testability,test,testing,12,[ci-build] (testing),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059
https://github.com/sofa-framework/sofa/pull/540#issuecomment-353404429:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353404429
https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482:22,Testability,test,tests,22,[ci-build][with-scene-tests] do you really work ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482
https://github.com/sofa-framework/sofa/pull/540#issuecomment-356564084:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-356564084
https://github.com/sofa-framework/sofa/pull/540#issuecomment-356975313:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-356975313
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357175181:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357175181
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293:44,Availability,failure,failures,44,@damienmarchal Did you notice the unit test failures? It's about PSL.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293:39,Testability,test,test,39,@damienmarchal Did you notice the unit test failures? It's about PSL.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105:118,Deployability,install,installed,118,@guparan thank you for pointing that.The problem is that the CI machine *_pr3 does not have the python module 'hjson' installed consequently psl tests failed. EDIT: So you can safely ignore them...& merge the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105:176,Safety,safe,safely,176,@guparan thank you for pointing that.The problem is that the CI machine *_pr3 does not have the python module 'hjson' installed consequently psl tests failed. EDIT: So you can safely ignore them...& merge the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105:145,Testability,test,tests,145,@guparan thank you for pointing that.The problem is that the CI machine *_pr3 does not have the python module 'hjson' installed consequently psl tests failed. EDIT: So you can safely ignore them...& merge the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357278111:49,Safety,timeout,timeout,49,"Ok I'm gonna fix that, I'll also fix the missing timeout command on the mac_pr3 VM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357278111
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357289750:28,Testability,test,tests,28,Done! [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357289750
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877:183,Availability,failure,failure,183,"The fails again... the mac_clang-3.4 succeeded (I restarted but the previous build was here; https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options_pr3/25/console); And the additional failure in test scenes is because some machines still don't have the libjpeg/tiff library installed (se macos pr3 ) :) . @guparan, @hugtalbot if you are passing by please considere merging the PR because we need it monday morning for our group writing of tutorials for Sofa :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877:273,Deployability,install,installed,273,"The fails again... the mac_clang-3.4 succeeded (I restarted but the previous build was here; https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options_pr3/25/console); And the additional failure in test scenes is because some machines still don't have the libjpeg/tiff library installed (se macos pr3 ) :) . @guparan, @hugtalbot if you are passing by please considere merging the PR because we need it monday morning for our group writing of tutorials for Sofa :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877
https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877:194,Testability,test,test,194,"The fails again... the mac_clang-3.4 succeeded (I restarted but the previous build was here; https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options_pr3/25/console); And the additional failure in test scenes is because some machines still don't have the libjpeg/tiff library installed (se macos pr3 ) :) . @guparan, @hugtalbot if you are passing by please considere merging the PR because we need it monday morning for our group writing of tutorials for Sofa :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:41,Deployability,release,release,41,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:90,Deployability,release,release,90,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:139,Deployability,release,release,139,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:281,Deployability,integrat,integrated,281,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:281,Integrability,integrat,integrated,281,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:192,Modifiability,plugin,plugins,192,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:277,Modifiability,plugin,plugin,277,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:136,Testability,test,test,136,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:339,Testability,test,test,339,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:366,Testability,test,test,366,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:517,Testability,test,tests,517,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:597,Testability,test,tests,597,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703
https://github.com/sofa-framework/sofa/pull/541#issuecomment-353404821:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353404821
https://github.com/sofa-framework/sofa/pull/541#issuecomment-356541350:2,Deployability,update,update,2,I update my master straightaway to give it a try !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-356541350
https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:153,Modifiability,plugin,pluginization,153,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252
https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:285,Modifiability,plugin,pluginsNG,285,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252
https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:101,Testability,test,test,101,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:3264,Deployability,update,update,3264,"es/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Registering the file to the package...""],; [""rename"", ""Sofa/Helper/Types"", ""#include <sofa/helper/OptionsGroup.h>"", ""#include <sofa/helper/types/OptionsGroup.h>""],; [""rename"", ""Sofa/Helper/Types"", ""#include <sofa/helper/RGBAColor.h>"", ""#include <sofa/helper/types/RGBAColor.h>""],; [""commit"", ""Change the includes""],; [""fixheader"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h"", ""SOFA_HELPER_TYPES_OPTIONSGROUP_H""],; [""fixheader"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColors.h"", ""SOFA_HELPER_TYPES_RGBACOLOR_H""],; [""fixheader"", ""Sofa/Helper/Types/src/sofa/helper/types/options.h"", ""SOFA_HELPER_CONFIG_H"", ""SOFA_HELPER_TYPES_CONFIG_H""], ; [""commit"", ""Change the guards""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""generate-cmakelists""],; [""commit""]; ]; }; ``` . I'm not fully convinced by I wonder if this could help us in making the move. ; Eg: we start having a sofa ng branch of sofa, this branch being automatically generated from the master branch. And, if/when we are satisfied of the generating script can be re-order adequately to make a good looking history and a recipe for users to update their code base. I'm hesitating because it somehow remind me git rebase -i and I wonder if this is not doing in the wrong way something that having the right workflow in git would sold.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:78,Modifiability,refactor,refactoring,78,"Hi all, . The problem with this whole SofaNG project is that it imply a major refactoring of Sofa and thus involve a lot of changes to the existing code base and imply lot of file move (which is know to be a troublemaker with git). . To evaluate how hard it would be to have sofa that match our whishes I decided to put my hand-on; https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa. Now the problem is that it is not possible to reach this state without breaking a lot of things validating each step incrementally. I don't know how to do that but I really think we need to find either a solution or stop talking about sofang. . I have done a small tool to automate a set of changes to generate an NG directory and the corresponding cmakelists straigh from the existing master code base. ; Example of a changeset: ; ```python; {; ""commands"" : [; [""git"", ""checkout"", """" ,""Sofa.Helper.Types""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""init""],; [""mkdir"", ""Sofa/Helper/Types/src/sofa/helper/types/""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.h"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.h"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:503,Security,validat,validating,503,"Hi all, . The problem with this whole SofaNG project is that it imply a major refactoring of Sofa and thus involve a lot of changes to the existing code base and imply lot of file move (which is know to be a troublemaker with git). . To evaluate how hard it would be to have sofa that match our whishes I decided to put my hand-on; https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa. Now the problem is that it is not possible to reach this state without breaking a lot of things validating each step incrementally. I don't know how to do that but I really think we need to find either a solution or stop talking about sofang. . I have done a small tool to automate a set of changes to generate an NG directory and the corresponding cmakelists straigh from the existing master code base. ; Example of a changeset: ; ```python; {; ""commands"" : [; [""git"", ""checkout"", """" ,""Sofa.Helper.Types""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""init""],; [""mkdir"", ""Sofa/Helper/Types/src/sofa/helper/types/""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.h"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.h"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482:77,Integrability,depend,dependencies,77,Hi Damien. Are there certain categories of components that tend to have more dependencies than others?; How much of this mess could be solved by reducing even further the functionalities of SOFA-NG? ; I'd like to help with this issue if I can.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372495482
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1510,Deployability,patch,patching,1510,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1858,Deployability,update,updated,1858,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1568,Energy Efficiency,reduce,reduce,1568,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1733,Integrability,depend,dependency,1733,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:510,Modifiability,refactor,refactoring,510,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:720,Modifiability,refactor,refactoring,720,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:984,Modifiability,plugin,plugins,984,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1222,Modifiability,plugin,pluginization,1222,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1454,Modifiability,refactor,refactoring,1454,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:1708,Modifiability,plugin,plugin,1708,"& navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact third party code and code history. ; - find an agreement on the process to actually make the changes. ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:500,Usability,guid,guide,500,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690
https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997:101,Modifiability,refactor,refactoring,101,As @untereiner said in kind of jokes...we need a gantt diagram.; Which actually I agree because such refactoring effort requires a massive amount of work and coordination.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:610,Integrability,depend,dependency,610,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:482,Modifiability,plugin,plugins,482,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:524,Modifiability,plugin,plugins,524,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:810,Modifiability,plugin,plugins,810,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:999,Modifiability,refactor,refactors,999,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1157,Modifiability,refactor,refactoring,1157,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1410,Modifiability,plugin,plugin,1410,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1481,Modifiability,refactor,refactoring,1481,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1661,Modifiability,refactor,refactoring,1661,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:910,Testability,test,testing,910,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1044,Testability,test,tested,1044,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1324,Testability,test,testing,1324,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:1848,Testability,test,tested,1848,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:520,Availability,rollback,rollbacks,520,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:520,Deployability,rollback,rollbacks,520,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1298,Deployability,patch,patch,1298," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1452,Deployability,patch,patch,1452," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1952,Deployability,update,update,1952," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2081,Deployability,patch,patch,2081," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:485,Energy Efficiency,adapt,adapt,485,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:612,Energy Efficiency,adapt,adapting,612,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1843,Energy Efficiency,adapt,adapt,1843," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2018,Energy Efficiency,adapt,adapt,2018," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:153,Modifiability,refactor,refactoring,153,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:485,Modifiability,adapt,adapt,485,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:596,Modifiability,Refactor,Refactoring,596,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:612,Modifiability,adapt,adapting,612,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:907,Modifiability,refactor,refactoring,907,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:971,Modifiability,refactor,refactor,971,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1005,Modifiability,refactor,refactoring,1005,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1089,Modifiability,refactor,refactoring,1089,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1176,Modifiability,refactor,refactoring,1176,"project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1757,Modifiability,refactor,refactoring,1757," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:1843,Modifiability,adapt,adapt,1843," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2018,Modifiability,adapt,adapt,2018," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2223,Modifiability,refactor,refactoring,2223," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:443,Usability,feedback,feedback,443,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2252,Usability,feedback,feedback,2252," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:682,Deployability,update,update,682,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:948,Deployability,patch,patch,948,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1035,Deployability,patch,patch,1035,",. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1242,Deployability,update,updates,1242," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1347,Deployability,update,updated,1347," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1449,Deployability,patch,patching,1449," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:272,Integrability,depend,dependencies,272,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1577,Integrability,depend,dependencies,1577," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1612,Integrability,depend,dependent,1612," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1680,Integrability,depend,dependencies,1680," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:148,Modifiability,Plugin,Pluginization,148,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1504,Modifiability,Plugin,Pluginize,1504," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1540,Modifiability,plugin,plugins,1540," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1973,Modifiability,refactor,refactor,1973," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:333,Safety,avoid,avoid,333,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1713,Security,Validat,Validate,1713," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:604,Testability,test,test,604,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:259,Usability,simpl,simplify,259,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1671,Usability,simpl,simplify,1671," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1936,Usability,clear,clear,1936," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:2111,Usability,feedback,feedback,2111," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223
https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:894,Availability,alive,alive,894,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059
https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:542,Integrability,depend,dependencies,542,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059
https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:351,Modifiability,plugin,pluginized,351,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:151,Deployability,update,updated,151,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:163,Deployability,upgrade,upgraded,163,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:346,Deployability,update,updated,346,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:395,Deployability,update,updated,395,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:675,Modifiability,refactor,refactoring,675,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:732,Modifiability,refactor,refactoring,732,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414
https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209:1374,Modifiability,refactor,refactoring,1374,"Hi @sofa-framework/reviewers,. August was a quiet month for SOFA-NG. ## Sofa.Helper.Bvh; The [pull-request](https://github.com/sofa-framework/sofa/pull/741) has been merged. ; We have now 2 NG modules in the [ng branch](https://github.com/sofa-framework/sofa/tree/ng) of SOFA! :tada:. ## Sofa.Helper.*; Here is an overview of the other Sofa.Helper parts and how hard factorization should be.; Reminder: architecture proposal comes from [SofaDefrost cleanTheMessStep1 branch](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa).; ```; Sofa.Helper.Image; 3 classes: Image, ImageDDS, ImageRAW; sofa::helper::io -> sofa::helper::image; easy. Sofa.Helper.Types; Many classes; some sofa::helper -> sofa::helper::types; some sofa::helper::types -> sofa::helper::types; hard, may need sofa2ng modifications. Sofa.Helper.Rendering; 2 classes: FrameBufferObject, Transformation; sofa::helper::gl -> sofa::helper::rendering; easy. Sofa.Helper.Rendering.Gl; Many classes; sofa::helper::gl -> sofa::helper::rendering::gl; medium. Sofa.Helper.Mesh; 9 classes (everything from sofa/helper/io except Image*); sofa::helper::io -> sofa::helper::mesh; medium; ```. Everyone is more than welcome to do a part (or at least try to). ; Keep me informed in the comments, I can help if you have trouble using sofa2ng. ## Next steps; - Continue discussions about SofaFramework refactoring with vonlunteers (who does what and how); - Finish refactoring SofaHelper -> insure 100% coverage; - Move on with SofaCore. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209
https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209:1437,Modifiability,refactor,refactoring,1437,"Hi @sofa-framework/reviewers,. August was a quiet month for SOFA-NG. ## Sofa.Helper.Bvh; The [pull-request](https://github.com/sofa-framework/sofa/pull/741) has been merged. ; We have now 2 NG modules in the [ng branch](https://github.com/sofa-framework/sofa/tree/ng) of SOFA! :tada:. ## Sofa.Helper.*; Here is an overview of the other Sofa.Helper parts and how hard factorization should be.; Reminder: architecture proposal comes from [SofaDefrost cleanTheMessStep1 branch](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa).; ```; Sofa.Helper.Image; 3 classes: Image, ImageDDS, ImageRAW; sofa::helper::io -> sofa::helper::image; easy. Sofa.Helper.Types; Many classes; some sofa::helper -> sofa::helper::types; some sofa::helper::types -> sofa::helper::types; hard, may need sofa2ng modifications. Sofa.Helper.Rendering; 2 classes: FrameBufferObject, Transformation; sofa::helper::gl -> sofa::helper::rendering; easy. Sofa.Helper.Rendering.Gl; Many classes; sofa::helper::gl -> sofa::helper::rendering::gl; medium. Sofa.Helper.Mesh; 9 classes (everything from sofa/helper/io except Image*); sofa::helper::io -> sofa::helper::mesh; medium; ```. Everyone is more than welcome to do a part (or at least try to). ; Keep me informed in the comments, I can help if you have trouble using sofa2ng. ## Next steps; - Continue discussions about SofaFramework refactoring with vonlunteers (who does what and how); - Finish refactoring SofaHelper -> insure 100% coverage; - Move on with SofaCore. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:68,Modifiability,Plugin,Plugin,68,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:109,Modifiability,config,config,109,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:178,Modifiability,Plugin,PluginManager,178,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:249,Modifiability,Plugin,Plugin,249,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:432,Modifiability,refactor,refactoring,432,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:718,Modifiability,refactor,refactor,718,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:849,Modifiability,refactor,refactoring,849,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:943,Modifiability,refactor,refactoring,943,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:288,Performance,load,loaded,288,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:373,Performance,load,loaded,373,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:219,Usability,clear,clearly,219,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491
https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942:252,Deployability,Update,Update,252,"Hi @sofa-framework/reviewers,. Long time no see, the NG task has been quite slow this last months.; Here is a quick follow up of October and November activity. ## Sofa.Helper.Types; I finished the refactoring for Sofa.Helper.Types. ## Next objectives; Update NG branch; Open PR for Sofa.Helper.Types; Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942
https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942:197,Modifiability,refactor,refactoring,197,"Hi @sofa-framework/reviewers,. Long time no see, the NG task has been quite slow this last months.; Here is a quick follow up of October and November activity. ## Sofa.Helper.Types; I finished the refactoring for Sofa.Helper.Types. ## Next objectives; Update NG branch; Open PR for Sofa.Helper.Types; Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942
https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942:329,Modifiability,refactor,refactoring,329,"Hi @sofa-framework/reviewers,. Long time no see, the NG task has been quite slow this last months.; Here is a quick follow up of October and November activity. ## Sofa.Helper.Types; I finished the refactoring for Sofa.Helper.Types. ## Next objectives; Update NG branch; Open PR for Sofa.Helper.Types; Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942
https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660:264,Modifiability,plugin,plugin,264,"+1. To CmakeLists.txt guys, . just a small question I have ; - what is this for ?; if(NOT TARGET CImgPlugin); include(""${CMAKE_CURRENT_LIST_DIR}/CImgPluginTargets.cmake""); endif(). - shouldn't we also export something like ; CImgPlugin_INCLUDE_DIR ? . To make the plugin relocatable ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544#issuecomment-351674660
https://github.com/sofa-framework/sofa/pull/545#issuecomment-355163361:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/545#issuecomment-355163361
https://github.com/sofa-framework/sofa/pull/546#issuecomment-355227144:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546#issuecomment-355227144
https://github.com/sofa-framework/sofa/pull/546#issuecomment-364502422:64,Testability,test,tests,64,Please consider merging this PR soon ;-); [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546#issuecomment-364502422
https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:153,Integrability,depend,depends,153,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245
https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:83,Modifiability,Flexible,Flexible,83,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560:33,Availability,error,errors,33,@damienmarchal I was looking for errors with this scene : . > ./runSofa -g batch -s dag -n 100 /home/douaille/SOFA/fixTestScene/applications/plugins/Flexible/examples/demos/steak.scn. The segfault comes from : https://github.com/sofa-framework/sofa/commit/e65ef095fd96b69b3c9036b2e839f9429b4b022b#diff-179a1b721f69963e4d1fd5ee846ffe22R57. What does this line ? I tried remove it but exception_mode is used everywhere in Cimg.h and for its next call it crash.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560:141,Modifiability,plugin,plugins,141,@damienmarchal I was looking for errors with this scene : . > ./runSofa -g batch -s dag -n 100 /home/douaille/SOFA/fixTestScene/applications/plugins/Flexible/examples/demos/steak.scn. The segfault comes from : https://github.com/sofa-framework/sofa/commit/e65ef095fd96b69b3c9036b2e839f9429b4b022b#diff-179a1b721f69963e4d1fd5ee846ffe22R57. What does this line ? I tried remove it but exception_mode is used everywhere in Cimg.h and for its next call it crash.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560:149,Modifiability,Flexible,Flexible,149,@damienmarchal I was looking for errors with this scene : . > ./runSofa -g batch -s dag -n 100 /home/douaille/SOFA/fixTestScene/applications/plugins/Flexible/examples/demos/steak.scn. The segfault comes from : https://github.com/sofa-framework/sofa/commit/e65ef095fd96b69b3c9036b2e839f9429b4b022b#diff-179a1b721f69963e4d1fd5ee846ffe22R57. What does this line ? I tried remove it but exception_mode is used everywhere in Cimg.h and for its next call it crash.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077:100,Availability,error,error,100,Ok thank for the extra details. After a quick glance this line is changing the way CImg is handling error. ; The problem is that it tries to lock mutex which somehow cause the crash. ; My current guess is that if it could be related to the fact that there is either image & CImage plugin which are both using CImg...which have static initialized structure...just a guess... EDIT: mmm I'm deeply thinking...in CImg; ```cpp; #if defined(cimg_module); Mutex_info& Mutex_attr();; #elif defined(cimg_main); Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #else; inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #endif; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077:281,Modifiability,plugin,plugin,281,Ok thank for the extra details. After a quick glance this line is changing the way CImg is handling error. ; The problem is that it tries to lock mutex which somehow cause the crash. ; My current guess is that if it could be related to the fact that there is either image & CImage plugin which are both using CImg...which have static initialized structure...just a guess... EDIT: mmm I'm deeply thinking...in CImg; ```cpp; #if defined(cimg_module); Mutex_info& Mutex_attr();; #elif defined(cimg_main); Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #else; inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #endif; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616:64,Availability,redundant,redundant,64,"Hi, as scheduled I just reverted the last commit already fix or redundant with #556",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616:7,Energy Efficiency,schedul,scheduled,7,"Hi, as scheduled I just reverted the last commit already fix or redundant with #556",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616
https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616:64,Safety,redund,redundant,64,"Hi, as scheduled I just reverted the last commit already fix or redundant with #556",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356617616
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357254965:96,Integrability,depend,depend,96,"@damienmarchal, @fredroy: Why isn't CImg directly inside CImgPlugin? We would then just have to depend on CImgPlugin to use CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357254965
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357468575:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357468575
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:125,Availability,failure,failure,125,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:210,Availability,failure,failure,210,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:160,Deployability,configurat,configuration,160,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:289,Deployability,install,installed,289,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:160,Modifiability,config,configuration,160,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:120,Testability,test,test-failure,120,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:205,Testability,test,test,205,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:338,Testability,test,test,338,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357514557:8,Testability,test,test,8,"A quick test of this branch on macos: ; - `./bin/runSofa -g batch -s dag -n 100 ../../sofa/examples/Demos/caduceus.scn` crashes with a segfault; - `./bin/runSofa -s dag -n 100 ../../sofa/examples/Demos/caduceus.scn` runs ok. There is call to `glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &windowId);` who ends to a segfault.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357514557
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:143,Testability,test,tests,143,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:15,Usability,feedback,feedback,15,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357546918:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357546918
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357547242:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357547242
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357688562:3172,Performance,load,load,3172,"Light>::createInstance(this=0x000000012071ba90, context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.h:209; frame #9: 0x000000011bb62cb8 libSofaCore_d.17.12.dev.dylib`sofa::core::ObjectFactory::createObject(this=0x000000011c7be9f0, context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.cpp:186; frame #10: 0x000000011aca2c54 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::core::ObjectFactory::CreateObject(context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.h:157; frame #11: 0x000000011aca0a65 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::ObjectElement::initNode(this=0x0000000121261df0) at ObjectElement.cpp:77; frame #12: 0x000000011aca0177 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::ObjectElement::init(this=0x0000000121261df0) at ObjectElement.cpp:60; frame #13: 0x000000011ac8b407 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::BaseElement::init(this=0x000000012125f6e0) at BaseElement.cpp:149; frame #14: 0x000000011ac9de25 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::NodeElement::init(this=0x000000012125f6e0) at NodeElement.cpp:78; frame #15: 0x000000011ac75d15 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::SceneLoaderXML::processXML(xml=0x000000012125f6e0, filename=""../../sofa/examples/Demos/caduceus.scn"") at SceneLoaderXML.cpp:117; frame #16: 0x000000011ac75479 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::SceneLoaderXML::load(this=0x00000001212063e0, filename=""../../sofa/examples/Demos/caduceus.scn"") at SceneLoaderXML.cpp:79; frame #17: 0x000000011aeafa79 libSofaSimulationCore_d.dylib`sofa::simulation::Simulation::load(this=0x000000012200d800, filename=""../../sofa/examples/Demos/caduceus.scn"") at Simulation.cpp:470; frame #18: 0x00000001000213fc runSofa_d`main(argc=8, argv=0x00007ffeefbff928) at Main.cpp:381; frame #19: 0x00007fff536e1115 libdyld.dylib`start + 1; frame #20: 0x00007fff536e1115 libdyld.dylib`start + 1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357688562
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357688562:3369,Performance,load,load,3369,"Light>::createInstance(this=0x000000012071ba90, context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.h:209; frame #9: 0x000000011bb62cb8 libSofaCore_d.17.12.dev.dylib`sofa::core::ObjectFactory::createObject(this=0x000000011c7be9f0, context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.cpp:186; frame #10: 0x000000011aca2c54 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::core::ObjectFactory::CreateObject(context=0x0000000122011a00, arg=0x0000000121261df0) at ObjectFactory.h:157; frame #11: 0x000000011aca0a65 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::ObjectElement::initNode(this=0x0000000121261df0) at ObjectElement.cpp:77; frame #12: 0x000000011aca0177 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::ObjectElement::init(this=0x0000000121261df0) at ObjectElement.cpp:60; frame #13: 0x000000011ac8b407 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::BaseElement::init(this=0x000000012125f6e0) at BaseElement.cpp:149; frame #14: 0x000000011ac9de25 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::xml::NodeElement::init(this=0x000000012125f6e0) at NodeElement.cpp:78; frame #15: 0x000000011ac75d15 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::SceneLoaderXML::processXML(xml=0x000000012125f6e0, filename=""../../sofa/examples/Demos/caduceus.scn"") at SceneLoaderXML.cpp:117; frame #16: 0x000000011ac75479 libSofaSimulationCommon_d.17.12.dev.dylib`sofa::simulation::SceneLoaderXML::load(this=0x00000001212063e0, filename=""../../sofa/examples/Demos/caduceus.scn"") at SceneLoaderXML.cpp:79; frame #17: 0x000000011aeafa79 libSofaSimulationCore_d.dylib`sofa::simulation::Simulation::load(this=0x000000012200d800, filename=""../../sofa/examples/Demos/caduceus.scn"") at Simulation.cpp:470; frame #18: 0x00000001000213fc runSofa_d`main(argc=8, argv=0x00007ffeefbff928) at Main.cpp:381; frame #19: 0x00007fff536e1115 libdyld.dylib`start + 1; frame #20: 0x00007fff536e1115 libdyld.dylib`start + 1",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357688562
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357753868:255,Testability,test,test,255,"@untereiner I think that this is because batch mode does not ""remove"" element from the scene ; (it would be a nighmare). To me the underlying problem is that the batch mode should have a valid opengl context created (off-screen rendering) as we use it to test file with opengl based components. . Thanks for the stack trace... I will try to make something about it (even on macos).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357753868
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357791281:454,Availability,avail,available-contexts,454,"It is definitively hard to have an opengl context by hand...and having one for offscreen (without a windows) seems even more tricky (anyone's help is welcome). I know @ErwanDouaille search for that in his HeadLessRecorder. I assume it work on linux/windows...because they just don't crash/segfault when gl function are called without a buffer :) ; As said in:; https://www.opengl.org/discussion_boards/showthread.php/158904-OpenGL-function-calls-without-available-contexts. Too bad... I tried a lot of approach based on QOffscreenSurface and friends, they work on my system but as soon as I move that to a CI machine (which does not have X or GLX or whatever)...the application crash. I reseted the branch but you can still see the garbage in the Dashboard. I will try a different approach tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357791281
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357808354:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357808354
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357966795:42,Energy Efficiency,green,green,42,Ho damn...two full build + scene that are green builds... and not one to cheers (deep sadness); https://www.sofa-framework.org/dash/?branch=pr/fixTestScene,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357966795
https://github.com/sofa-framework/sofa/pull/548#issuecomment-357967182:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357967182
https://github.com/sofa-framework/sofa/pull/548#issuecomment-358011228:10,Energy Efficiency,green,green,10,"Wow, such green, very stable, many thanks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-358011228
https://github.com/sofa-framework/sofa/pull/548#issuecomment-358257329:115,Testability,test,tests,115,@epernod Could you quick review the commit 47ef2e63a80c please? How could CubeTopology.scn have been passing scene-tests without this fix?; (request from @damienmarchal),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-358257329
https://github.com/sofa-framework/sofa/issues/552#issuecomment-367766173:51,Safety,avoid,avoid,51,"If I understood the issue correctly, so we want to avoid conflict of -a and -n for batch version. For this we can prioritize -a over -n in batch mode i.e. if -g and -a are encountered then override the default -n otherwise -n will suffice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367766173
https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729:17,Usability,simpl,simple,17,"Exactly, this is simple but it need to be discussed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729
https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667:92,Usability,feedback,feedback,92,Feel free to make PR when you think it is ready for you because this is the best way to get feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667
https://github.com/sofa-framework/sofa/pull/553#issuecomment-355163337:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/553#issuecomment-355163337
https://github.com/sofa-framework/sofa/pull/554#issuecomment-355248746:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-355248746
https://github.com/sofa-framework/sofa/pull/554#issuecomment-357532666:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-357532666
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748:30,Safety,timeout,timeouts,30,"The scene is not crashing, it timeouts. Obviously lowering the number of CG iterations avoids the timeout but does not solve the problem...; I checked the scene before this PR and it is as slow as after. So why wasn't it timeout-ing before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748:87,Safety,avoid,avoids,87,"The scene is not crashing, it timeouts. Obviously lowering the number of CG iterations avoids the timeout but does not solve the problem...; I checked the scene before this PR and it is as slow as after. So why wasn't it timeout-ing before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748:98,Safety,timeout,timeout,98,"The scene is not crashing, it timeouts. Obviously lowering the number of CG iterations avoids the timeout but does not solve the problem...; I checked the scene before this PR and it is as slow as after. So why wasn't it timeout-ing before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748:221,Safety,timeout,timeout-ing,221,"The scene is not crashing, it timeouts. Obviously lowering the number of CG iterations avoids the timeout but does not solve the problem...; I checked the scene before this PR and it is as slow as after. So why wasn't it timeout-ing before?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359373748
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:324,Availability,down,down,324,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:225,Modifiability,config,config,225,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:37,Performance,perform,performing,37,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:87,Safety,timeout,timeout,87,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:23,Testability,test,tests,23,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:219,Testability,test,tests,219,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442
https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125:22,Testability,test,tests,22,[ci-build][with-scene-tests] (please CI don't die on me),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144:26,Availability,fault,fault,26,"Interesting. Isn't it the fault of the scene checker activated by default ? ; It will report a huge amount of things on old scenes that was not reported as error before. Maybe we should have an option to disable it (or when in batch mode). ; ; EDIT: about the failure....it is because this is compiled on the new _pr3 build VM. Where, I assume, some library is missing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144:156,Availability,error,error,156,"Interesting. Isn't it the fault of the scene checker activated by default ? ; It will report a huge amount of things on old scenes that was not reported as error before. Maybe we should have an option to disable it (or when in batch mode). ; ; EDIT: about the failure....it is because this is compiled on the new _pr3 build VM. Where, I assume, some library is missing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144:260,Availability,failure,failure,260,"Interesting. Isn't it the fault of the scene checker activated by default ? ; It will report a huge amount of things on old scenes that was not reported as error before. Maybe we should have an option to disable it (or when in batch mode). ; ; EDIT: about the failure....it is because this is compiled on the new _pr3 build VM. Where, I assume, some library is missing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530144
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530964:6,Availability,error,error,6,Is it error/warning like this you are speaking about? @damienmarchal . ![sans titre](https://user-images.githubusercontent.com/21199245/34606959-ab1419f8-f211-11e7-9e62-a1d395072c11.png),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355530964
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915:24,Availability,error,error,24,This PR won't solve any error nor warning. It will just prevent the warning parser (on Jenkins) from crashing.; About the SceneChecker raising lots of warnings: what kind of warnings does it raise? Is it normal that it is triggered for our CI batch tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915
https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915:249,Testability,test,tests,249,This PR won't solve any error nor warning. It will just prevent the warning parser (on Jenkins) from crashing.; About the SceneChecker raising lots of warnings: what kind of warnings does it raise? Is it normal that it is triggered for our CI batch tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915
https://github.com/sofa-framework/sofa/pull/556#issuecomment-355620871:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-355620871
https://github.com/sofa-framework/sofa/pull/556#issuecomment-355931316:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-355931316
https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976:76,Usability,feedback,feedback,76,Your remarks are taken into account @IPeterlik :); let's see if any further feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976
https://github.com/sofa-framework/sofa/pull/556#issuecomment-356564245:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356564245
https://github.com/sofa-framework/sofa/pull/556#issuecomment-357054353:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-357054353
https://github.com/sofa-framework/sofa/pull/556#issuecomment-357174976:57,Availability,failure,failure,57,"Ok the PR' works, I looked at each build on jenkins...no failure...but the formatter is not launched but I think we can ignore the formatting stuff to move forward the release. @guparan @bcarrez do you agree ?. PS: the sofa dashboard doesn't like PR with weird name & symbols :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-357174976
https://github.com/sofa-framework/sofa/pull/556#issuecomment-357174976:168,Deployability,release,release,168,"Ok the PR' works, I looked at each build on jenkins...no failure...but the formatter is not launched but I think we can ignore the formatting stuff to move forward the release. @guparan @bcarrez do you agree ?. PS: the sofa dashboard doesn't like PR with weird name & symbols :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-357174976
https://github.com/sofa-framework/sofa/issues/558#issuecomment-356391607:76,Deployability,release,release,76,"I have no idea...is this the current master or the pre-build ? ; Since last release there was some change on RequiredPlugin (issofa_, ...). Anyhow thanks for reporting....we will investigate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356391607
https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123:236,Modifiability,plugin,plugin-loading-failed,236,"Apparently on the source master, so something pretty recently.; Sorry for not investigating yet, but I rather prefer create an issue not to forget it. Associated post: https://www.sofa-framework.org/community/forum/topic/meshsteploader-plugin-loading-failed/#post-10306",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123
https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123:243,Performance,load,loading-failed,243,"Apparently on the source master, so something pretty recently.; Sorry for not investigating yet, but I rather prefer create an issue not to forget it. Associated post: https://www.sofa-framework.org/community/forum/topic/meshsteploader-plugin-loading-failed/#post-10306",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123
https://github.com/sofa-framework/sofa/pull/559#issuecomment-356657180:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/559#issuecomment-356657180
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357225065:159,Testability,test,tests,159,There was also the OBBModel in SOFA for OrientedBoundingBox but I don't think there is a ROI function in it. Thank you @sergeiNikolaev . [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357225065
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357303877:57,Testability,test,tests,57,"Thank you sergeiNikolaev, for the compontent and for the tests :) . I was writing a long answer...then I looked at the BoxROI implementation and noticed it already implemented axis aligned box and oriented box with the 'orientedBox' parameter. . Maybe it does not work for you and there is bug or it doesn't match what you wanted to do in that case can you provide more details please.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357303877
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:88,Usability,usab,usability,88,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:216,Usability,clear,clear,216,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:222,Usability,simpl,simpler,222,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074:149,Modifiability,plugin,plugins,149,"PSL version. I'm not really sure but I think that with the Template mecanism of PSL (https://github.com/sofa-framework/sofa/tree/master/applications/plugins/PSL#templates) . Maybe it is possible to come up with a solution looking like that:; ```css; Node : {; Import : ""pythonlib"". // The implementation that create a BoxROI and transform the parameters from; // Use friendly to the one used in the component. ; Template : {; name : MyBoxROI; properties : { ; position : ""0 0 0""; orientation : ""0 0 0""; dimmension: ""10 10 10 ""; }; BoxROI : {; // The convertToOrientedBox is implemented in the ""pythonlib"" module.; orienteBox : convertToOrientedBox(position, orientation, dimmension); } ; }; ; /// One instance of the boxroi.; MyBoxROI : {; position : ""1 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""3 4 5""; }. /// A second instance of the boxroi.; MyBoxROI : {; position : ""0 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""7 4 5""; }. }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357357289:306,Performance,perform,performance,306,"One alternative solution is, in c++, to add new Data fields into the component and in the function BoxROI::init converts these fields values into the one used internally by BoxROI to do the computation. . The drawback is that adding Data field are costly at component creation time and this can have a big performance cost in Sofa for component that are created in a loop or something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357357289
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:366,Integrability,interface,interface,366,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:221,Performance,perform,performance,221,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:402,Usability,learn,learning,402,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357640740:128,Performance,perform,performance,128,Hm...; The problem for now is that I don't know who and what way uses this BoxROI component. And how these changes affect their performance. For me it is ok to have it not in real-time.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357640740
https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003:101,Usability,usab,usable,101,"And also I guess that for different people there are different ways to define the component the most usable way. So, I am afraid there won't be unique solution for this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003
https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208:31,Usability,clear,clear,31,"Hello Serguei,. Thanks for the clear explaination. This may actually be part of the BoxROI documentation. ; Now back to your problem...what do you think about implementing a python function to convert from (position, orientation, size) would generates these 10 values ? Is it enough / not enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208
https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705:462,Modifiability,plugin,plugin,462,"Hi Sergei, . Sorry to reply that late. So to answer your question... I think a separate python script is fine. To ease the sharing of those utilitary python script we (at Defrost) have started a dedicated library called STLIB (for Sofa Template Library). I would actually be interested to add your OrientedBoxROI there. . You can find more information by browsing the auto-generated documentation at:; http://stlib.readthedocs.io/en/latest/index.html. While the plugin is there: ; https://github.com/SofaDefrost/STLIB. It is a work in progress but as we are now basing our other plugins examples and scenes to this I hope it to grow fast.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705
https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705:579,Modifiability,plugin,plugins,579,"Hi Sergei, . Sorry to reply that late. So to answer your question... I think a separate python script is fine. To ease the sharing of those utilitary python script we (at Defrost) have started a dedicated library called STLIB (for Sofa Template Library). I would actually be interested to add your OrientedBoxROI there. . You can find more information by browsing the auto-generated documentation at:; http://stlib.readthedocs.io/en/latest/index.html. While the plugin is there: ; https://github.com/SofaDefrost/STLIB. It is a work in progress but as we are now basing our other plugins examples and scenes to this I hope it to grow fast.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705
https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953:143,Deployability,Release,Release,143,This bug may affect every windows VS builds.; @guparan we investigate and found than the problem come from visual studio build directory named Release/Debug. I´m testing my PR and see if everything works well. I added some specific MSVC code inside the main CMakefile to enforce VS to not create release/debug directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953
https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953:296,Deployability,release,release,296,This bug may affect every windows VS builds.; @guparan we investigate and found than the problem come from visual studio build directory named Release/Debug. I´m testing my PR and see if everything works well. I added some specific MSVC code inside the main CMakefile to enforce VS to not create release/debug directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953
https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953:162,Testability,test,testing,162,This bug may affect every windows VS builds.; @guparan we investigate and found than the problem come from visual studio build directory named Release/Debug. I´m testing my PR and see if everything works well. I added some specific MSVC code inside the main CMakefile to enforce VS to not create release/debug directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:360,Deployability,Release,Release,360,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:442,Deployability,install,install,442,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:685,Deployability,Release,Release,685,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:1093,Deployability,Release,Release,1093,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:209,Modifiability,plugin,plugin,209,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:490,Modifiability,plugin,plugins,490,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:914,Modifiability,plugin,plugins,914,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:62,Modifiability,plugin,plugin,62,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:219,Usability,GuiD,GuiDataRepository,219,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:145,Deployability,install,install,145,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:254,Deployability,install,install,254,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:342,Deployability,configurat,configuration,342,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:563,Deployability,install,install,563,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:646,Deployability,install,install,646,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:768,Deployability,install,install,768,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:794,Deployability,install,installed,794,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:44,Modifiability,config,config,44,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:306,Modifiability,portab,portable,306,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:342,Modifiability,config,configuration,342,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:461,Modifiability,config,config,461,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:594,Modifiability,config,config,594,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:717,Modifiability,config,config,717,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038
https://github.com/sofa-framework/sofa/pull/562#issuecomment-358611854:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358611854
https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718:132,Modifiability,Flexible,Flexible,132,"@guparan, @hugtalbot, @fredroy I have done the split of PR #548... Here is CImg related changed...; fix a serie of failing scene in Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718
https://github.com/sofa-framework/sofa/pull/563#issuecomment-358613578:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/563#issuecomment-358613578
https://github.com/sofa-framework/sofa/pull/564#issuecomment-358613415:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564#issuecomment-358613415
https://github.com/sofa-framework/sofa/pull/564#issuecomment-358725008:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564#issuecomment-358725008
https://github.com/sofa-framework/sofa/pull/565#issuecomment-358768364:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358768364
https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:19,Availability,error,error,19,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900
https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:50,Deployability,update,updated,50,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900
https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:30,Integrability,depend,dependency,30,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900
https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900:143,Integrability,depend,dependency,143,"My bad for Windows error, the dependency pack was updated too soon. #566 needs to be merged. In the meantime I restart your build with the old dependency pack ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-358918900
https://github.com/sofa-framework/sofa/pull/565#issuecomment-359736499:4,Deployability,update,update,4,Any update on the discussion @damienmarchal @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/565#issuecomment-359736499
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358716138:125,Safety,avoid,avoid,125,"You know which vector and which string by looking at the using xD ; No I understand, it's just that in Defrost, we choose to avoid the blurry of having a code full of path ""::"".; But if it's not the rule in Sofa, I will change this PR and stop cleaning like that in Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358716138
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:585,Safety,avoid,avoid,585,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:570,Usability,simpl,simplicity,570,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000
https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071:32,Usability,clear,clear,32,"Sounds good to me :) ; So to be clear I should remove all the `using std::*`.; And all the `using sofa::*`, including `sofa::helper::vector` are okay?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071
https://github.com/sofa-framework/sofa/pull/567#issuecomment-359084639:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-359084639
https://github.com/sofa-framework/sofa/pull/568#issuecomment-358990770:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568#issuecomment-358990770
https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494:28,Availability,ERROR,ERROR,28,"Здравствуй @mariabul . The [ERROR] [XMLParser] means that the error was emitted by the xml parser. Having such error indicates that the content of the file you are trying to parse is considere as invalid xml content. . This happens when the file is empty or there is missing closing tag ```xml </>``` and all those kind of things. So I know it is trivial but can you first check that the content of the file is the one from our repository and that it was not changed ? . If it is then maybe it is a more complex issue.; I just checked the file you are trying to load and noticed that it is missing the xml prefix.; ```xml; <?xml version=""1.0"" encoding=""UTF-8""?>; ...; ```. Your github account says you are from moscow, so I wonder if this could be a character encoding issue. Maybe there is a cyrillic character encoding set on your system and as the file does not specifying the encoding of the XML parser it use the default one which result in unloadable file. . Could you try if specifying the xml encoding helps ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494
https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494:62,Availability,error,error,62,"Здравствуй @mariabul . The [ERROR] [XMLParser] means that the error was emitted by the xml parser. Having such error indicates that the content of the file you are trying to parse is considere as invalid xml content. . This happens when the file is empty or there is missing closing tag ```xml </>``` and all those kind of things. So I know it is trivial but can you first check that the content of the file is the one from our repository and that it was not changed ? . If it is then maybe it is a more complex issue.; I just checked the file you are trying to load and noticed that it is missing the xml prefix.; ```xml; <?xml version=""1.0"" encoding=""UTF-8""?>; ...; ```. Your github account says you are from moscow, so I wonder if this could be a character encoding issue. Maybe there is a cyrillic character encoding set on your system and as the file does not specifying the encoding of the XML parser it use the default one which result in unloadable file. . Could you try if specifying the xml encoding helps ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494
https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494:111,Availability,error,error,111,"Здравствуй @mariabul . The [ERROR] [XMLParser] means that the error was emitted by the xml parser. Having such error indicates that the content of the file you are trying to parse is considere as invalid xml content. . This happens when the file is empty or there is missing closing tag ```xml </>``` and all those kind of things. So I know it is trivial but can you first check that the content of the file is the one from our repository and that it was not changed ? . If it is then maybe it is a more complex issue.; I just checked the file you are trying to load and noticed that it is missing the xml prefix.; ```xml; <?xml version=""1.0"" encoding=""UTF-8""?>; ...; ```. Your github account says you are from moscow, so I wonder if this could be a character encoding issue. Maybe there is a cyrillic character encoding set on your system and as the file does not specifying the encoding of the XML parser it use the default one which result in unloadable file. . Could you try if specifying the xml encoding helps ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494
https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494:562,Performance,load,load,562,"Здравствуй @mariabul . The [ERROR] [XMLParser] means that the error was emitted by the xml parser. Having such error indicates that the content of the file you are trying to parse is considere as invalid xml content. . This happens when the file is empty or there is missing closing tag ```xml </>``` and all those kind of things. So I know it is trivial but can you first check that the content of the file is the one from our repository and that it was not changed ? . If it is then maybe it is a more complex issue.; I just checked the file you are trying to load and noticed that it is missing the xml prefix.; ```xml; <?xml version=""1.0"" encoding=""UTF-8""?>; ...; ```. Your github account says you are from moscow, so I wonder if this could be a character encoding issue. Maybe there is a cyrillic character encoding set on your system and as the file does not specifying the encoding of the XML parser it use the default one which result in unloadable file. . Could you try if specifying the xml encoding helps ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569#issuecomment-360149494
https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630:36,Usability,clear,clear,36,"Hi Sergei,; reset in SOFA might not clear with zeros some state values. That could be interesting to dig in the scene to see where does the problem come from. Could you investigate deeper ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630
https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292:70,Usability,responsiv,responsiveness,70,"Hi @m4n4n . Thank you for considering this issue and sorry for my low responsiveness, I was away from the office for some days. Indeed, the problem disappeared since it was due to another issue : the PR #521 introduced a bug, fixed since the #556 ; This issue being linked to this issue should now be closed. Do not hesitate to consider any other issue ! :+1: . Best,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292
https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558:52,Modifiability,plugin,plugin,52,"I'm closing this since the new awesome [SofaPython3 plugin](https://github.com/SofaDefrost/plugin.SofaPython3 ) does everything this PR was doing, but better.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558
https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558:91,Modifiability,plugin,plugin,91,"I'm closing this since the new awesome [SofaPython3 plugin](https://github.com/SofaDefrost/plugin.SofaPython3 ) does everything this PR was doing, but better.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558
https://github.com/sofa-framework/sofa/pull/575#issuecomment-360205873:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360205873
https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:97,Modifiability,plugin,plugins,97,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780
https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:153,Modifiability,plugin,plugin,153,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780
https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:196,Testability,test,test-scene,196,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780
https://github.com/sofa-framework/sofa/pull/575#issuecomment-361520309:57,Energy Efficiency,green,green,57,Did you had time to work on this so that we have a super green dashboard for 17.12 :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-361520309
https://github.com/sofa-framework/sofa/pull/576#issuecomment-360469043:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/576#issuecomment-360469043
https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585:200,Testability,test,test,200,"Thanks for reporting this issue @margaretkoehler. . > GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ;. Does it fix the problem ? If yes, we need to test it on other OS. . I will investigate it tomorrow afternoon during the coding friday. Feel free to join us for helping :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585
https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585:54,Usability,GuiD,GuiDataRepository,54,"Thanks for reporting this issue @margaretkoehler. . > GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ;. Does it fix the problem ? If yes, we need to test it on other OS. . I will investigate it tomorrow afternoon during the coding friday. Feel free to join us for helping :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585
https://github.com/sofa-framework/sofa/pull/578#issuecomment-360804745:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/578#issuecomment-360804745
https://github.com/sofa-framework/sofa/issues/581#issuecomment-374878459:24,Deployability,update,update,24,"Hey @marques-bruno, any update on this issue?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-374878459
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:345,Availability,toler,tolerance,345,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:21,Testability,test,test,21,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:14,Usability,simpl,simple,14,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:1437,Usability,undo,undoubtedly,1437,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:103,Availability,robust,robust,103,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:126,Availability,robust,robust,126,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:287,Availability,avail,available,287,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:540,Usability,simpl,simply,540,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:564,Usability,simpl,simple,564,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:601,Usability,clear,clear,601,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:76,Usability,learn,learn,76,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:194,Usability,learn,learn,194,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:462,Usability,learn,learn,462,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:364,Integrability,message,messages,364,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:779,Modifiability,variab,variable,779,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702
https://github.com/sofa-framework/sofa/issues/581#issuecomment-390939574:46,Testability,test,tests,46,"I would also point out that while there is no tests on the SparseLDLSolver (which is not very suprising) there is also no example scene, no mention of it in any doc etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390939574
https://github.com/sofa-framework/sofa/issues/582#issuecomment-364945775:142,Deployability,update,update,142,"It looks like: ""explicit Data(const BaseData::BaseInitData& init)"" allow you to easily copy data without value. Then you can add a parent and update value from the parent value. But, this is not what I'm looking for since BaseInitData flag the parent data's owner to add the new data. Meaning you can have troubles when inspect the component with two data having the same name (crash). . So, I decided to not implement a copy/clone function since I want something too specific.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/582#issuecomment-364945775
https://github.com/sofa-framework/sofa/pull/583#issuecomment-367282134:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367282134
https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857:44,Usability,feedback,feedback,44,"Hi guys, I made the changes concerning your feedback and now the PR is ready for review from my side! . The main changes are:; - Created a basic example of usage; - Now uses a factory for data creation; - The use of both args and kwargs for I/O creation is possible; - No unnecessary changes in files / no geometries added, etc. (cleaning)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857
https://github.com/sofa-framework/sofa/pull/583#issuecomment-368790112:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-368790112
https://github.com/sofa-framework/sofa/pull/583#issuecomment-374619668:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-374619668
https://github.com/sofa-framework/sofa/pull/583#issuecomment-375620001:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-375620001
https://github.com/sofa-framework/sofa/pull/584#issuecomment-363551057:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584#issuecomment-363551057
https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879:22,Testability,test,tests,22,"[ci-build][with-scene-tests]. As discussed, I removed the useless parentheses! Can be merged after the build passes (and it will !)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879
https://github.com/sofa-framework/sofa/pull/585#issuecomment-365250062:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/585#issuecomment-365250062
https://github.com/sofa-framework/sofa/pull/586#issuecomment-364362739:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-364362739
https://github.com/sofa-framework/sofa/pull/586#issuecomment-365607713:47,Testability,test,tests,47,"Here we go, let's try to [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365607713
https://github.com/sofa-framework/sofa/pull/586#issuecomment-365922786:25,Integrability,depend,dependency,25,Build fails because of a dependency from MouseOperations to multiple deprecated components in SofaUserInteraction.; Any clue on this component guys?; @damienmarchal @fredroy @ErwanDouaille @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365922786
https://github.com/sofa-framework/sofa/pull/586#issuecomment-371075952:201,Testability,test,tests,201,@damienmarchal Could you have a look at my recent commits (particularly https://github.com/sofa-framework/sofa/pull/586/commits/661d7609897dda39bf7f11d0e232e4799f3176f6) please?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-371075952
https://github.com/sofa-framework/sofa/pull/587#issuecomment-364933742:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/587#issuecomment-364933742
https://github.com/sofa-framework/sofa/pull/591#issuecomment-366182733:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/591#issuecomment-366182733
https://github.com/sofa-framework/sofa/pull/592#issuecomment-365972287:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/592#issuecomment-365972287
https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383:23,Integrability,depend,dependency,23,Sorry I didn't see the dependency SofaImplicitField -> SofaDistanceGrid.; Let's merge this right away.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/593#issuecomment-366641383
https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:53,Integrability,INTERFACE,INTERFACE,53,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323
https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:748,Integrability,depend,dependencies,748,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323
https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:188,Security,expose,exposed,188,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323
https://github.com/sofa-framework/sofa/pull/595#issuecomment-376212670:23,Availability,error,error,23,Just realized that the error this PR was supposed to fix is still there: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/767/warnings2Result/category.96784904/; The original change (exporting the defines and re-defining them in subprojects) did fix this error though.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-376212670
https://github.com/sofa-framework/sofa/pull/595#issuecomment-376212670:269,Availability,error,error,269,Just realized that the error this PR was supposed to fix is still there: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/767/warnings2Result/category.96784904/; The original change (exporting the defines and re-defining them in subprojects) did fix this error though.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-376212670
https://github.com/sofa-framework/sofa/pull/596#issuecomment-367223553:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596#issuecomment-367223553
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862:377,Deployability,update,update,377,"From gitter:; ```; initData(data1, callback=myUnion), ; initData(data2, callback=myUnion), ; initData(data3, callback=myUnion), . void myUnion(BaseData* d){ changedData.push_back(d) ; }; bool needUpdate() { return changedData.size() != 0; }; ```. The idea here was to allow users to add different, per data callback function still allowing ; a way to implement a ""centralized"" update. The idea was also to specify in the initData which data are ""cached"" and thus should trigger update/reinit on change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862:478,Deployability,update,update,478,"From gitter:; ```; initData(data1, callback=myUnion), ; initData(data2, callback=myUnion), ; initData(data3, callback=myUnion), . void myUnion(BaseData* d){ changedData.push_back(d) ; }; bool needUpdate() { return changedData.size() != 0; }; ```. The idea here was to allow users to add different, per data callback function still allowing ; a way to implement a ""centralized"" update. The idea was also to specify in the initData which data are ""cached"" and thus should trigger update/reinit on change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862:446,Performance,cache,cached,446,"From gitter:; ```; initData(data1, callback=myUnion), ; initData(data2, callback=myUnion), ; initData(data3, callback=myUnion), . void myUnion(BaseData* d){ changedData.push_back(d) ; }; bool needUpdate() { return changedData.size() != 0; }; ```. The idea here was to allow users to add different, per data callback function still allowing ; a way to implement a ""centralized"" update. The idea was also to specify in the initData which data are ""cached"" and thus should trigger update/reinit on change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367266862
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367273832:59,Safety,detect,detect,59,From discussion @bruno-marques ; A kind of DataEngine that detect changes and propagates idleevent on child. . I let bruno explain ;) . Question: what is the difference between DataEngine/ImplicitDataEngine ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367273832
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:303,Deployability,update,update,303,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:360,Deployability,update,updated,360,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:570,Deployability,update,updates,570,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:697,Deployability,update,updated,697,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:1564,Deployability,update,updated,1564,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:337,Integrability,depend,depend,337,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:1606,Integrability,depend,depend,1606,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:1627,Integrability,depend,dependencies,1627,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:0,Modifiability,Plugin,Plugin,0,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:63,Modifiability,plugin,pluginSofaCoreAsync,63,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:96,Modifiability,plugin,plugins,96,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:1700,Performance,queue,queue,1700,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:134,Testability,test,tests,134,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367275078:226,Deployability,update,update,226,Hand made tracking. By adding a DataTracker to each component and either overload the HandleEvent function or specific overloads from BaseObject(draw/drawVisual/etc...) to check if the tracked data have changed and trigger an update function if this is the case.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367275078
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961:200,Integrability,interface,interface,200,"Some references:; - https://en.wikipedia.org/wiki/Dataflow_programming; - Blender's node co-exists with Blender SceneGraph https://docs.blender.org/manual/en/dev/editors/node_editor/introduction.html#interface (node is only for the shading... but object modifier on the geometry is using a ""stack"" based approache to express a linear relationship). ; - https://solarianprogrammer.com/2012/10/17/cpp-11-async-tutorial/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367286961
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:1055,Deployability,update,update,1055,"plicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2332,Deployability,update,update,2332,"alue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2557,Deployability,update,update,2557,"ine SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the vari",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:2939,Deployability,pipeline,pipeline,2939,"ck(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_obj->*m_func)(data); \; } \; }. #define SOFAOR_ADD_CALLBACK(data, callback) \; addDataCallback(data, new Callback(this, callback)). #define SOFAOR_ADD_INPUT_CALLBACK(data, callback, trackOnly) \; addInput(data, trackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the ne",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3248,Modifiability,plugin,plugin,3248,"rackOnly, new Callback(this, callback)); ```. When reinit is called on the component, all callbacks are called and the update class is called (maybe it's a mistake, maybe only the callbacks should be called..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3602,Modifiability,variab,variable,3602,"; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3769,Modifiability,variab,variable,3769,"ore::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job with the way datas are handled in SOFA :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3424,Safety,avoid,avoid,3424,"d..). Then outputs are set to dirty, and an IdleEvent visitor is propagated:; ```; void ImplicitDataEngine::reinit(); {; cleanTrackers();; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:15,Testability,test,test,15,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:139,Testability,Test,TestEngine,139,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:205,Testability,Test,TestEngine,205,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:401,Testability,Test,TestEngine,401,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:435,Testability,Test,TestEngine,435,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:887,Testability,Test,TestEngine,887,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:613,Usability,simpl,simple,613,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:681,Usability,simpl,simple,681,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816
https://github.com/sofa-framework/sofa/pull/598#issuecomment-368307447:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598#issuecomment-368307447
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1081,Modifiability,plugin,plugin,1081,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1121,Security,expose,expose,1121,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:24,Usability,GuiD,GuiDataRepository,24,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:227,Usability,usab,usable,227,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:703,Usability,GuiD,GuiDataRepository,703,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1169,Usability,usab,usable,1169,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:432,Performance,load,load,432,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:113,Usability,GuiD,GuiDataRepository,113,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:153,Usability,GuiD,GuiDataRepository,153,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:494,Usability,GuiD,GuiDataRepository,494,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:78,Usability,GuiD,GuiDataRepository,78,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:150,Usability,GuiD,GuiDataRepository,150,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:254,Usability,GuiD,GuiDataRepository,254,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:378,Usability,GuiD,GuiDataRepository,378,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090:39,Usability,GuiD,GuiDataRepository,39,"Yes, you are right about the path when GuiDataRepository is instanciated !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090
https://github.com/sofa-framework/sofa/pull/599#issuecomment-368930197:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368930197
https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474:477,Integrability,depend,depends,477,"From what I understand, you want to grab images from a sofa scene wihtout the GUI and without the QT gui ? If yes, the headlessRecorder might be a good solution. > I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don´t know how the current gui works so I can´t help :/; In my opinion. it depends of QT. QGLWidget + QGLFrameBuffer might be the trick. . From your idea, I like the ""component"" design. Be able to grab opengl context from any QWidget doesn´t make sense to me. In this case the only canvas you want is the canvas which display the sofa´s scene",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368613474
https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399:948,Performance,perform,perform,948,"@ErwanDouaille , It's not exactly what I meant:. I would like to keep Sofa's GUI as is (not batch mode or anything like that.; What I would like to be able to do though, is grabbing only the scene of sofa.; An example might be more explicit: This picture is a screenshot of a Sofa scene where my component grabs the OpenGL viewport with glReadPixels() and then displays it back in Sofa's scene.; If everything would work as I want it to, this scene shouldn't do anything (the grabbed image would be the displayed image, so I would constantly have the classic black background with the SOFA logo. Instead though, I'm getting the whole UI on the left, the menu on top and runSofa's counter bar at the bottom.; ![screengrabber](https://user-images.githubusercontent.com/13734391/36718977-fcf8a99e-1ba3-11e8-8b62-ec2f9c9dc431.png). (In addition the framebuffer is flipped on the X axis but that's just a bug in my code... =); The purpose of this is to perform image processing directly on the scene that's generated in Sofa. In the case of the new GUI, you could imagine a scene that has multiple cameras, displaying in multiple widgets, and be interested in performing some post processing stages on these generated frames, so being able to retrive the framebuffer coming from those widgets could be useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399
https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399:1155,Performance,perform,performing,1155,"@ErwanDouaille , It's not exactly what I meant:. I would like to keep Sofa's GUI as is (not batch mode or anything like that.; What I would like to be able to do though, is grabbing only the scene of sofa.; An example might be more explicit: This picture is a screenshot of a Sofa scene where my component grabs the OpenGL viewport with glReadPixels() and then displays it back in Sofa's scene.; If everything would work as I want it to, this scene shouldn't do anything (the grabbed image would be the displayed image, so I would constantly have the classic black background with the SOFA logo. Instead though, I'm getting the whole UI on the left, the menu on top and runSofa's counter bar at the bottom.; ![screengrabber](https://user-images.githubusercontent.com/13734391/36718977-fcf8a99e-1ba3-11e8-8b62-ec2f9c9dc431.png). (In addition the framebuffer is flipped on the X axis but that's just a bug in my code... =); The purpose of this is to perform image processing directly on the scene that's generated in Sofa. In the case of the new GUI, you could imagine a scene that has multiple cameras, displaying in multiple widgets, and be interested in performing some post processing stages on these generated frames, so being able to retrive the framebuffer coming from those widgets could be useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399
https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399:590,Testability,log,logo,590,"@ErwanDouaille , It's not exactly what I meant:. I would like to keep Sofa's GUI as is (not batch mode or anything like that.; What I would like to be able to do though, is grabbing only the scene of sofa.; An example might be more explicit: This picture is a screenshot of a Sofa scene where my component grabs the OpenGL viewport with glReadPixels() and then displays it back in Sofa's scene.; If everything would work as I want it to, this scene shouldn't do anything (the grabbed image would be the displayed image, so I would constantly have the classic black background with the SOFA logo. Instead though, I'm getting the whole UI on the left, the menu on top and runSofa's counter bar at the bottom.; ![screengrabber](https://user-images.githubusercontent.com/13734391/36718977-fcf8a99e-1ba3-11e8-8b62-ec2f9c9dc431.png). (In addition the framebuffer is flipped on the X axis but that's just a bug in my code... =); The purpose of this is to perform image processing directly on the scene that's generated in Sofa. In the case of the new GUI, you could imagine a scene that has multiple cameras, displaying in multiple widgets, and be interested in performing some post processing stages on these generated frames, so being able to retrive the framebuffer coming from those widgets could be useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399
https://github.com/sofa-framework/sofa/issues/602#issuecomment-369537787:112,Performance,Load,Loader,112,"First discussion with @damienmarchal . To generate the data on the flow. . Backup gitter discussion here:. ```; Loader {; std::vector<Data<std::vector<Vec3f>> positions;; load(){; for(auto& mesh : assimp.meshes ) {; BaseData* data = new Data<std::vector<Vec3f>>() ; ; WriteOnlAccessor acc = WriteOnlyAccessor(data); ; acc.resize(mesh.vertices.size());; for( int i ; i< mesh.vertices.size();++i ){; acc[i] = v[i] ; ; }; positions.push_back(data);; addData(data, mesh.name+""_positions"") ;; }; }; }. Data<std::string>* t = new Data<std::string>() ;; t = new(t) Data<std::string>(obj->initData(t, std::string(""""), dataName, dataHelp)) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602#issuecomment-369537787
https://github.com/sofa-framework/sofa/issues/602#issuecomment-369537787:171,Performance,load,load,171,"First discussion with @damienmarchal . To generate the data on the flow. . Backup gitter discussion here:. ```; Loader {; std::vector<Data<std::vector<Vec3f>> positions;; load(){; for(auto& mesh : assimp.meshes ) {; BaseData* data = new Data<std::vector<Vec3f>>() ; ; WriteOnlAccessor acc = WriteOnlyAccessor(data); ; acc.resize(mesh.vertices.size());; for( int i ; i< mesh.vertices.size();++i ){; acc[i] = v[i] ; ; }; positions.push_back(data);; addData(data, mesh.name+""_positions"") ;; }; }; }. Data<std::string>* t = new Data<std::string>() ;; t = new(t) Data<std::string>(obj->initData(t, std::string(""""), dataName, dataHelp)) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602#issuecomment-369537787
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369577164:84,Safety,avoid,avoid,84,I just saw that Assimp is compatible with 40+ mesh formats.; I am just wondering to avoid multiple entry points we could drop the redondent import functions written specifically for Sofa and rely on Assimp ? ; What do you think ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369577164
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369692534:37,Performance,load,loader,37,I agree with lionel and cleaning the loader is a long standing issue :) . -,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369692534
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369890790:104,Performance,load,loader,104,"I'm ok to do that work, unifying the Core:Mesh and MeshLoader is already wip. ; But we can't remove all loader from Sofa. VTK, Gmsh and Trian for example are more ""research"" format and are not handled by Assimp. . I'm ready to create a generic ""MeshLoader"" component that will deal internally with the format and choose either assimp or another loader. But first we need to decide this: https://github.com/sofa-framework/sofa/issues/602",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369890790
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369890790:345,Performance,load,loader,345,"I'm ok to do that work, unifying the Core:Mesh and MeshLoader is already wip. ; But we can't remove all loader from Sofa. VTK, Gmsh and Trian for example are more ""research"" format and are not handled by Assimp. . I'm ready to create a generic ""MeshLoader"" component that will deal internally with the format and choose either assimp or another loader. But first we need to decide this: https://github.com/sofa-framework/sofa/issues/602",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369890790
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369891387:142,Testability,test,test,142,We will also need to decide if we use assimp as an extlib or if we embedded it. Right now I use cmake to find it on the system and so I can't test the code on the dasboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369891387
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224:19,Integrability,depend,dependencies,19,still this package dependencies approach...why not considering using https://buckaroo.pm/ or similar project ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369907224
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286:227,Deployability,install,install,227,"I ment using assimp to avoid redondency. Of course we need to keep the formats not supported by assimp! ; I do not understand exactly the package dependency problem, cmake can try to find the package if not dowload / compile / install it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286:146,Integrability,depend,dependency,146,"I ment using assimp to avoid redondency. Of course we need to keep the formats not supported by assimp! ; I do not understand exactly the package dependency problem, cmake can try to find the package if not dowload / compile / install it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286:23,Safety,avoid,avoid,23,"I ment using assimp to avoid redondency. Of course we need to keep the formats not supported by assimp! ; I do not understand exactly the package dependency problem, cmake can try to find the package if not dowload / compile / install it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369909286
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:152,Deployability,install,install,152,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:177,Deployability,install,install,177,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:719,Energy Efficiency,reduce,reduced,719,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:0,Integrability,Depend,Dependency,0,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:300,Integrability,depend,dependency-management-or-why-we-built-buckaroo-,300,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314:418,Integrability,depend,dependency,418,"Dependency tracking between libraries is a very serious issue and the state in Sofa is bad. We are currently mixing system specific management (apt get install someLibs, manual install on windows) all combined with hard copy of other ones in extlibs. . I found https://hackernoon.com/approaches-to-c-dependency-management-or-why-we-built-buckaroo-26049d4646e7 to be an interesting reading to understand a bit more the dependency problem in c/c++. . To improve the Sofa situation are :; - git submodule; - CMake's ExternalProject_add ; - buckaroo. The best is probably buckaroo but, given that it is a big work to use it and we have much higher priority task, CMake ExternalProject_add sound's a good improvement with a reduced cost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369914314
https://github.com/sofa-framework/sofa/pull/603#issuecomment-381967679:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-381967679
https://github.com/sofa-framework/sofa/pull/603#issuecomment-404434312:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-404434312
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415710402:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415710402
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:4,Modifiability,plugin,plugin,4,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:169,Safety,avoid,avoid,169,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:47,Usability,usab,usable,47,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827
https://github.com/sofa-framework/sofa/pull/603#issuecomment-416955334:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-416955334
https://github.com/sofa-framework/sofa/pull/603#issuecomment-420269657:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-420269657
https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264:24,Availability,failure,failure,24,@guparan Here it is the failure on windows are removed. ; Do we go fast path ? [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264
https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264:101,Testability,test,tests,101,@guparan Here it is the failure on windows are removed. ; Do we go fast path ? [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264
https://github.com/sofa-framework/sofa/pull/604#issuecomment-369868322:66,Deployability,update,update,66,The current version we now have in extlibs 1.9...but actually the update didn't needed anychange so I assume that with the old gtest we had the fix would have work equally well.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369868322
https://github.com/sofa-framework/sofa/pull/604#issuecomment-369887992:74,Energy Efficiency,green,green,74,Yes... with the CImgPlugin fix you are doing the windows platform will be green :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369887992
https://github.com/sofa-framework/sofa/pull/604#issuecomment-369890402:6,Energy Efficiency,green,green,6,"Cool, green is my favorite color ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369890402
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:161,Availability,failure,failure,161,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:172,Usability,clear,clearly,172,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064:317,Testability,test,test,317,"Well I don't really see the cleaning there just renaming to a name I find more ambiguous because EXPECT_NONFATAL_FAILURES is much less 'distinct' fom EXPECT_NONFATAL_FAILURE than the previous one... but maybe I miss-understood the commit. Anyway if you think this is better I don't really care as this is a macro to ""test"" the testing framework so of very limited usage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064:327,Testability,test,testing,327,"Well I don't really see the cleaning there just renaming to a name I find more ambiguous because EXPECT_NONFATAL_FAILURES is much less 'distinct' fom EXPECT_NONFATAL_FAILURE than the previous one... but maybe I miss-understood the commit. Anyway if you think this is better I don't really care as this is a macro to ""test"" the testing framework so of very limited usage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370712593:330,Availability,failure,failure,330,"The most important is just the `if (results.size() <= 1)` in `HasFailures`.; About the name, I started by fixing the typo ""ATLEASE"" and finnaly changed the whole thing but it's not very important we can go back to ""ATLEAST"" if you prefer :-). EDIT: Actually we can't since the new behavior is to pass only if there is MORE than 1 failure.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370712593
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309:266,Availability,failure,failure,266,@guparan +for the typo and for the careful reading. Thanks.; With the new condition the macro is now equivalent to something like EXPECT_ATLEAST_TWO_FAILURES ? But as you can see in the dashboard this is not what the tests are expecting as there is now one new test failure reported in the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309:217,Testability,test,tests,217,@guparan +for the typo and for the careful reading. Thanks.; With the new condition the macro is now equivalent to something like EXPECT_ATLEAST_TWO_FAILURES ? But as you can see in the dashboard this is not what the tests are expecting as there is now one new test failure reported in the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309:261,Testability,test,test,261,@guparan +for the typo and for the careful reading. Thanks.; With the new condition the macro is now equivalent to something like EXPECT_ATLEAST_TWO_FAILURES ? But as you can see in the dashboard this is not what the tests are expecting as there is now one new test failure reported in the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402:128,Availability,failure,failure,128,"Ok I didn't take the time to run the tests myself so I wanted to see the Dashboard. Is it actually possible to have more than 1 failure in a test ? Both ""ATLEAST_ONE"" and ""ATLEAST_TWO"" seem useless there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402:37,Testability,test,tests,37,"Ok I didn't take the time to run the tests myself so I wanted to see the Dashboard. Is it actually possible to have more than 1 failure in a test ? Both ""ATLEAST_ONE"" and ""ATLEAST_TWO"" seem useless there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402:141,Testability,test,test,141,"Ok I didn't take the time to run the tests myself so I wanted to see the Dashboard. Is it actually possible to have more than 1 failure in a test ? Both ""ATLEAST_ONE"" and ""ATLEAST_TWO"" seem useless there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:363,Availability,failure,failure,363,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:335,Integrability,message,messages,335,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:429,Modifiability,refactor,refactor,429,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:320,Safety,avoid,avoid,320,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:358,Testability,test,test,358,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:415,Testability,test,tests,415,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645
https://github.com/sofa-framework/sofa/pull/604#issuecomment-370811681:33,Safety,safe,safely,33,"Not sure to understand. Shall we safely remove this custom macro (ONE **and** TWO versions) or do we want to keep it for a transitional period?; If we keep it, I have to redo my commit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370811681
https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:31,Usability,simpl,simple,31,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821
https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:67,Usability,clear,clear,67,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:88,Testability,test,tests,88,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:496,Testability,test,tests,496,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:685,Testability,test,test,685,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:844,Testability,test,test,844,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:159,Usability,clear,clearer,159,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:993,Usability,clear,clear,993,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122
https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048:130,Integrability,message,message,130,I fully support this... I regularly see people asking me what is wrong because the find_package() reports very hard to understand message.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607#issuecomment-372311048
https://github.com/sofa-framework/sofa/pull/609#issuecomment-373022322:75,Deployability,install,installation,75,"Even in the eventuality that more changes are needed to actually clean the installation of SOFA, these changes still are needed.; So LGTM :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-373022322
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:118,Modifiability,config,config,118,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:187,Modifiability,config,config,187,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:207,Modifiability,config,config,207,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:409,Modifiability,config,config,409,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:501,Modifiability,plugin,plugin,501,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:560,Modifiability,config,config,560,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:740,Modifiability,config,config,740,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498
https://github.com/sofa-framework/sofa/pull/609#issuecomment-379190142:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-379190142
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078:99,Usability,intuit,intuitive,99,Any reason to do this instead of adding a flag `--infinite-run` or similar ? `-1` is a bit counter-intuitive.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:268,Availability,error,errors,268,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:192,Modifiability,variab,variable,192,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:316,Modifiability,variab,variable,316,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:338,Security,validat,validate,338,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519
https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938:66,Usability,intuit,intuitive,66,"I kinda see what you went through. The argument parser isn't that intuitive TBO. I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; Maybe this would solve your problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938
https://github.com/sofa-framework/sofa/pull/610#issuecomment-375683767:13,Deployability,update,updated,13,See #613 for updated version.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-375683767
https://github.com/sofa-framework/sofa/pull/611#issuecomment-373099372:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611#issuecomment-373099372
https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:29,Deployability,update,updated,29,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179
https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:172,Usability,intuit,intuitive,172,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179
https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125:231,Modifiability,refactor,refactor,231,@m4n4n @guparan These lines of code:; https://github.com/m4n4n/sofa/blob/7a0b89cb0c9420930a862312466c8f7bfdcc218a/applications/sofa/gui/BatchGUI.cpp#L55-L63; is duplicated in `else` condition following it. Wouldn't it be better to refactor it so they appear only once?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844:32,Modifiability,refactor,refactor,32,"Indeed, @m4n4n could you try to refactor your code to avoid this big duplication?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844:54,Safety,avoid,avoid,54,"Indeed, @m4n4n could you try to refactor your code to avoid this big duplication?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:678,Deployability,update,updateVisual,678,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:1416,Deployability,update,updateVisual,1416," ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ Command + period (mac) to stop "" << msgendl;; }; }. i++;; }; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:37,Modifiability,refactor,refactored,37,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:73,Testability,test,tested,73,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803:40,Modifiability,refactor,refactored,40,@guparan Thank you for the help. I have refactored it accordingly. It is also able to handle the case for number of iterations set to 1.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:157,Deployability,update,update,157,"You are right about the case of 1 iteration. I broke it by starting `i` to 2. Handling the 1 iteration case differently is a bit overkill though. Here is my update (still not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; if (nbIter != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:763,Deployability,update,updateVisual,763,"You are right about the case of 1 iteration. I broke it by starting `i` to 2. Handling the 1 iteration case differently is a bit overkill though. Here is my update (still not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; if (nbIter != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:1528,Deployability,update,updateVisual,1528,"er != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl;; ; if (nbIter == -1) // Additional message for infinite iterations; {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ Command + period (mac) to stop "" << msgendl;; }; }. i++;; }; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:2080,Integrability,message,message,2080,"er != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl;; ; if (nbIter == -1) // Additional message for infinite iterations; {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ Command + period (mac) to stop "" << msgendl;; }; }. i++;; }; }; return 0;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:175,Testability,test,tested,175,"You are right about the case of 1 iteration. I broke it by starting `i` to 2. Handling the 1 iteration case differently is a bit overkill though. Here is my update (still not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; if (nbIter != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087
https://github.com/sofa-framework/sofa/pull/613#issuecomment-378934582:40,Testability,test,tests,40,"Looks good, let's [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378934582
https://github.com/sofa-framework/sofa/pull/616#issuecomment-376458137:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376458137
https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013:35,Modifiability,plugin,plugin,35,Solution proposed : creation a new plugin SofaPython with compatibility Python 2.7 & Python 3 with new architecture.; Advantages : ; - no disturbance for the users (no refactoring side effects); - the work around Python can progress,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013
https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013:168,Modifiability,refactor,refactoring,168,Solution proposed : creation a new plugin SofaPython with compatibility Python 2.7 & Python 3 with new architecture.; Advantages : ; - no disturbance for the users (no refactoring side effects); - the work around Python can progress,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376446726:80,Performance,load,loaded,80,"Hey @alxbilger, thank you for your PR!; Does this mean that PSL.dll will not be loaded?; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376446726
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463:223,Modifiability,plugin,plugin,223,"In debug, an exception is thrown and the program crashes. We can say that PSL.dll is not loaded. Try this code in debug:. ```c++; #include <iostream>; #include <algorithm>. int main(int argc, char *argv[]) ; {; std::string plugin(""PSL"");; std::string dotExt("".dll"");. const bool b = std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin());. if (b) std::cout << ""equal\n"";; else std::cout << ""not equal\n"";; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463:326,Modifiability,plugin,plugin,326,"In debug, an exception is thrown and the program crashes. We can say that PSL.dll is not loaded. Try this code in debug:. ```c++; #include <iostream>; #include <algorithm>. int main(int argc, char *argv[]) ; {; std::string plugin(""PSL"");; std::string dotExt("".dll"");. const bool b = std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin());. if (b) std::cout << ""equal\n"";; else std::cout << ""not equal\n"";; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463:89,Performance,load,loaded,89,"In debug, an exception is thrown and the program crashes. We can say that PSL.dll is not loaded. Try this code in debug:. ```c++; #include <iostream>; #include <algorithm>. int main(int argc, char *argv[]) ; {; std::string plugin(""PSL"");; std::string dotExt("".dll"");. const bool b = std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin());. if (b) std::cout << ""equal\n"";; else std::cout << ""not equal\n"";; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:121,Modifiability,plugin,plugin,121,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:26,Performance,load,loaded,26,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:99,Testability,test,test,99,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:109,Usability,simpl,simple,109,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:38,Modifiability,plugin,plugin,38,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:111,Performance,load,load,111,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:135,Testability,test,test,135,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:13,Usability,simpl,simpler,13,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:29,Usability,clear,clearer,29,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376467870:35,Performance,load,loaded,35,Ok I didn't understand that PSL is loaded as a name in your use case sorry ^^,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376467870
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188:121,Integrability,contract,contract,121,"@guparan Your proposition does not work in the unlikely case of a plugin name containing "".dll"" in its name. The initial contract was, from the comments, to find the extension in the end of the string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188:66,Modifiability,plugin,plugin,66,"@guparan Your proposition does not work in the unlikely case of a plugin name containing "".dll"" in its name. The initial contract was, from the comments, to find the extension in the end of the string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376533098:161,Modifiability,plugin,plugin,161,"You are right I answered too fast. Actually your fix is exactly what is needed.; Could you propagate it to other `if (std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin()))` calls (there are others)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376533098
https://github.com/sofa-framework/sofa/pull/617#issuecomment-376551497:45,Testability,test,tests,45,Great thank you :+1: ; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376551497
https://github.com/sofa-framework/sofa/pull/619#issuecomment-378181891:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619#issuecomment-378181891
https://github.com/sofa-framework/sofa/pull/619#issuecomment-378520483:12,Testability,test,tests,12,"TODO: scene tests count should be same as master before #611 merge: 612 for CentOS options, 612 for MacOS options, 620 for Ubuntu options, 612 for Windows options.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619#issuecomment-378520483
https://github.com/sofa-framework/sofa/pull/620#issuecomment-378259638:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620#issuecomment-378259638
https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:61,Modifiability,plugin,plugins,61,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002
https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:35,Testability,test,tests,35,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002
https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:123,Testability,test,tests,123,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002
https://github.com/sofa-framework/sofa/pull/622#issuecomment-379675017:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/622#issuecomment-379675017
https://github.com/sofa-framework/sofa/pull/624#issuecomment-380018425:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/624#issuecomment-380018425
https://github.com/sofa-framework/sofa/pull/625#issuecomment-380028607:501,Deployability,update,updated,501,"I don't think the current behaviour is wrong. The order of event in the animationloop is:; ```; 1. AnimateBeginEvent; 2. SetTime(StartTime + dt); 3. AnimateEndEvent; ```. The `WriteState` component uses `AnimateBeginEvent`, so in that case, as @hugtalbot said, you should set the proper periodicity as an argument. This hardcoded fix will break the periodicity of everyone who set their `WriteState` relative to the `AnimateBeginEvent` (at the very beginning of the animation loop, before the time is updated).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625#issuecomment-380028607
https://github.com/sofa-framework/sofa/pull/625#issuecomment-404860930:108,Availability,robust,robust,108,"regarding the content of the PR, we should close it; moreover, you can find a work on making this work more robust in the PR #714 ; agreed @VannesteFelix ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625#issuecomment-404860930
https://github.com/sofa-framework/sofa/pull/625#issuecomment-440460300:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/625#issuecomment-440460300
https://github.com/sofa-framework/sofa/pull/626#issuecomment-379794295:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626#issuecomment-379794295
https://github.com/sofa-framework/sofa/pull/626#issuecomment-379807587:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626#issuecomment-379807587
https://github.com/sofa-framework/sofa/pull/626#issuecomment-380378430:68,Safety,avoid,avoid,68,This PR fix the crash. But some work is needed on the meshloader to avoid this behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/626#issuecomment-380378430
https://github.com/sofa-framework/sofa/pull/627#issuecomment-380378946:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380378946
https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385:242,Testability,test,test,242,"the unwanted behavior is describe in the commit of @damienmarchal : ; ""; [SofaKernel] FIX Bug in BoxROI that is not properly initialized. The code is automatically adding an alignedbox if nothing is provided in; the constructor. This kind of test make no sense in the constructor as; the ""isSet"" is sure to be set to false. The test should go in init or reinit. This commit fix that.; """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385
https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385:328,Testability,test,test,328,"the unwanted behavior is describe in the commit of @damienmarchal : ; ""; [SofaKernel] FIX Bug in BoxROI that is not properly initialized. The code is automatically adding an alignedbox if nothing is provided in; the constructor. This kind of test make no sense in the constructor as; the ""isSet"" is sure to be set to false. The test should go in init or reinit. This commit fix that.; """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385
https://github.com/sofa-framework/sofa/pull/628#issuecomment-380017645:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/628#issuecomment-380017645
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977:340,Energy Efficiency,reduce,reduced,340,"Hi Damien,; Thanks for the input,I see now why a different type naming was used for the factory, I didn't know it was the type ""encoding"" for python. I also think that explicit data typing is a necessary feature to override an implicit type introspection. In my plugin for instance I have some ""relatively complex"" data structures that are reduced to basic numpy arrays when passed to python, and for which type introspection from python back to cpp wouldn't give the correct type. Also, wouldn't it make sense to completely override the datatype::name() string for the python style typename, already in the sofa DataTypeInfo, not just in the python factory?; It would break scenes that explicits template types, but it would be more consistent. Looking fwd to see how things goes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977:262,Modifiability,plugin,plugin,262,"Hi Damien,; Thanks for the input,I see now why a different type naming was used for the factory, I didn't know it was the type ""encoding"" for python. I also think that explicit data typing is a necessary feature to override an implicit type introspection. In my plugin for instance I have some ""relatively complex"" data structures that are reduced to basic numpy arrays when passed to python, and for which type introspection from python back to cpp wouldn't give the correct type. Also, wouldn't it make sense to completely override the datatype::name() string for the python style typename, already in the sofa DataTypeInfo, not just in the python factory?; It would break scenes that explicits template types, but it would be more consistent. Looking fwd to see how things goes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380386015:221,Deployability,update,update,221,"Smoothing the syntax of PSDE:; ```python. #sofadataengine ferrait un truc du genre scanner les paramètre de la fonction, créerait des ; # data input du même nom, créerait un (ou plusieurs) data output et dans la fonction update ; # appelle myenginefunction. @sofadataengine; def myenginefunction(indata1, indata2):; return indata1 + indata2 . def createScene(rootNode):; a = rootNode.createObject(""OglModel"", name=""a""); b = rootNode.createObject(""OglModel"", name=""b""); rootNode.addObject( myenginefunction(""@a.position"", ""@b.position"") ); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380386015
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2252,Deployability,update,update,2252,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2563,Deployability,update,update,2563,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:1558,Modifiability,plugin,pluginName,1558,"I generated a list of all the uniques Data typenames present in the caduceus scene's components (on the left hand side, 1 example of datafield name matching to given typename:. **BaseData::getValueTypeInfo()->name()**|**BaseData::getName()**; -- | --; bool | listening; double | zFar; fixed_array&lt;Vec3d,2> | box; float | exponent; int | pivot; Mat4x4d | transformation; Quatd | orientation; ResizableExtVector&lt;Edge> | edges; ResizableExtVector&lt;int> | vertNormIdx; ResizableExtVector&lt;Quad> | quads; ResizableExtVector&lt;Triangle> | triangles; ResizableExtVector&lt;Vec2f> | texcoords; ResizableExtVector&lt;Vec3f> | bitangents; std::set&lt;int> | group; string | name; TagSet | tags; unknown | bbox; unsigned int | shadowTextureSize; unsigned short | textureUnit; Vec2f | translationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of u",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2000,Usability,user experience,user experience,2000,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:77,Usability,clear,clearly,77,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:376,Usability,usab,usable,376,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:184,Deployability,update,update,184,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:402,Testability,log,logic,402,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:466,Testability,log,logic,466,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:84,Usability,simpl,simply,84,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380451603:1204,Deployability,update,update,1204,"Here is a first version of a MagicEngine in python. ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; from MagicEngine import *; ; def myupdate(a, b, c): ; """"""This is so cute to have a single point documentation in our code""""""; return a + b + c; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'). MagicEngine(rootNode, myupdate, a=1.0, b=2.0, c=3.0); ```. With the following in MagicEngine.py:; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-. import Sofa; import os; import inspect; ; class MagicEngine(Sofa.PythonScriptDataEngine):; def __init__(self, node, fct, **kwargs):; self.addNewData(""Description"", ""Properties"", """", ""s"", inspect.getdoc(fct)) . argspec = inspect.getargspec(fct); for arg in argspec.args:; argval = None; if arg in kwargs:; argval = kwargs[arg] ; elif argspec.defaults != None and arg in argspec.defaults:; argval = argspec.defaults[arg] ; ; if argval != None: ; self.addNewInput(arg, datatype=""f"", value=argval) ; else:; Sofa.msg_error(""Unable to create an input for parameter: ""+str(arg)) ; ; self.lastreturnedvalue = False ; self.name = str(fct) ; self.params = argspec.args; self.fct=fct; ; def update(self):; calld = []; for param in self.params: ; calld.append(self.findData(param).value) ; ; tmp = self.fct(*calld) ; if not self.lastreturnedvalue:; self.addNewOutput(""output"", datatype=""f"", value=tmp) ; self.lastreturnedvalue = True; self.findData(""output"").value = tmp; ```. Basically it creates MagicEngine engine that is a DataEngine, pass the function and argument to it. ; In the constructor of this MagicEngine the function is introspected to add the needed inputs. As there is no type inference I used fload but this should be easy to add. The output is a bit tricky and I don't like it...as it requires the MagicEngine to be executed a least one time before to work. I will try a different approach where we can specify manually the types of intput & output.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380451603
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380451603:330,Performance,load,loader,330,"Here is a first version of a MagicEngine in python. ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; from MagicEngine import *; ; def myupdate(a, b, c): ; """"""This is so cute to have a single point documentation in our code""""""; return a + b + c; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'). MagicEngine(rootNode, myupdate, a=1.0, b=2.0, c=3.0); ```. With the following in MagicEngine.py:; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-. import Sofa; import os; import inspect; ; class MagicEngine(Sofa.PythonScriptDataEngine):; def __init__(self, node, fct, **kwargs):; self.addNewData(""Description"", ""Properties"", """", ""s"", inspect.getdoc(fct)) . argspec = inspect.getargspec(fct); for arg in argspec.args:; argval = None; if arg in kwargs:; argval = kwargs[arg] ; elif argspec.defaults != None and arg in argspec.defaults:; argval = argspec.defaults[arg] ; ; if argval != None: ; self.addNewInput(arg, datatype=""f"", value=argval) ; else:; Sofa.msg_error(""Unable to create an input for parameter: ""+str(arg)) ; ; self.lastreturnedvalue = False ; self.name = str(fct) ; self.params = argspec.args; self.fct=fct; ; def update(self):; calld = []; for param in self.params: ; calld.append(self.findData(param).value) ; ; tmp = self.fct(*calld) ; if not self.lastreturnedvalue:; self.addNewOutput(""output"", datatype=""f"", value=tmp) ; self.lastreturnedvalue = True; self.findData(""output"").value = tmp; ```. Basically it creates MagicEngine engine that is a DataEngine, pass the function and argument to it. ; In the constructor of this MagicEngine the function is introspected to add the needed inputs. As there is no type inference I used fload but this should be easy to add. The output is a bit tricky and I don't like it...as it requires the MagicEngine to be executed a least one time before to work. I will try a different approach where we can specify manually the types of intput & output.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380451603
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372:314,Deployability,UPDATE,UPDATE,314,"The one which use a decorator to specify the return types.. The look&feel for the client code:; ```python; from TypedMagic import *. @sofaengine( ret=(""customout"", ""s""), inputs={""a"" : ""i"", ""b"" : ""i""} ) ; def typedupdate(a, b, c): ; """"""This is so cute to have a single point documentation in our code""""""; print(""MY UPDATE:"" + str(a)) ; return ""Yolo"" + str(a + b + c); ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); TypedMagicEngine(rootNode, typedupdate, a=1.0, b=2.0, c=3.0); ```; EDIT: the ""customout"" will be the name of the output field. With more or less this in TypedMagic; ```python. class TypedMagicEngine(Sofa.PythonScriptDataEngine):; def __init__(self, node, sofaengine, **kwargs):; fct = sofaengine.function; retinfo = sofaengine.retinfo; argsinfo = sofaengine.argsinfo; self.addNewData(""Description"", ""Properties"", """", ""s"", inspect.getdoc(fct)) . argspec = inspect.getargspec(fct); for arg in argspec.args:; argval = None; ### Get the name & default value; if arg in kwargs:; argval = kwargs[arg] ; elif argspec.defaults != None and arg in argspec.defaults:; argval = argspec.defaults[arg] . ### Get the type ; datatype = ""f""; if arg in argsinfo:; datatype = argsinfo[arg]; ; if argval != None: ; self.addNewInput(arg, datatype=datatype, value=argval) ; else:; Sofa.msg_error(""Unable to create an input for parameter: ""+str(arg)) ; ; if retinfo != None:; self.addNewOutput(retinfo[0], datatype=retinfo[1]) ; ; self.retinfo = retinfo[0]; self.name = fct.__name__ ; self.params = argspec.args; self.fct=fct; ; def update(self):; calld = []; for param in self.params: ; calld.append(self.findData(param).value) ; ; self.findData(self.retinfo).value = self.fct(*calld) . ; class sofaengine(object):; def __init__(self, ret=(""output"",None), inputs=[]): ; self.retinfo = ret; self.argsinfo = inputs; ; def __call__(self, fn):; self.function = fn; return self ; ```. Of course this is just a POC (lot of corner cases are not handle",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372:1589,Deployability,update,update,1589,"pedupdate(a, b, c): ; """"""This is so cute to have a single point documentation in our code""""""; print(""MY UPDATE:"" + str(a)) ; return ""Yolo"" + str(a + b + c); ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); TypedMagicEngine(rootNode, typedupdate, a=1.0, b=2.0, c=3.0); ```; EDIT: the ""customout"" will be the name of the output field. With more or less this in TypedMagic; ```python. class TypedMagicEngine(Sofa.PythonScriptDataEngine):; def __init__(self, node, sofaengine, **kwargs):; fct = sofaengine.function; retinfo = sofaengine.retinfo; argsinfo = sofaengine.argsinfo; self.addNewData(""Description"", ""Properties"", """", ""s"", inspect.getdoc(fct)) . argspec = inspect.getargspec(fct); for arg in argspec.args:; argval = None; ### Get the name & default value; if arg in kwargs:; argval = kwargs[arg] ; elif argspec.defaults != None and arg in argspec.defaults:; argval = argspec.defaults[arg] . ### Get the type ; datatype = ""f""; if arg in argsinfo:; datatype = argsinfo[arg]; ; if argval != None: ; self.addNewInput(arg, datatype=datatype, value=argval) ; else:; Sofa.msg_error(""Unable to create an input for parameter: ""+str(arg)) ; ; if retinfo != None:; self.addNewOutput(retinfo[0], datatype=retinfo[1]) ; ; self.retinfo = retinfo[0]; self.name = fct.__name__ ; self.params = argspec.args; self.fct=fct; ; def update(self):; calld = []; for param in self.params: ; calld.append(self.findData(param).value) ; ; self.findData(self.retinfo).value = self.fct(*calld) . ; class sofaengine(object):; def __init__(self, ret=(""output"",None), inputs=[]): ; self.retinfo = ret; self.argsinfo = inputs; ; def __call__(self, fn):; self.function = fn; return self ; ```. Of course this is just a POC (lot of corner cases are not handled) ...It is also very easy to implement the two TypedMagic and MagicEngine in a single piece of code instead of two very similar ones.... and in python 3 we could use annotation...but as we are 2.7..we cannot.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372:442,Performance,load,loader,442,"The one which use a decorator to specify the return types.. The look&feel for the client code:; ```python; from TypedMagic import *. @sofaengine( ret=(""customout"", ""s""), inputs={""a"" : ""i"", ""b"" : ""i""} ) ; def typedupdate(a, b, c): ; """"""This is so cute to have a single point documentation in our code""""""; print(""MY UPDATE:"" + str(a)) ; return ""Yolo"" + str(a + b + c); ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); TypedMagicEngine(rootNode, typedupdate, a=1.0, b=2.0, c=3.0); ```; EDIT: the ""customout"" will be the name of the output field. With more or less this in TypedMagic; ```python. class TypedMagicEngine(Sofa.PythonScriptDataEngine):; def __init__(self, node, sofaengine, **kwargs):; fct = sofaengine.function; retinfo = sofaengine.retinfo; argsinfo = sofaengine.argsinfo; self.addNewData(""Description"", ""Properties"", """", ""s"", inspect.getdoc(fct)) . argspec = inspect.getargspec(fct); for arg in argspec.args:; argval = None; ### Get the name & default value; if arg in kwargs:; argval = kwargs[arg] ; elif argspec.defaults != None and arg in argspec.defaults:; argval = argspec.defaults[arg] . ### Get the type ; datatype = ""f""; if arg in argsinfo:; datatype = argsinfo[arg]; ; if argval != None: ; self.addNewInput(arg, datatype=datatype, value=argval) ; else:; Sofa.msg_error(""Unable to create an input for parameter: ""+str(arg)) ; ; if retinfo != None:; self.addNewOutput(retinfo[0], datatype=retinfo[1]) ; ; self.retinfo = retinfo[0]; self.name = fct.__name__ ; self.params = argspec.args; self.fct=fct; ; def update(self):; calld = []; for param in self.params: ; calld.append(self.findData(param).value) ; ; self.findData(self.retinfo).value = self.fct(*calld) . ; class sofaengine(object):; def __init__(self, ret=(""output"",None), inputs=[]): ; self.retinfo = ret; self.argsinfo = inputs; ; def __call__(self, fn):; self.function = fn; return self ; ```. Of course this is just a POC (lot of corner cases are not handle",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380470372
https://github.com/sofa-framework/sofa/pull/629#issuecomment-380471023:733,Availability,ping,pingpong,733,"If you like this kind of trick maybe you will also like the drafty 'Animation' framework that is in stlib as it allows you to replace a lot of fat PythonScript controller with code like that: ; ```python; def myAnimation(target, factor):; ### This function will be called at each animation step, ; ### target is the object passed in the dictionary passed in the animate function. ; ### factor is a floating value indicating where we are between 0.0 and 1.0 in the animation. ; target.position = Transform(target.position).translate( 0.0, LinearRamp(-3.14/2, 3.14/2, factor), 0.0 ) . def createScene(rootNode):; c = rootNode.createObject(""MechanicalObject"", template='rigid'); animate(myAnimation, {""target"" : c}, duration=1.0, mode=""pingpong""); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380471023
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:722,Modifiability,plugin,plugins,722,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:871,Modifiability,plugin,plugin,871,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:79,Usability,simpl,simple,79,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469
https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:397,Energy Efficiency,charge,charge,397,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402
https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:570,Energy Efficiency,charge,charge,570,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402
https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:926,Safety,detect,detect,926,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402
https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:749,Security,access,accessing,749,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402
https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:1293,Security,access,access,1293,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:330,Testability,test,test,330,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:369,Usability,feedback,feedback,369,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:402,Availability,error,error,402,"Hey guys, . so, I checked the PR and I have the following comments:. - The examples of the original PSDE contribution get broken with these commits, so this should be fixed. If you want to provide new examples, that’s also ok! In the case of PSDEExamples/01-basic/ changing the type string in DataEngine.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:1353,Availability,avail,available,1353,"ne.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2061,Modifiability,extend,extending,2061,"ect object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3051,Modifiability,extend,extended,3051," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:1009,Safety,avoid,avoid,1009," have the following comments:. - The examples of the original PSDE contribution get broken with these commits, so this should be fixed. If you want to provide new examples, that’s also ok! In the case of PSDEExamples/01-basic/ changing the type string in DataEngine.py from 'd' to 'int' already fixes the problem. For PSDEExamples/02-advanced/ I couldn’t find the error immediately. . - Regarding the question of linking and automatic deriving of data-types for Inputs my opinion is similar to Damien’s:. > Sure...what we want to do is to create a new data with the exact same type of the data pointed by a link. So making a clone of an existing data (to get its type) and then initialize its parent would do the trick without needed all the factory and datatypename things. . I also do think that the existing linking mechanism could be complemented by a cloning feature that creates a copy of a BaseData object. Probably just a clone()-function in BaseData. This would avoid the implementation of a “heavy-weight” factory, like Damien said. To add this data to the correct object (the PSDE) it is only necessary to set the owner, I think. Finally, linking is done by using setParent(). In this way the user can program freely in C++ without worrying about whether his newly defined compound type needs to be made available in the factory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:3063,Safety,detect,detect,3063," to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be enough to have types such as string, int, float, array, matrix, etc. Here one could use the identifiers already used in python. Also, the user has to state the type he wants for the Output, since there is no way of inferring automatically when both ends are subject to the user’s choice. Therefore, this would be limited to declaring the desired type of an Output. The types for the Inputs should always be derived automagically, I think. I hope this ideas are useful!. Cheers!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2297,Usability,clear,clear,2297,"actory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be eno",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416
https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695:157,Usability,intuit,intuitively,157,"I don't know if this still an adequate proposition, but I was thinking that it might be also a nice idea to change the name of the PSDE to something that is intuitively more graspable. Some suggestions could be (in order of preference): . PyScriptableComponent; PyFunctionBlock; PyComponent. I don't think that at this time we would be breaking to much code by changing the name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:44,Deployability,update,updated,44,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:100,Deployability,update,update,100,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:174,Modifiability,inherit,inheritance,174,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:206,Modifiability,inherit,inherited,206,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:261,Modifiability,inherit,inheritance,261,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:294,Modifiability,inherit,inherited,294,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:382,Modifiability,inherit,inheritance,382,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:519,Usability,clear,clearly,519,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406585627:152,Deployability,update,updated,152,"Hi @sescaida,; Thanks for following up on the subject :) I came back from holidays this week, that's why it didn't go much further since the STC.; I've updated the examples, that shows how to use both:; - the initial version of the PSDE (explicit data typing in the addNewInput / addNewOutput methods, but with SOFA C++-style datatype factory) ; - The new auto-detected I/O types derived from their parent / child's value types. As I said in my previous comment, I'd hope to go further now that I'm back, especially on the aspects of setting input types as kwargs to the PythonScriptDataEngine component. I will also rename the PythonScriptDataEngine into whatever we decide.; Damien suggested PythonEngine, I'd be more for PythonDataEngine to keep the consistency between the bound component's name and the Pyhton name (PythonDataEngine -> DataEngine); What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406585627
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406585627:361,Safety,detect,detected,361,"Hi @sescaida,; Thanks for following up on the subject :) I came back from holidays this week, that's why it didn't go much further since the STC.; I've updated the examples, that shows how to use both:; - the initial version of the PSDE (explicit data typing in the addNewInput / addNewOutput methods, but with SOFA C++-style datatype factory) ; - The new auto-detected I/O types derived from their parent / child's value types. As I said in my previous comment, I'd hope to go further now that I'm back, especially on the aspects of setting input types as kwargs to the PythonScriptDataEngine component. I will also rename the PythonScriptDataEngine into whatever we decide.; Damien suggested PythonEngine, I'd be more for PythonDataEngine to keep the consistency between the bound component's name and the Pyhton name (PythonDataEngine -> DataEngine); What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406585627
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:686,Availability,redundant,redundant,686,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:686,Safety,redund,redundant,686,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:54,Usability,feedback,feedback,54,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:1094,Deployability,update,update,1094,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:355,Modifiability,inherit,inheriting,355,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:531,Usability,simpl,simple,531,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:354,Deployability,update,updated,354,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:22,Usability,clear,clear,22,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1114,Deployability,update,update,1114,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1240,Modifiability,evolve,evolve,1240,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:766,Usability,simpl,simpler,766,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406629667:142,Deployability,update,update,142,"Ok, I think you are touching on stuff which is a little bit beyond my current knowledge about Sofa. In the current implementation of the PSDE update() is triggered by the onBeginAnimationStep-event. I'm not sure update() is triggered by a change in some of the Data. I'll look into it when I check your current version. . As you said, if there's some more fundamental discussions going on it makes sense to stick to the current naming convention for consistency's sake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406629667
https://github.com/sofa-framework/sofa/pull/629#issuecomment-406629667:212,Deployability,update,update,212,"Ok, I think you are touching on stuff which is a little bit beyond my current knowledge about Sofa. In the current implementation of the PSDE update() is triggered by the onBeginAnimationStep-event. I'm not sure update() is triggered by a change in some of the Data. I'll look into it when I check your current version. . As you said, if there's some more fundamental discussions going on it makes sense to stick to the current naming convention for consistency's sake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406629667
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:899,Availability,redundant,redundant,899,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:365,Deployability,update,update,365,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:397,Deployability,update,update,397,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:585,Deployability,update,update,585,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:798,Deployability,update,update,798,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:954,Deployability,update,update,954,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1186,Deployability,update,update,1186,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1387,Deployability,update,update,1387,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1551,Deployability,update,update,1551,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:1595,Integrability,depend,dependency,1595,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:648,Modifiability,inherit,inherits,648,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:758,Modifiability,inherit,inherits,758,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:899,Safety,redund,redundant,899,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:388,Usability,clear,clearly,388,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407380411:233,Testability,test,testing,233,"@marques-bruno I see how that ""on-demand""-processing mechanism prevents useless computation by the DataEngine. Do you think we should strive to preserve that behavior and unlink the triggering by an event? From my part it needs more testing to see the behavior. . Returning to the issues part of this PR:; - I've checked the examples and everything seems to work nicely. I modified one example by adding a chained PSDE, which also works (by explicitly declaring the type of the output); - I find the following syntax for declaring a vacant output a little bit confusing: ; `self.addNewOutput('average', value='0')`; I would probably leave out the 'value' altogether, because this syntax suggests that it has some integer or even string type. But this is not the main issue now.; - I think the main issue now is to get a review from the guys to see the feasibility of the concept in general and of the modifications at the level of Base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407380411
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407769458:296,Availability,down,downsides,296,"Hi @sescaida @damienmarchal,. I made it possible to pass inputs to PythonScriptDataEngines directly through the call to createObject(), which makes it more similar to how components are created in the SceneGraph normally. the example in PSDEAverageEngine.pyscn show the behavior. There are a few downsides in the current implementation though:; - I didn't investigate the effects on error handling (creating input data fields while the field should actually be considered as an ""unused data field name"" for instance..; - I had to hack my way around, probably because I got a bit lost in the SofaPython codebase, trying to figure out how the bindings worked... so the implementation is probably not the cleanest possible.. :/; - The current implementation of the parse() function binding does not pass the BaseObjectDescription object to python, which makes it impossible to retrieve the ""unused datafields"" that we need for the automatic input bindings. Thus I added a ""datalinks"" function, called after the parse() function in python, that takes the key/values pairs of unused attributes passed to createObject, and creates new inputs from them. I chose to create a separate function for that because I didn't dare modifying the behavior of the parse function itself, but it might be worth passing the attributes directly to the python parse method instead, since it is how it's done on the C++ side of things...?. Looking forward to your opinion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407769458
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407769458:383,Availability,error,error,383,"Hi @sescaida @damienmarchal,. I made it possible to pass inputs to PythonScriptDataEngines directly through the call to createObject(), which makes it more similar to how components are created in the SceneGraph normally. the example in PSDEAverageEngine.pyscn show the behavior. There are a few downsides in the current implementation though:; - I didn't investigate the effects on error handling (creating input data fields while the field should actually be considered as an ""unused data field name"" for instance..; - I had to hack my way around, probably because I got a bit lost in the SofaPython codebase, trying to figure out how the bindings worked... so the implementation is probably not the cleanest possible.. :/; - The current implementation of the parse() function binding does not pass the BaseObjectDescription object to python, which makes it impossible to retrieve the ""unused datafields"" that we need for the automatic input bindings. Thus I added a ""datalinks"" function, called after the parse() function in python, that takes the key/values pairs of unused attributes passed to createObject, and creates new inputs from them. I chose to create a separate function for that because I didn't dare modifying the behavior of the parse function itself, but it might be worth passing the attributes directly to the python parse method instead, since it is how it's done on the C++ side of things...?. Looking forward to your opinion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407769458
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:447,Availability,error,error,447,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:93,Deployability,update,update,93,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:949,Usability,simpl,simpler,949,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294
https://github.com/sofa-framework/sofa/pull/629#issuecomment-408079610:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-408079610
https://github.com/sofa-framework/sofa/pull/629#issuecomment-409198011:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-409198011
https://github.com/sofa-framework/sofa/pull/630#issuecomment-380357379:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/630#issuecomment-380357379
https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:105,Integrability,protocol,protocols,105,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414
https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:288,Integrability,protocol,protocols,288,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414
https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:72,Modifiability,plugin,plugin,72,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414
https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:153,Modifiability,plugin,plugin,153,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414
https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444:135,Modifiability,Plugin,Plugin,135,Good news !; We have been accepted for the GSoC 2018 !; Congratulations to the students selected by Google @firedranzer (Communication Plugin) and @m4n4n (SOFA Pulse) ! Let's start the code !!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444
https://github.com/sofa-framework/sofa/pull/635#issuecomment-381073427:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635#issuecomment-381073427
https://github.com/sofa-framework/sofa/pull/635#issuecomment-392530049:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635#issuecomment-392530049
https://github.com/sofa-framework/sofa/pull/635#issuecomment-397559895:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635#issuecomment-397559895
https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905:47,Modifiability,Flexible,Flexible,47,Pb of compilation with Compliant (and probably Flexible as well),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905
https://github.com/sofa-framework/sofa/pull/637#issuecomment-387002115:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-387002115
https://github.com/sofa-framework/sofa/pull/637#issuecomment-389487680:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-389487680
https://github.com/sofa-framework/sofa/pull/637#issuecomment-390132135:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-390132135
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:169,Availability,avail,available,169,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:59,Testability,test,tests,59,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:133,Usability,feedback,feedback,133,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:190,Deployability,update,update,190,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:311,Deployability,update,update,311,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:487,Deployability,update,update,487,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1328,Deployability,update,update,1328,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:127,Integrability,interface,interface,127,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:969,Integrability,message,message,969,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1083,Integrability,message,message,1083,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1308,Integrability,message,message,1308,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1494,Modifiability,plugin,plugins,1494,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1239,Performance,perform,performance,1239,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041
https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306:107,Usability,feedback,feedback,107,@olivier-goury and @EulalieCoevoet this PR can be severly breaking so don't hesitate to review it and give feedback to Hugo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306
https://github.com/sofa-framework/sofa/pull/637#issuecomment-394989867:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-394989867
https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378:48,Usability,feedback,feedback,48,"Ok so it seems to be ready, let's just wait the feedback from @damienmarchal regarding the current incompatibility problem at Defrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378
https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419:94,Deployability,integrat,integrated,94,"Hi Hugo,. The incompatibility I was talking about few days ago were because of issimo changes integrated in master.; So I don't think there is a need to wait for merge. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419
https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419:94,Integrability,integrat,integrated,94,"Hi Hugo,. The incompatibility I was talking about few days ago were because of issimo changes integrated in master.; So I don't think there is a need to wait for merge. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395358419
https://github.com/sofa-framework/sofa/pull/637#issuecomment-404574558:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-404574558
https://github.com/sofa-framework/sofa/pull/638#issuecomment-389089309:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638#issuecomment-389089309
https://github.com/sofa-framework/sofa/pull/638#issuecomment-392597852:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638#issuecomment-392597852
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381866574:302,Security,certificate,certificate-of-origin-dco,302,"Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA, you hereby accept and agree to the terms and conditions detailed in the [associated DCO](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381866574
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:169,Integrability,message,messages,169,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:157,Testability,log,logging,157,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:139,Usability,clear,clearer,139,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:96,Integrability,message,messages,96,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:120,Integrability,message,message,120,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:229,Integrability,message,message,229,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:251,Integrability,Message,MessageLoader,251,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:283,Integrability,Message,MessageBaseObject,283,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232:357,Performance,load,loaders,357,"Nice, . I'm happy someone make some proposal on this topic. I think we should factor the common messages, I don't think message.h/cpp is the right place for that. . I would put that either in separated place like containing only message: ; - SofaCore/MessageLoader.cpp/h; - SofaCore/MessageBaseObject.cpp/h ; Or in the source code in the base class for the loaders. . Alternative: use a real text-framework that is suppose to externalise all the texts from the source code (to internationalize Sofa...but this wuold be time consuming work). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381917232
https://github.com/sofa-framework/sofa/pull/639#issuecomment-381933666:47,Performance,load,loader,47,"@damienmarchal ; source code of base class for loader sounds right. Working on it :+1: . btw, i wondered why not use `if` and `cout()` than `msg_error()` and `msg_error_when()`. then came across #190 . It was very impressive. :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381933666
https://github.com/sofa-framework/sofa/pull/639#issuecomment-382021827:37,Performance,load,loaders,37,Moved the function to base class for loaders in last commit. Please review.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-382021827
https://github.com/sofa-framework/sofa/pull/639#issuecomment-382434596:107,Testability,test,tests,107,"Oh... when I made last commit, I meant to revert a37ba08. Had been awake for more than 40 hours(academics, tests, etc.) and evidently, wasn't thinking properly. (Slept like a baby right after last commit. :grin: ) Will adjust this in next commit. Creating new files sounds right. I have another exam tomorrow. Will do right after it. :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-382434596
https://github.com/sofa-framework/sofa/pull/639#issuecomment-386779185:89,Testability,log,logging,89,"@guparan there is no `messaging` folder. did you mean; `SofaKernel/framework/sofa/helper/logging/FileMessage.{h,cpp}` instead of; `SofaKernel/framework/sofa/helper/messaging/FileMessage.{h,cpp}`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-386779185
https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664299:150,Testability,log,logging,150,"@gaurab4163 ; yes sorry for the missunderstood, the files should be placed in a new folder named: SofaKernel/framework/sofa/helper/messaging/; not in logging/; Could you change your commit and move the files. Thx.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664299
https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664483:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664483
https://github.com/sofa-framework/sofa/pull/639#issuecomment-387727534:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-387727534
https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388:100,Testability,log,log,100,"thanks @gaurab4163 for the change. Could you just check the reviews, there is 2 files to remove: a .log and .view; Then it is ok to go I think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388
https://github.com/sofa-framework/sofa/pull/639#issuecomment-389089145:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-389089145
https://github.com/sofa-framework/sofa/pull/640#issuecomment-389441903:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640#issuecomment-389441903
https://github.com/sofa-framework/sofa/pull/640#issuecomment-389803561:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/640#issuecomment-389803561
https://github.com/sofa-framework/sofa/pull/641#issuecomment-382441881:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641#issuecomment-382441881
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:92,Modifiability,variab,variables,92,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:32,Safety,safe,safe,32,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:65,Usability,simpl,simply,65,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339
https://github.com/sofa-framework/sofa/pull/642#issuecomment-385899442:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-385899442
https://github.com/sofa-framework/sofa/pull/642#issuecomment-385910578:62,Safety,safe,safe,62,@fspadoni maybe you could add your input regarding the thread safe question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-385910578
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:569,Integrability,Message,MessageFormatter,569,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:668,Integrability,Message,MessageFormatter,668,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:92,Modifiability,variab,variable,92,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:589,Modifiability,polymorphi,polymorphic,589,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:55,Safety,safe,safe,55,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:143,Safety,safe,safe,143,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:311,Safety,safe,safe,311,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:395,Safety,safe,safe-initialization-of-a-singleton,395,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:643,Availability,fault,fault,643,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:316,Integrability,message,messageTypePrefixes,316,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:344,Integrability,message,messageTypeColors,344,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:680,Integrability,message,messageTypeColors,680,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:765,Integrability,message,messages,765,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:279,Modifiability,variab,variable,279,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:228,Performance,race condition,race condition,228,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:298,Safety,safe,safe,298,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:1070,Safety,predict,predicted,1070,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748
https://github.com/sofa-framework/sofa/pull/642#issuecomment-395966289:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-395966289
https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:329,Integrability,message,message,329,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790
https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:134,Modifiability,variab,variables,134,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790
https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:238,Modifiability,variab,variables,238,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397580596:91,Testability,test,tests,91,"Thanks for the review @damienmarchal . However I'm not sure what you are expecting for the tests based on BaseTest? My modification is needed for the compilation of these cpp files, I didn't go further than this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397580596
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:78,Integrability,message,message,78,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:5,Modifiability,inherit,inheriting,5,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:142,Modifiability,refactor,refactoring,142,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:60,Testability,test,test,60,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209
https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:160,Testability,test,tests,160,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209
https://github.com/sofa-framework/sofa/pull/642#issuecomment-399893037:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-399893037
https://github.com/sofa-framework/sofa/pull/642#issuecomment-400040986:278,Safety,detect,detected,278,"Now ready to review. A complete re-factoring of the console helper has been done to improves the efficiency of the console output formatting. It also adds style features to supported; OS terminals. On Windows, both ainsi and native terminals are now supported and automatically detected.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-400040986
https://github.com/sofa-framework/sofa/pull/642#issuecomment-400232863:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-400232863
https://github.com/sofa-framework/sofa/pull/642#issuecomment-404087145:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-404087145
https://github.com/sofa-framework/sofa/pull/644#issuecomment-384290207:32,Energy Efficiency,power,power,32,I stopped the builds myself. CI power is needed for other PRs.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644#issuecomment-384290207
https://github.com/sofa-framework/sofa/pull/646#issuecomment-384291388:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646#issuecomment-384291388
https://github.com/sofa-framework/sofa/pull/646#issuecomment-384547556:28,Availability,error,error,28,Crashes are fixed but a new error appears: ; `[LightManager(lightManager1)] The maximum of lights permitted ( 2 ) has been reached.`. Apparently linked to this definition in LightManager.h:; ```cpp; #ifndef __APPLE__; enum { MAX_NUMBER_OF_LIGHTS = /*GL_MAX_LIGHTS*/ 5 };; #else; enum { MAX_NUMBER_OF_LIGHTS = /*GL_MAX_LIGHTS*/ 2 };; #endif; ```; @fredroy Any idea how to solve it?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/646#issuecomment-384547556
https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983:109,Modifiability,variab,variables,109,@hugtalbot could you review my review in commit cb4eb09; I had to split your VecCoord position device into 2 variables. As in fact the original Data is linked to rigid mechanical Object in the scene and so changing its size and adding new position change the behavior of the rigid objects.; I tested your Demo scene and I can still nicely see the omni moving. Well done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983
https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983:293,Testability,test,tested,293,@hugtalbot could you review my review in commit cb4eb09; I had to split your VecCoord position device into 2 variables. As in fact the original Data is linked to rigid mechanical Object in the scene and so changing its size and adding new position change the behavior of the rigid objects.; I tested your Demo scene and I can still nicely see the omni moving. Well done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983
https://github.com/sofa-framework/sofa/pull/648#issuecomment-408828222:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408828222
https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977:16,Testability,test,tests,16,yes but not the tests or I'm missing something?; And @hugtalbot changed 2 scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977
https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950:30,Modifiability,plugin,plugin,30,TODO: try to edit the fetched plugin and configure again to see if CMake is not erasing user modifications.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950
https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950:41,Modifiability,config,configure,41,TODO: try to edit the fetched plugin and configure again to see if CMake is not erasing user modifications.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950
https://github.com/sofa-framework/sofa/pull/649#issuecomment-389504611:18,Testability,test,tested,18,Back to wip until tested and typo fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389504611
https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666:41,Modifiability,plugin,plugin,41,"Just tried to add commits in my external plugin and then re-fetch, nothing was erased :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666
https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444:613,Integrability,depend,dependencies,613,"Hi @tgaugry ; I think I fixed the issue:; - first, I added a condition checking before resizing constraintReleased; - second, a beginEdit() on d_constraintFactor was actually forcing the d_constraintFactor.isSet() function to return true (since the the beginEdit is considered as ""setting"" the data); Let me know if it suits you, I tested your scene it works with or without specifying the constraintFactor; - third, use of bwdInit() function: when AttachedContraint focuses on subnodes (these might not be initialized yet) and the initialization of AttachedContraint requires MO size info. With the work on Data dependencies bwdInit() should be later removed. Thanks for noticing the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444
https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444:332,Testability,test,tested,332,"Hi @tgaugry ; I think I fixed the issue:; - first, I added a condition checking before resizing constraintReleased; - second, a beginEdit() on d_constraintFactor was actually forcing the d_constraintFactor.isSet() function to return true (since the the beginEdit is considered as ""setting"" the data); Let me know if it suits you, I tested your scene it works with or without specifying the constraintFactor; - third, use of bwdInit() function: when AttachedContraint focuses on subnodes (these might not be initialized yet) and the initialization of AttachedContraint requires MO size info. With the work on Data dependencies bwdInit() should be later removed. Thanks for noticing the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444
https://github.com/sofa-framework/sofa/pull/650#issuecomment-448394055:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-448394055
https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:120,Deployability,deploy,deploying,120,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680
https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:135,Deployability,install,installed,135,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680
https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:300,Deployability,deploy,deployment,300,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680
https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:146,Modifiability,config,config,146,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680
https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:227,Modifiability,config,config,227,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:263,Availability,error,error,263,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:216,Deployability,update,update,216,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:184,Performance,load,loaded,184,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:227,Performance,load,loader,227,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:201,Usability,simpl,simply,201,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616
https://github.com/sofa-framework/sofa/issues/652#issuecomment-387766951:166,Performance,load,loader,166,"Metadata sections can be find anywhere in vtk files. These data are not embedded on a topological entity (vertex etc). They are therefore not read and treated by the loader. However, the reader could skip them quietly. I like yoru suggestion @hugtalbot. it's up to you @quentinfrancois0 !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387766951
https://github.com/sofa-framework/sofa/issues/652#issuecomment-388037397:39,Availability,error,errors,39,I think it could be good to change the errors in warnings because when you are a beginner on Sofa you don't really know if it has an impact on the scene behavior. I don't really manage Sofa Kernel code actually so I'm not able to propose the code modifications to change the errors in warnings if it is what you are waiting from me @untereiner.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-388037397
https://github.com/sofa-framework/sofa/issues/652#issuecomment-388037397:275,Availability,error,errors,275,I think it could be good to change the errors in warnings because when you are a beginner on Sofa you don't really know if it has an impact on the scene behavior. I don't really manage Sofa Kernel code actually so I'm not able to propose the code modifications to change the errors in warnings if it is what you are waiting from me @untereiner.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-388037397
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:35,Availability,error,error,35,"Hello guys!. I am struggling on an error with the MeshVTKLoader. I have defined a mesh in .vtk format, but it seems that SOFA does not recognize this mesh. I tried either by creating the .vtk file as binary or ascii but none of them is working. Here is the error I get with the binary version: ; ---. ...; [WARNING] [BaseObject(unnamed)] Unknown keyword É♣é; [WARNING] [BaseObject(unnamed)] Unknown keyword É; [WARNING] [BaseObject(unnamed)] Unknown keyword ó; [WARNING] [BaseObject(unnamed)] Unknown keyword ¯ß²E♠c; [WARNING] [BaseObject(unnamed)] Unknown keyword ?☺§♣Z♠c☺§; [WARNING] [BaseObject(unnamed)] Unknown keyword ?; [WARNING] [BaseObject(unnamed)] Unknown keyword Ô☺]♣Þ; [WARNING] [BaseObject(unnamed)] Unknown keyword A; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ♣²; [WARNING] [BaseObject(unnamed)] Unknown keyword ù♣Â♣²; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ♠♠☺²♦I☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ☺¹☺²☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦I♦H♦♣☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦I☺¹♦♣♦I☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦HÌ; [WARNING] [BaseObject(unnamed)] Unknown keyword ╬♠""♣A♣¯; [WARNING] [BaseObject(unnamed)] Unknown keyword ╬♣A♠""; [WARNING] [BaseObject(unnamed)] Unknown keyword x; [WARNING] [BaseObject(unnamed)] Unknown keyword D♠{; [WARNING] [BaseObject(unnamed)] Unknown keyword o♣Â♠♠♠♣Â; [WARNING] [BaseObject(unnamed)] Unknown keyword o; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword «♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣¬♣ä☺8♠ï☺; [WARNING] [BaseObject(unnamed)] Unknown keyword x☺L; [WARNING] [BaseObject(unnamed)] Unknown keyword q; [WARNING] [BaseObject(unnamed)] Unknown keyword Â♣♥; [WARNING] [BaseObject(unnamed)] Unknown keyword Â♠w; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword j♠; [WARNING] [BaseObject",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:257,Availability,error,error,257,"Hello guys!. I am struggling on an error with the MeshVTKLoader. I have defined a mesh in .vtk format, but it seems that SOFA does not recognize this mesh. I tried either by creating the .vtk file as binary or ascii but none of them is working. Here is the error I get with the binary version: ; ---. ...; [WARNING] [BaseObject(unnamed)] Unknown keyword É♣é; [WARNING] [BaseObject(unnamed)] Unknown keyword É; [WARNING] [BaseObject(unnamed)] Unknown keyword ó; [WARNING] [BaseObject(unnamed)] Unknown keyword ¯ß²E♠c; [WARNING] [BaseObject(unnamed)] Unknown keyword ?☺§♣Z♠c☺§; [WARNING] [BaseObject(unnamed)] Unknown keyword ?; [WARNING] [BaseObject(unnamed)] Unknown keyword Ô☺]♣Þ; [WARNING] [BaseObject(unnamed)] Unknown keyword A; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ♣²; [WARNING] [BaseObject(unnamed)] Unknown keyword ù♣Â♣²; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ♠♠☺²♦I☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ☺¹☺²☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦I♦H♦♣☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦I☺¹♦♣♦I☻; [WARNING] [BaseObject(unnamed)] Unknown keyword ♦HÌ; [WARNING] [BaseObject(unnamed)] Unknown keyword ╬♠""♣A♣¯; [WARNING] [BaseObject(unnamed)] Unknown keyword ╬♣A♠""; [WARNING] [BaseObject(unnamed)] Unknown keyword x; [WARNING] [BaseObject(unnamed)] Unknown keyword D♠{; [WARNING] [BaseObject(unnamed)] Unknown keyword o♣Â♠♠♠♣Â; [WARNING] [BaseObject(unnamed)] Unknown keyword o; [WARNING] [BaseObject(unnamed)] Unknown keyword ÿ; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword «♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣¬♣ä☺8♠ï☺; [WARNING] [BaseObject(unnamed)] Unknown keyword x☺L; [WARNING] [BaseObject(unnamed)] Unknown keyword q; [WARNING] [BaseObject(unnamed)] Unknown keyword Â♣♥; [WARNING] [BaseObject(unnamed)] Unknown keyword Â♠w; [WARNING] [BaseObject(unnamed)] Unknown keyword j♣Á; [WARNING] [BaseObject(unnamed)] Unknown keyword j♠; [WARNING] [BaseObject",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:9195,Availability,error,errorsegfault ##########. ########## SIG 2 - SIGINT: interactive attention signal, probably a ctrl+c ##########; sofa::helper::BackTrace::dump; sofa::helper::BackTrace::sig; perror; CtrlRoutine; BaseThreadInitThunk; RtlUserThreadStart. And here is the error I get with the ascii version:; ---. ...; [WARNING] [BaseObject(unnamed)] Unknown keyword 2447; [WARNING] [BaseObject(unnamed)] Unknown keyword 1860; [WARNING] [BaseObject(unnamed)] Unknown keyword 1451; [WARNING] [BaseObject(unnamed)] Unknown keyword 2539; [WARNING] [BaseObject(unnamed)] Unknown keyword 1224; [WARNING] [BaseObject(unnamed)] Unknown keyword 799; [WARNING] [BaseObject(unnamed)] Unknown keyword 1011; [WARNING] [BaseObject(unnamed)] Unknown keyword 19; [WARNING] [BaseObject(unnamed)] Unknown keyword 2576; [WARNING] [BaseObject(unnamed)] Unknown keyword 1301; [WARNING] [BaseObject(unnamed)] Unknown keyword 2918; [WARNING] [BaseObject(unnamed)] Unknown keyword 513; [WARNING] [BaseObject(unnamed)] Unknown keyword 687; [WARNING] [BaseObject(unnamed)] Unknown keyword 182; [WARNING] [BaseObject(unnamed)] Unknown keyword 182; [WARNING] [BaseObject(unnamed)] Unknown keyword 2529; [WARNING] [BaseObject(unnamed)] Unknown keyword 815; [WARNING] [BaseObject(unnamed)] Unknown keyword 1131; [",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12374,Deployability,update,update,12374,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12416,Deployability,update,updateIfDirty,12416,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12466,Deployability,update,update,12466,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12508,Deployability,update,updateIfDirty,12508,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12263,Performance,load,loader,12263,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12283,Performance,load,load,12283,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12301,Performance,load,loader,12301,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12713,Performance,load,loader,12713,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547:12766,Performance,load,loader,12766,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155321547
https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392:16,Usability,feedback,feedback,16,"Thanks for your feedback @hugtalbot!. So I understand everything is on tracks on this bug then. I guess you have a lot of job to do guys with all the issues that you have to treat, and you are doing such a great job with SOFA framework!; I am discovering it since a few days now, and I really enjoy the journey :). Is there any chance that this issue will be treated in the near future?. Anyway, I found a work around:; - I read the `.vtk` file with the `meshio` python library.; - Then I export the mesh in `.mesh` format.; - I finally import the `.mesh` file into the gmsh python API, and export it in `.msh` format, which is readable by the `MeshGmshLoader`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392
https://github.com/sofa-framework/sofa/issues/654#issuecomment-392606560:32,Security,validat,validate,32,PR #660 is merged. Hugo can you validate the problem is gone ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/654#issuecomment-392606560
https://github.com/sofa-framework/sofa/pull/656#issuecomment-389407544:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389407544
https://github.com/sofa-framework/sofa/pull/656#issuecomment-389781136:2,Testability,test,tests,2,2 tests are failing is this normal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389781136
https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233:0,Usability,Clear,Cleary,0,Cleary not. I'm investigating because I have no idea where the problem could come from. OK. I Got it...it is an interesting one so I report the details. In the code comments.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233
https://github.com/sofa-framework/sofa/pull/656#issuecomment-389903272:68,Testability,test,tests,68,@hugtalbot & @jnbrunet ; I fixed the problematic code and added new tests for each of the added features.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389903272
https://github.com/sofa-framework/sofa/pull/656#issuecomment-390195968:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-390195968
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1456,Availability,ERROR,ERROR,1456,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1491,Availability,ERROR,ERROR,1491,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1745,Availability,ERROR,ERROR,1745,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1794,Availability,error,error,1794,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1802,Availability,ERROR,ERROR,1802,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1863,Availability,error,error,1863,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2073,Availability,Failure,Failure,2073,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2097,Availability,error,error,2097,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:257,Modifiability,plugin,plugins,257,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:401,Modifiability,plugin,plugins,401,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:409,Modifiability,Flexible,Flexible,409,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:544,Modifiability,plugin,plugins,544,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:684,Modifiability,plugin,plugins,684,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:831,Modifiability,plugin,plugins,831,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:976,Modifiability,plugin,plugins,976,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1121,Modifiability,plugin,plugins,1121,"test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1167,Modifiability,Plugin,PluginManager,1167,"s_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte obje",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1189,Modifiability,plugin,plugin,1189,"s_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte obje",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1406,Modifiability,plugin,plugins,1406,"xible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1634,Modifiability,plugin,plugins,1634,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1954,Modifiability,plugin,plugins,1954,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2035,Modifiability,plugin,plugins,2035,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1182,Performance,Load,Loaded,1182,"s_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte obje",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:1858,Performance,load,load,1858,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:22,Testability,test,test,22,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:58,Testability,test,test,58,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2372,Testability,test,test,2372,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264234:9,Testability,test,test,9,One last test is failing (indice out of range) for Python_test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264234
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391635211:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391635211
https://github.com/sofa-framework/sofa/pull/656#issuecomment-391701836:12,Testability,test,tests,12,The failing tests are now fixed... ready when the compile is over ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391701836
https://github.com/sofa-framework/sofa/pull/656#issuecomment-393438275:32,Testability,test,tests,32,I restart [ci-build][with-scene-tests] to take into account the recent merge in master. ; Then merge. if ok.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-393438275
https://github.com/sofa-framework/sofa/pull/656#issuecomment-393799316:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-393799316
https://github.com/sofa-framework/sofa/pull/657#issuecomment-389438489:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/657#issuecomment-389438489
https://github.com/sofa-framework/sofa/pull/658#issuecomment-389789955:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-389789955
https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:260,Modifiability,plugin,plugin,260,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788
https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:282,Safety,timeout,timeout,282,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788
https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:371,Testability,test,tests,371,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788
https://github.com/sofa-framework/sofa/pull/658#issuecomment-391324308:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-391324308
https://github.com/sofa-framework/sofa/pull/660#issuecomment-390904023:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/660#issuecomment-390904023
https://github.com/sofa-framework/sofa/pull/661#issuecomment-400679320:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661#issuecomment-400679320
https://github.com/sofa-framework/sofa/pull/661#issuecomment-405427375:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/661#issuecomment-405427375
https://github.com/sofa-framework/sofa/pull/663#issuecomment-391615823:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663#issuecomment-391615823
https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906:55,Modifiability,plugin,plugin,55,I close this one to open a new one without the move to plugin directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906
https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975:15,Modifiability,plugin,plugin,15,We compile the plugin but can't run any CUDA simulation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975
https://github.com/sofa-framework/sofa/issues/665#issuecomment-449049972:26,Deployability,install,install,26,"Ok, so I will make a cuda install on my laptop this weekend to check some simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449049972
https://github.com/sofa-framework/sofa/pull/666#issuecomment-393530607:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666#issuecomment-393530607
https://github.com/sofa-framework/sofa/pull/666#issuecomment-394339166:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/666#issuecomment-394339166
https://github.com/sofa-framework/sofa/pull/667#issuecomment-392194242:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667#issuecomment-392194242
https://github.com/sofa-framework/sofa/pull/667#issuecomment-400966035:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667#issuecomment-400966035
https://github.com/sofa-framework/sofa/pull/667#issuecomment-401310253:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667#issuecomment-401310253
https://github.com/sofa-framework/sofa/pull/667#issuecomment-403805404:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667#issuecomment-403805404
https://github.com/sofa-framework/sofa/pull/668#issuecomment-392595444:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-392595444
https://github.com/sofa-framework/sofa/pull/668#issuecomment-400309832:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-400309832
https://github.com/sofa-framework/sofa/pull/668#issuecomment-400358810:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-400358810
https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841:154,Integrability,message,message,154,"TODO: resolve conflict then merge; Do not forget to add ""every code linking to those two modules will have to add the appropriate find_package"" to commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-405845841
https://github.com/sofa-framework/sofa/pull/668#issuecomment-406309075:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-406309075
https://github.com/sofa-framework/sofa/pull/668#issuecomment-406332254:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/668#issuecomment-406332254
https://github.com/sofa-framework/sofa/pull/669#issuecomment-392764777:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669#issuecomment-392764777
https://github.com/sofa-framework/sofa/pull/669#issuecomment-393438678:92,Testability,test,tests,92,This one is a small PR so maybe we can merge it before the 7 days ? ; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669#issuecomment-393438678
https://github.com/sofa-framework/sofa/pull/670#issuecomment-392768792:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-392768792
https://github.com/sofa-framework/sofa/pull/670#issuecomment-400955967:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-400955967
https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635:247,Deployability,release,release,247,"@hugtalbot, the change seems to break 2 scene tests. Will you have time to check if they are false negative due to the BB change?. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-670/CI_CONFIG=centos_clang-3.4,CI_PLUGINS=options,CI_TYPE=release/5/warnings3Result/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635
https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635:46,Testability,test,tests,46,"@hugtalbot, the change seems to break 2 scene tests. Will you have time to check if they are false negative due to the BB change?. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-670/CI_CONFIG=centos_clang-3.4,CI_PLUGINS=options,CI_TYPE=release/5/warnings3Result/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635
https://github.com/sofa-framework/sofa/pull/670#issuecomment-408848822:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-408848822
https://github.com/sofa-framework/sofa/pull/671#issuecomment-392797511:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671#issuecomment-392797511
https://github.com/sofa-framework/sofa/pull/671#issuecomment-398123446:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671#issuecomment-398123446
https://github.com/sofa-framework/sofa/pull/671#issuecomment-404569877:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671#issuecomment-404569877
https://github.com/sofa-framework/sofa/pull/671#issuecomment-406514582:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/671#issuecomment-406514582
https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797:15,Availability,error,error,15,type dependant error could result from a missing typename or template keyword,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797
https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797:5,Integrability,depend,dependant,5,type dependant error could result from a missing typename or template keyword,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-393540797
https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363:21,Modifiability,refactor,refactoring,21,I fixed the issue by refactoring deeply the component. But I have no idea why it appears.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363
https://github.com/sofa-framework/sofa/pull/674#issuecomment-394111325:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674#issuecomment-394111325
https://github.com/sofa-framework/sofa/pull/676#issuecomment-397613979:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676#issuecomment-397613979
https://github.com/sofa-framework/sofa/pull/676#issuecomment-399883071:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676#issuecomment-399883071
https://github.com/sofa-framework/sofa/pull/676#issuecomment-399883932:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676#issuecomment-399883932
https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436:3722,Usability,Simpl,SimpleTesselatedTetraMechanicalMapping,3722,"elocitySolver.cpp:47: .addAlias(""DampVelocity""); modules/SofaMiscSolver/NewmarkImplicitSolver.cpp:227: .addAlias(""Newmark"");; modules/SofaNonUniformFem/SparseGridMultipleTopology.cpp:41: .addAlias(""SparseGridMultiple""); modules/SofaNonUniformFem/SparseGridRamificationTopology.cpp:43: .addAlias(""SparseGridRamification""); modules/SofaOpenglVisual/OglColorMap.cpp:48: .addAlias(""ColorMap""); modules/SofaOpenglVisual/PointSplatModel.cpp:54: .addAlias(""PointSplat""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:48: .addAlias(""JacobiLinearSolver""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:49: .addAlias(""JacobiSolver""); modules/SofaPreconditioner/ShewchukPCGLinearSolver.cpp:231:.addAlias(""PCGLinearSolver"");; modules/SofaPreconditioner/SSORPreconditioner.cpp:56: .addAlias(""SSORLinearSolver""); modules/SofaPreconditioner/SSORPreconditioner.cpp:57: .addAlias(""SSORSolver""); modules/SofaTopologyMapping/Mesh2PointMechanicalMapping.cpp:60://.addAlias(""SimpleTesselatedTetraMechanicalMapping""); modules/SofaUserInteraction/RayModel.cpp:42: .addAlias(""Ray""); ```; ```; $ grep -rn '.addAlias *( *""' SofaKernel/; SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:49: .addAlias(""Capsule""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:50: .addAlias(""CapsuleModel""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:51://.addAlias(""CapsuleMesh""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:52://.addAlias(""CapsuleSet""); SofaKernel/modules/SofaBaseCollision/CubeModel.cpp:44: .addAlias(""Cube""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:48: .addAlias(""Cylinder""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:49: .addAlias(""CylinderModel""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:50://.addAlias(""CylinderMesh""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:51://.addAlias(""CylinderSet""); SofaKernel/modules/SofaBaseCollision/DefaultContactManager.cpp:41: .addAlias(""CollisionResponse""); SofaKernel/modules/SofaBaseCo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436
https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849:20,Modifiability,Refactor,Refactor,20,The issue is about 'Refactor opengl rendering code' ...the CameraController is something different :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849
https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251:191,Modifiability,evolve,evolve,191,"In that case, I fully agree with @fredroy's opinion on letting a third-party library handle the rendering code. Sofa is not a rendering tool after all, and given the pace at which frameworks evolve (and even replace each other..) I think it draws too much workload away from the actual SOFA stuff",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:524,Modifiability,plugin,plugin,524,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:536,Modifiability,plugin,plugin,536,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:234,Usability,clear,clearly,234,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626
https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524:229,Modifiability,refactor,refactor,229,"This is more or less done with:; - the isolation of the SofaOpenGlVisual (and Sofa.GL); - anything else than components of SofaOpenGlVisual now use only DrawTool (well... I am sure exceptions exist 😒). A good application of this refactor task is the RHI plugin, which provides an other implementation of DrawTool and RhiModel (instead of OglModel). . Closing for now, if anybody wants to add something, one can re-open it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524
https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524:254,Modifiability,plugin,plugin,254,"This is more or less done with:; - the isolation of the SofaOpenGlVisual (and Sofa.GL); - anything else than components of SofaOpenGlVisual now use only DrawTool (well... I am sure exceptions exist 😒). A good application of this refactor task is the RHI plugin, which provides an other implementation of DrawTool and RhiModel (instead of OglModel). . Closing for now, if anybody wants to add something, one can re-open it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524
https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972:12,Testability,test,testing,12,[ci-build] (testing future CI),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972
https://github.com/sofa-framework/sofa/issues/685#issuecomment-396589348:918,Performance,perform,performance,918,"Hey, did someone call me?. The Data overhead is significant for Objects (*incl.* Nodes) created; dynamically. Otherwise 'only' the initialization step is impacted. 2018-06-12 14:20 GMT+02:00 Damien Marchal <notifications@github.com>:. > Hi all,; >; > In our branches @defrost <https://github.com/defrost> we are adding more; > and more data field to get:; >; > - filename/line where a component has been instanciated.; > - filename/line where the component is defined.; >; > Both PSL & STLIB are using the same trick.; >; > I remember of discussion with @matthieu-nesme; > <https://github.com/matthieu-nesme> on having less data field added; > because of the overhead.; > So currently we are only adding the fields when the component are; > instanciated dynamically (from a file) and not using the initData method.; >; > Now I wonder if we could do the same in createObject()/createNode() of; > course this would have performance impact...but given how slow python is; > anyway it may be totally unnoticeable on the; > run-time.; >; > Any opinion ?; >; > DM.; > ------------------------------; >; > Suggested labels:; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/issues/685>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AHWOIYVot2pfI4QUs3VChqtEvAqCQNOLks5t77IRgaJpZM4UkUmI>; > .; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/685#issuecomment-396589348
https://github.com/sofa-framework/sofa/issues/686#issuecomment-397129076:366,Performance,load,load,366,"Dear @damienmarchal . I had a typo in my original issue, it was 17.12. I have pulled from the stable branch of the GIT repository and built from source of 17.12 on Ubuntu 14.04. I have also reproduced this issue by building 17.02 from source using Ubuntu 18.04. Although this issue is present in the ""Modeler"" binary, I find I am able to edit the vector fields if I load the .scn from the ""RunSofa"" binary. Thank you for looking at this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397129076
https://github.com/sofa-framework/sofa/issues/686#issuecomment-397497650:188,Availability,down,down,188,Dear @damienmarchal ; It turns out that I can edit vector fields in Ubuntu 18.04. The relevant difference is the QT version. In 18.04 I am using QT v 5.9.5. My 14.04 machine has been torn down but if memory serves it was the minimum QT requested by CMake (version 5.5.x I believe). Thank you.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397497650
https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653:703,Deployability,update,update,703,"Dear @michael-barrow . Normally the grayed out entries means that the corresponding data field has the ""readOnly"" flag set, so it is surprising the this behave differently in Modeller & runSofa. Maybe this is caused by some non-initialized variable somewhere in the Modeller, in runSofa or in the Data itself. . When I will have time I will give a lookt at that to be sure it is not in the Data. If it turns out to be a problem specific to the Modeller well...as the Modeller is deprecated and should be replaced by runSofa2 (code it here https://github.com/sofa-framework/SofaQtQuick) I prefer to devote more time to this one :) . Anyhow Michael, thanks again for your investigation, feel free also to update the issue if you notice similar problem. . Regards,; Damien. ; EDIT: I changed my mind, so I changed the comment :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653
https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653:240,Modifiability,variab,variable,240,"Dear @michael-barrow . Normally the grayed out entries means that the corresponding data field has the ""readOnly"" flag set, so it is surprising the this behave differently in Modeller & runSofa. Maybe this is caused by some non-initialized variable somewhere in the Modeller, in runSofa or in the Data itself. . When I will have time I will give a lookt at that to be sure it is not in the Data. If it turns out to be a problem specific to the Modeller well...as the Modeller is deprecated and should be replaced by runSofa2 (code it here https://github.com/sofa-framework/SofaQtQuick) I prefer to devote more time to this one :) . Anyhow Michael, thanks again for your investigation, feel free also to update the issue if you notice similar problem. . Regards,; Damien. ; EDIT: I changed my mind, so I changed the comment :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653
https://github.com/sofa-framework/sofa/pull/687#issuecomment-400349730:0,Availability,ping,ping,0,ping @vmagno,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/687#issuecomment-400349730
https://github.com/sofa-framework/sofa/issues/688#issuecomment-397699365:89,Availability,robust,robust,89,"In my opinion the abstraction should change or the c++ instantiation should be made more robust. As of now the Mass node appears to be a child of a Mechanical Object, but this is not reflected in the xml where they are siblings. I would suggest the abstraction should change since I imagine mathematically order matters sometimes and it would be a bad idea to guess the correct order during instantiation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/688#issuecomment-397699365
https://github.com/sofa-framework/sofa/issues/688#issuecomment-592180966:58,Integrability,depend,dependency,58,@epernod can we consider that your PR on visualizing Data dependency #1187 corresponds to this issue?; Have you noticed it @mjbarrow,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/688#issuecomment-592180966
https://github.com/sofa-framework/sofa/pull/692#issuecomment-402413477:149,Deployability,install,installed,149,"Hi @untereiner, thanks for your PR. Actually, this feature should be contained in an option because we may not want to use ccache even if we have it installed.; Could you make that change?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/692#issuecomment-402413477
https://github.com/sofa-framework/sofa/pull/693#issuecomment-398910567:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693#issuecomment-398910567
https://github.com/sofa-framework/sofa/pull/693#issuecomment-400211933:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693#issuecomment-400211933
https://github.com/sofa-framework/sofa/pull/693#issuecomment-400595001:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693#issuecomment-400595001
https://github.com/sofa-framework/sofa/pull/696#issuecomment-399018693:302,Security,certificate,certificate-of-origin-dco,302,"Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA, you hereby accept and agree to the terms and conditions detailed in the [associated DCO](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/696#issuecomment-399018693
https://github.com/sofa-framework/sofa/pull/699#issuecomment-399042102:302,Security,certificate,certificate-of-origin-dco,302,"Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA, you hereby accept and agree to the terms and conditions detailed in the [associated DCO](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/699#issuecomment-399042102
https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911:44,Testability,test,test,44,😄 ; I do not know how to proceed for you to test it. Maybe I can add test scenes to start somewhere.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911
https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911:69,Testability,test,test,69,😄 ; I do not know how to proceed for you to test it. Maybe I can add test scenes to start somewhere.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762:72,Deployability,integrat,integration,72,Hi @untereiner could you point us some examples scenes to run with your integration work ?; Cheers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762:72,Integrability,integrat,integration,72,Hi @untereiner could you point us some examples scenes to run with your integration work ?; Cheers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400257762
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:172,Modifiability,plugin,plugin,172,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:54,Testability,test,test,54,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:110,Usability,feedback,feedback,110,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:102,Modifiability,plugin,pluginizable,102,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:137,Testability,test,test,137,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:167,Testability,test,test,167,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:614,Testability,test,testing,614,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:55,Usability,feedback,feedback,55,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1166,Availability,reliab,reliable,1166," possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:131,Deployability,update,updated,131,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:918,Deployability,pipeline,pipeline,918,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1008,Deployability,pipeline,pipeline,1008,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:467,Integrability,wrap,wrapper,467,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1924,Integrability,depend,depends,1924,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:167,Testability,test,test,167,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1568,Testability,test,testing,1568,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:536,Integrability,depend,depends,536,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:874,Modifiability,plugin,plugin,874,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885:530,Modifiability,plugin,plugin,530,"After a quick look here are my notes:; - CM is for CombinatorialMap (in case you wonder :)), . - there are changes on some core mapping that seems to add only minor details as the 'useRestPosition' ; in SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.h; Could this be merged independenty using a fast path. . - could the the extlibs/NGOGN should be removed to help in readbility of the PR. - is it possible that the new topology layer (from sofa/core/topology and SofaBaseTopology) to be moved out of the core in a module/plugin CMTopology and be part of the same cmtopology namespace. . - could the new CMforcefields moved to a module/plugins CMMechanics ? . - why there is files that appears like new files but does not seems to use the cmtopology like ?:; modules/SofaMiscFem/ElementFEMForceField.cpp; modules/SofaMiscMapping/BeamMapping.h; is this a mistake or do I mis-understood something ? . DM. ; NOTE: I will edit my notes if after more reading I found some note are not relevant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885
https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885:644,Modifiability,plugin,plugins,644,"After a quick look here are my notes:; - CM is for CombinatorialMap (in case you wonder :)), . - there are changes on some core mapping that seems to add only minor details as the 'useRestPosition' ; in SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.h; Could this be merged independenty using a fast path. . - could the the extlibs/NGOGN should be removed to help in readbility of the PR. - is it possible that the new topology layer (from sofa/core/topology and SofaBaseTopology) to be moved out of the core in a module/plugin CMTopology and be part of the same cmtopology namespace. . - could the new CMforcefields moved to a module/plugins CMMechanics ? . - why there is files that appears like new files but does not seems to use the cmtopology like ?:; modules/SofaMiscFem/ElementFEMForceField.cpp; modules/SofaMiscMapping/BeamMapping.h; is this a mistake or do I mis-understood something ? . DM. ; NOTE: I will edit my notes if after more reading I found some note are not relevant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885
https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996:30,Modifiability,refactor,refactor,30,I'll try to take some time to refactor this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996
https://github.com/sofa-framework/sofa/pull/700#issuecomment-404463333:30,Deployability,update,updated,30,Here is a rebased + cleaned + updated version without CGoGN: https://github.com/sofa-framework/sofa/compare/master...guparan:cmtopology_rebased_cleaned. To be mixed with this extracted CGoGN: https://github.com/guparan/sofa_cgogn. Please tell me if it works :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404463333
https://github.com/sofa-framework/sofa/pull/700#issuecomment-404480807:776,Testability,test,test,776,"Thank you @guparan! . What I see first is:; - [ ] ~~the files modules/SofaMiscFem/HexaFEMForceField.* should be renamed with CM prefix~~; - [x] the files modules/SofaMiscMapping/BeamMapping.* should be erased (merged from another branch and unrelated to combinatorial topologies ) ; - [x] the changes to modules/SofaGeneralSimpleFem/BeamFEMForceField.* should be erased (merged from another branch, juste a wip and unrelated to combinatorial topologies); - [x] And as said by @damienmarchal, the changes related to SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.* should be extracted to another branch (unrelated to combinatorial topologies) ; - [x] the modifications in the files modules/SofaGeneralSimpleFem/TetrahedralCorotationalFEMForceField.* should be erased (test work of one of our former trainee); - [x] The file modules/SofaMiscMapping/BarycentricMappingRigid.h has modifications unrelated to combinatorial topologies should be extracted to another branch too. These modifications should decrease the number of changed files a bit more",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404480807
https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559:167,Integrability,message,messages,167,"With the help of @guparan with made a few :) changes to this branch. To summarize:; - we made all changes I listed above to remove dead or unrelated code; - since the messages were not very helpfull, all the remaining commits were squashed in a single one which is the contribution. cgogn is for now an external dependency and has to be checkouted manually in the extlib directory in order to compile the branch. We have to discuss a way to do it automatically (maybe an ExternalProject_Add ?). After a quick check, this proposal is compatible with the last commit of the cgogn devel branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559
https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559:312,Integrability,depend,dependency,312,"With the help of @guparan with made a few :) changes to this branch. To summarize:; - we made all changes I listed above to remove dead or unrelated code; - since the messages were not very helpfull, all the remaining commits were squashed in a single one which is the contribution. cgogn is for now an external dependency and has to be checkouted manually in the extlib directory in order to compile the branch. We have to discuss a way to do it automatically (maybe an ExternalProject_Add ?). After a quick check, this proposal is compatible with the last commit of the cgogn devel branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404825559
https://github.com/sofa-framework/sofa/pull/700#issuecomment-412876226:226,Testability,test,test,226,"Hi everyone. I just created a new branch (https://github.com/mimesis-inria/sofa/tree/cmtopology_module) where I put everything into a module called ""SofaCombinatorialMaps"" instead of using different existing sofa modules.; To test it, you just have to put the cgogn repository that @guparan extrated earlier into a sofa/modules/SofaCombinatorialMaps/cgogn2 directory and it should compile :crossed_fingers:.; I am able to launch examples/CMTetrahedralCorotationalFEMForceField.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-412876226
https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994:194,Availability,Error,Error,194,Well @untereiner ; the CI is not passing due to an issue of cmake version:. ```; 5.4_options_release/build/external_directories/fetched/CGoGN/CGoGN-prefix/src/CGoGN-stamp/CGoGN-configure; CMake Error at CMakeLists.txt:1 (cmake_minimum_required):; CMake 3.7.2 or higher is required. You are running version 3.5.1; ```; we will investigate this next week,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994
https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994:177,Modifiability,config,configure,177,Well @untereiner ; the CI is not passing due to an issue of cmake version:. ```; 5.4_options_release/build/external_directories/fetched/CGoGN/CGoGN-prefix/src/CGoGN-stamp/CGoGN-configure; CMake Error at CMakeLists.txt:1 (cmake_minimum_required):; CMake 3.7.2 or higher is required. You are running version 3.5.1; ```; we will investigate this next week,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994
https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615:165,Availability,failure,failure,165,"Hi @untereiner @guparan . The commit https://github.com/sofa-framework/sofa/pull/700/commits/15a74a5966296d0611e617eaa9f2af4848251f36 seems to lead to a compilation failure. When removing it, ubuntu and MacOS are compiling.; Windows crashes:; `error C2679: binary '>>': no operator found which takes a right-hand operand of type 'const sofa::core::cm_topology::TopologyChange *' (or there is no acceptable conversion)`; Centos failure was due to assimp:; `ninja: error: '/lib64/libassimp.so', needed by 'lib/libColladaSceneLoader.so', missing and no known rule to make it`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615
https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615:244,Availability,error,error,244,"Hi @untereiner @guparan . The commit https://github.com/sofa-framework/sofa/pull/700/commits/15a74a5966296d0611e617eaa9f2af4848251f36 seems to lead to a compilation failure. When removing it, ubuntu and MacOS are compiling.; Windows crashes:; `error C2679: binary '>>': no operator found which takes a right-hand operand of type 'const sofa::core::cm_topology::TopologyChange *' (or there is no acceptable conversion)`; Centos failure was due to assimp:; `ninja: error: '/lib64/libassimp.so', needed by 'lib/libColladaSceneLoader.so', missing and no known rule to make it`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615
https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615:427,Availability,failure,failure,427,"Hi @untereiner @guparan . The commit https://github.com/sofa-framework/sofa/pull/700/commits/15a74a5966296d0611e617eaa9f2af4848251f36 seems to lead to a compilation failure. When removing it, ubuntu and MacOS are compiling.; Windows crashes:; `error C2679: binary '>>': no operator found which takes a right-hand operand of type 'const sofa::core::cm_topology::TopologyChange *' (or there is no acceptable conversion)`; Centos failure was due to assimp:; `ninja: error: '/lib64/libassimp.so', needed by 'lib/libColladaSceneLoader.so', missing and no known rule to make it`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615
https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615:463,Availability,error,error,463,"Hi @untereiner @guparan . The commit https://github.com/sofa-framework/sofa/pull/700/commits/15a74a5966296d0611e617eaa9f2af4848251f36 seems to lead to a compilation failure. When removing it, ubuntu and MacOS are compiling.; Windows crashes:; `error C2679: binary '>>': no operator found which takes a right-hand operand of type 'const sofa::core::cm_topology::TopologyChange *' (or there is no acceptable conversion)`; Centos failure was due to assimp:; `ninja: error: '/lib64/libassimp.so', needed by 'lib/libColladaSceneLoader.so', missing and no known rule to make it`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-440993615
https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161:150,Modifiability,refactor,refactoring,150,"I was looking at he ""stalled"" PR,. And was wondering about this one, it contains a lot of valuable work and it seems to be connected to the cleanig & refactoring work on topologies started by @epernod. . @guparan , @epernod , @untereiner, @StephaneCotin; what are your suggestion on how to move forward and have that work ""not lost"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161
https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612:45,Modifiability,config,configure,45,"Here it is @fspadoni; and I just checked the configure script of the CI, this plugin is compiled.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612
https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612:78,Modifiability,plugin,plugin,78,"Here it is @fspadoni; and I just checked the configure script of the CI, this plugin is compiled.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612
https://github.com/sofa-framework/sofa/pull/701#issuecomment-399877149:35,Availability,error,error,35,I tried to fix the linux compiling error. ; Hope it works,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399877149
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400500548:93,Testability,test,test,93,"Hi @epernod , @fspadoni . Thanks for the PR. ; This is the kind of code I would like to have test unit for. Do you think it could be possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400500548
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400575865:84,Testability,test,test,84,"Definitively, @damienmarchal could you point out an example of component/class unit test well written. To have the best practice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400575865
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:438,Modifiability,inherit,inherit,438,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:74,Testability,test,tests,74,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:292,Testability,test,testParamString,292,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740
https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:450,Testability,test,test,450,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740
https://github.com/sofa-framework/sofa/pull/701#issuecomment-405640338:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-405640338
https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077:151,Integrability,message,message,151,"I have tried it in runSofa2 and it work like a charm and is actually a very useful warning (maybe we should add a line saying: ""to remove this warning message you need to ....""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702#issuecomment-400499077
https://github.com/sofa-framework/sofa/pull/702#issuecomment-403831446:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702#issuecomment-403831446
https://github.com/sofa-framework/sofa/pull/702#issuecomment-403904187:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/702#issuecomment-403904187
https://github.com/sofa-framework/sofa/pull/704#issuecomment-402385875:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704#issuecomment-402385875
https://github.com/sofa-framework/sofa/pull/704#issuecomment-402411560:27,Testability,test,test,27,Remark : I need to fix the test on planeForceField,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704#issuecomment-402411560
https://github.com/sofa-framework/sofa/pull/704#issuecomment-405863496:42,Testability,test,tests,42,TODO: solve conflict and build with scene tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704#issuecomment-405863496
https://github.com/sofa-framework/sofa/pull/705#issuecomment-402719907:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/705#issuecomment-402719907
https://github.com/sofa-framework/sofa/pull/706#issuecomment-402068334:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/706#issuecomment-402068334
https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833:68,Usability,feedback,feedback,68,Thanks you very much for this interesting PR. ; I hope we will have feedback on the NG direction.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833
https://github.com/sofa-framework/sofa/pull/707#issuecomment-404157640:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404157640
https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229:60,Usability,feedback,feedback,60,"Hello, . Since you made this PR @untereiner do you have any feedback on the NG proposal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229
https://github.com/sofa-framework/sofa/pull/707#issuecomment-404204226:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404204226
https://github.com/sofa-framework/sofa/pull/707#issuecomment-407729064:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-407729064
https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854:41,Availability,error,error,41,Several tests are not passing yet due to error in the code to be fixed soon.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854
https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854:8,Testability,test,tests,8,Several tests are not passing yet due to error in the code to be fixed soon.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854
https://github.com/sofa-framework/sofa/pull/708#issuecomment-403982151:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-403982151
https://github.com/sofa-framework/sofa/pull/708#issuecomment-404092536:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-404092536
https://github.com/sofa-framework/sofa/pull/708#issuecomment-405335783:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-405335783
https://github.com/sofa-framework/sofa/pull/710#issuecomment-404059232:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710#issuecomment-404059232
https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905:18,Testability,test,tests,18,[ci-build] (scene tests not needed),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905
https://github.com/sofa-framework/sofa/pull/712#issuecomment-404761337:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-404761337
https://github.com/sofa-framework/sofa/pull/712#issuecomment-405372495:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405372495
https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488:0,Usability,Guid,Guidelines,0,Guidelines: https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488
https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488:63,Usability,GUID,GUIDELINES,63,Guidelines: https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488
https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530:28,Deployability,release,release,28,Hi; i use plugin manager in release and debug mode without any problem,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530
https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530:10,Modifiability,plugin,plugin,10,Hi; i use plugin manager in release and debug mode without any problem,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530
https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637:142,Security,validat,validate,142,"Hello Hugo,. Thank for the PR. . There is currently no test at all to this component. ; It would be nice to add some before doing changes and validate the changes behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637
https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637:55,Testability,test,test,55,"Hello Hugo,. Thank for the PR. . There is currently no test at all to this component. ; It would be nice to add some before doing changes and validate the changes behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637
https://github.com/sofa-framework/sofa/pull/714#issuecomment-416599485:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714#issuecomment-416599485
https://github.com/sofa-framework/sofa/pull/715#issuecomment-405225343:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/715#issuecomment-405225343
https://github.com/sofa-framework/sofa/pull/716#issuecomment-405371082:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/716#issuecomment-405371082
https://github.com/sofa-framework/sofa/pull/718#issuecomment-405296644:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-405296644
https://github.com/sofa-framework/sofa/pull/718#issuecomment-407676341:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-407676341
https://github.com/sofa-framework/sofa/pull/718#issuecomment-409873482:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-409873482
https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181:80,Modifiability,refactor,refactoring,80,"Hello, . On that PR I recommand that some voluntary people, not involved in the refactoring, to add some additionals tests to see if their understanding match what is implementation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181
https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181:117,Testability,test,tests,117,"Hello, . On that PR I recommand that some voluntary people, not involved in the refactoring, to add some additionals tests to see if their understanding match what is implementation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181
https://github.com/sofa-framework/sofa/pull/718#issuecomment-411335581:81,Testability,test,tests,81,"I know this PR doesn't touch that file, but since we're looking at enhancing the tests for this component, I noticed that the way the FixedConstraint_test checks for the SparseLDLSolver (and in general how we should check for the presence of modules) could be improved",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411335581
https://github.com/sofa-framework/sofa/pull/719#issuecomment-405310319:22,Availability,error,error,22,"Build failed with old error already seen in build [220](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/220/console).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405310319
https://github.com/sofa-framework/sofa/pull/719#issuecomment-405310319:169,Deployability,release,release,169,"Build failed with old error already seen in build [220](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/220/console).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405310319
https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789:17,Testability,test,testing,17,[ci-build]. just testing if the problem is due to the lib. ; Will rebase if not.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789
https://github.com/sofa-framework/sofa/pull/719#issuecomment-405506066:14,Testability,test,test,14,Could someone test if the AdvancedTimer is still working correctly with the new nlohmann_json version?; @jnbrunet @fredroy @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405506066
https://github.com/sofa-framework/sofa/pull/719#issuecomment-405518396:14,Testability,test,test,14,No regression test on the advanceTimer? ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405518396
https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628:0,Energy Efficiency,green,green,0,green green green!!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628
https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628:6,Energy Efficiency,green,green,6,green green green!!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628
https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628:12,Energy Efficiency,green,green,12,green green green!!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-406546628
https://github.com/sofa-framework/sofa/pull/719#issuecomment-406718605:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-406718605
https://github.com/sofa-framework/sofa/pull/721#issuecomment-405977017:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721#issuecomment-405977017
https://github.com/sofa-framework/sofa/pull/721#issuecomment-416919577:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/721#issuecomment-416919577
https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677:201,Modifiability,variab,variable,201,"Thanks @courtecuisse for this PR :+1: . Few changes to do (from sofa-dev meeting):; - [x] Move it in QtGLViewer, this should not be in RealGUI; - [x] Add ON/OFF with command line option or environment variable",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677
https://github.com/sofa-framework/sofa/issues/723#issuecomment-418272101:220,Testability,test,tested,220,![image](https://user-images.githubusercontent.com/21199245/45017005-b105e700-b026-11e8-9257-41d8325eea42.png). you mean normally the particles outside the floor should not be there in the image but directly respawn?; I tested the scriptEvent directly inside c++ code between 2 components and this works.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/723#issuecomment-418272101
https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354:16,Usability,feedback,feedbacks,16,"Thanks for your feedbacks,; I've encountered the problem with the Fontain.scn scene in sofa python examples. I don't think there's a mechanical state controller there though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354
https://github.com/sofa-framework/sofa/pull/726#issuecomment-407365735:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726#issuecomment-407365735
https://github.com/sofa-framework/sofa/pull/727#issuecomment-407368543:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-407368543
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408447499:145,Deployability,release,release,145,"Compiling on sofa-ci-dev-macos: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-727/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/5/console; TODO (when build done): time Multithreading_test execution",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408447499
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1147,Availability,down,down,1147,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:82,Modifiability,Plugin,PluginManager,82,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:104,Modifiability,plugin,plugin,104,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:237,Modifiability,Plugin,PluginManager,237,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:259,Modifiability,plugin,plugin,259,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:398,Modifiability,Plugin,PluginManager,398,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:420,Modifiability,plugin,plugin,420,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:97,Performance,Load,Loaded,97,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:252,Performance,Load,Loaded,252,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:413,Performance,Load,Loaded,413,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:563,Testability,test,tests,563,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:576,Testability,test,test,576,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:608,Testability,test,test,608,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:649,Testability,test,tests,649,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1059,Testability,test,tests,1059,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1125,Testability,test,test,1125,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1168,Testability,test,tests,1168,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1181,Testability,test,test,1181,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:1225,Testability,test,tests,1225,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487
https://github.com/sofa-framework/sofa/pull/729#issuecomment-408408867:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729#issuecomment-408408867
https://github.com/sofa-framework/sofa/pull/729#issuecomment-409127759:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/729#issuecomment-409127759
https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896:45,Testability,test,tests,45,this has been solved.; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896
https://github.com/sofa-framework/sofa/pull/731#issuecomment-410392389:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731#issuecomment-410392389
https://github.com/sofa-framework/sofa/pull/732#issuecomment-408529441:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408529441
https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173:112,Modifiability,plugin,plugins,112,"Thanks for this PR @damienmarchal ; Just a question that may end into a debate: do we continue differentiating ""plugins"" and ""modules""? It induced only misunderstanding during STC#5.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173
https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754:88,Modifiability,plugin,plugin,88,Now fundamentally to me they are the same. Module is probably a more adequate name than plugin as it convey the idea of 'modul'arization while plug'in' convey they idea of internal/external. Having a consortium supported Module compared to an external one doesn't change the nature (it is still a module). But honestly I don't really care...what really matter to me is to make more and more of them :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754
https://github.com/sofa-framework/sofa/pull/732#issuecomment-409131441:12,Modifiability,plugin,plugins,12,so external plugins are introducing new modules into Sofa? 🦄,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-409131441
https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:34,Deployability,configurat,configuration,34,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860
https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:60,Deployability,update,updated,60,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860
https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:34,Modifiability,config,configuration,34,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860
https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:138,Testability,test,test,138,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860
https://github.com/sofa-framework/sofa/pull/733#issuecomment-408529283:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/733#issuecomment-408529283
https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889:8,Integrability,depend,depends,8,This PR depends on https://github.com/sofa-framework/sofa/pull/734 and https://github.com/sofa-framework/sofa/pull/732,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-408805889
https://github.com/sofa-framework/sofa/pull/735#issuecomment-417320209:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-417320209
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:331,Integrability,interface,interface,331,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:175,Modifiability,plugin,plugin,175,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:323,Modifiability,plugin,plugin,323,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:452,Modifiability,plugin,plugins,452,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:477,Modifiability,config,config,477,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:498,Modifiability,plugin,plugins,498,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:695,Modifiability,plugin,plugins,695,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:821,Modifiability,plugin,plugins,821,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:167,Performance,load,loading,167,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:509,Performance,load,load,509,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:593,Usability,simpl,simple,593,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:33,Integrability,depend,depends,33,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:280,Integrability,interface,interface,280,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:273,Modifiability,plugin,plugin,273,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:148,Performance,load,load,148,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:209,Performance,load,loading,209,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:255,Performance,load,load,255,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064
https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763:27,Modifiability,plugin,plugin,27,The PR is deprecated since plugin.SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763
https://github.com/sofa-framework/sofa/pull/736#issuecomment-410622869:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/736#issuecomment-410622869
https://github.com/sofa-framework/sofa/pull/737#issuecomment-408909331:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/737#issuecomment-408909331
https://github.com/sofa-framework/sofa/pull/738#issuecomment-420784362:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/738#issuecomment-420784362
https://github.com/sofa-framework/sofa/pull/739#issuecomment-409873641:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739#issuecomment-409873641
https://github.com/sofa-framework/sofa/pull/739#issuecomment-410196119:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/739#issuecomment-410196119
https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505:136,Integrability,message,message,136,"Hi Bruno,. Thanks a lot for this PR that is really needed and made in a nice way. I will have a look if it complex to add a deprecation message in the binding so that when the user is using the ""old"" convention something is printed and replacement string is suggested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409846505
https://github.com/sofa-framework/sofa/pull/740#issuecomment-409890732:218,Deployability,update,update,218,@jnbrunet a list of accepted types would be cool indeed. Maybe by adding a method+binding in the factory class that returns a list of all its keys in its registry? Though maybe more appropriate in a separate PR.; I'll update the doc accordingly though!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740#issuecomment-409890732
https://github.com/sofa-framework/sofa/pull/740#issuecomment-414964145:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/740#issuecomment-414964145
https://github.com/sofa-framework/sofa/pull/741#issuecomment-416870473:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/741#issuecomment-416870473
https://github.com/sofa-framework/sofa/pull/742#issuecomment-409853302:1974,Availability,error,error,1974," just need to parse the link's value, follow the path to the linked component's datafield, check its type and that's it), it is a bit trickier when it comes to outputs:; - During the creation of a PSDE's output field, we don't know yet what it's gonna be linked against, so deriving the type is not possible. We have to wait for the creation of the component that will take the PSDE's output as a link to derive it. This means that the steps to derive an output's datatype are the following:. - in Python, in the `parse()` method, call addNewOuput, and give it a datafield name, but no type and an input value field `addNewInput(""MyName"", value="""")`; - in C++, a new datafield is created, but its datatype is void*. To know that this field has been created from a PSDE output, and is not yet properly connected, an alias is added on the data `addAlias(""psde_output"");`; - The next component is created in the scene, a c++ component this time, that knows the type of its inputs. ; - In its parse method, the link is found to the PSDE's output, but its type is incompatible (void* vs vector<Vec3d> for instance). ; - We check if the linked datafield has an alias ""psde_output"" and if so, remove that datafield and recreate it with the same field name, but this time the good datatype; - We set the newly created field as the parent of the parsed datafield in the component. Done. . To do so it was necessary to:; - Make creation of Data possible through a `getNewInstance()` method in Base; - Make BaseData removable from Sofa components in Base `removeData(BaseData*)`; - add in Binding_Base a method called from `addNewIO()` to find a data's type from its value when a link is provided (`deriveTypeFromParentValue()`) ; - Modify Base::parseField() to handle connecting to a parent value that has incompatible type when necessary; - Modify quite a bit the error handling process in addNewData() and parse() (which I hope to have done properly). These explanations should help in understanding the code",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/742#issuecomment-409853302
https://github.com/sofa-framework/sofa/pull/742#issuecomment-414963730:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/742#issuecomment-414963730
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:601,Availability,error,error,601,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:718,Availability,redundant,redundant,718,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:1625,Availability,error,error,1625,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:659,Performance,perform,performed,659,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:718,Safety,redund,redundant,718,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:1313,Safety,avoid,avoid,1313,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:482,Usability,simpl,simple,482,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:253,Availability,fail-safe,fail-safe,253,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:1462,Availability,redundant,redundant,1462,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:258,Safety,safe,safe,258,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:1462,Safety,redund,redundant,1462,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:234,Usability,clear,clear,234,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420
https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790:190,Usability,intuit,intuitiveness,190,"@marques-bruno you're right! You had already mentioned that this would improve the reusability of PSDE-Python-Code written by the user. In that case I am in favor of this feature. About the intuitiveness: do you (and the others) think it would make sense to have an additional argument in createObject() that explicitly has to be set to use this feature of ""inline"" PSDE I/O creation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790
https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093:729,Usability,clear,clear,729,"> It would be FALSE by default and wouldn't need to be specified if ""inline"" I/O-creation is not used. Actually, I didn't think of it immediately when you said it, but this is already what the current implementation does (kind of, the implementation is different but the concept is the same):. if the decorator `@sp.ParseInputs` is not set on the parse method, the passing of arguments through the createObject() is disabled, and the input argument will be ignored.; setting @sp.ParseInputs is kind of the equivalent to a boolean flag in the class allowing ""inline"" definitions. The only difference is that it's made at the declaration step and not during the instantiation of the class. the name (ParseInputs) is maybe not very clear. it could be called differently. ""fwd_inline_args"" or ""allow_inlines""..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1620,Availability,error,error-prone,1620,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:471,Deployability,update,update,471,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:795,Performance,load,loader,795,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:849,Performance,load,loader,849,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:932,Performance,load,loader,932,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1045,Performance,load,loader,1045,"discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my o",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1207,Performance,load,loader,1207," def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1769,Performance,perform,performed,1769,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1940,Performance,perform,performed,1940,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:2148,Performance,load,loader,2148,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:336,Testability,test,test,336,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1522,Usability,simpl,simple,1522,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442
https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069:16,Modifiability,Inherit,Inheriting,16,"@marques-bruno: Inheriting from the PythonScriptDataEngine seems to be a good solution! I didn't really know this was possible, but like you describe, covers most of the intended use-case. I'll keep it in mind in case I might need it myself. Ohh, and maybe it makes for a good example for a more advanced usage of the PSDE that could be added to the codebase?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069
https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436:535,Integrability,message,message,535,"Hi Erik,. Thanks for reporting this bug. . I looked into BaseContext and found the following:; ```cpp; core::topology::Topology* BaseContext::getTopology() const; core::topology::BaseMeshTopology* BaseContext::getMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getLocalMeshTopology() const; core::topology::BaseMeshTopology* BaseContext::getActiveMeshTopology() const; ```; All of them only returns the ""first"" topology found which can cause a lot of trouble to users. . I think your suggestion to provide warning message using the scene checker is a good idea unless there is good reasons for ppl to have multiple topologies in the same node (I don't know if this is the case). I can give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-410395436
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:886,Safety,detect,detect,886,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:26,Usability,feedback,feedback,26,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:1216,Usability,feedback,feedback,1216,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930
https://github.com/sofa-framework/sofa/pull/745#issuecomment-415687884:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745#issuecomment-415687884
https://github.com/sofa-framework/sofa/pull/745#issuecomment-418346257:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745#issuecomment-418346257
https://github.com/sofa-framework/sofa/pull/745#issuecomment-418725507:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745#issuecomment-418725507
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:63,Availability,fault,fault,63,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:141,Availability,fault,fault,141,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:1279,Availability,fault,fault,1279,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:966,Deployability,Pipeline,PipelineImpl,966,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:590,Safety,Detect,DetectionOutputVector,590,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:310,Testability,test,testValidity,310,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329
https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285:12,Availability,Error,Error,12,"Is there an Error message when loading the scene, telling that the mesh could not be found?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285
https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285:18,Integrability,message,message,18,"Is there an Error message when loading the scene, telling that the mesh could not be found?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285
https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285:31,Performance,load,loading,31,"Is there an Error message when loading the scene, telling that the mesh could not be found?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-445826285
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:25,Availability,error,error,25,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:1384,Deployability,update,updateBBox,1384,"ting node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3,double>,sofa::defaulttype::Vec<3,double>,double> >::draw - 0x7ffbe600fe3045:; sofa::simulation::DefaultVisualManagerLoop::HeaderFileLocation - 0x7ffbf7d3d18044:; sofa::simulation::VisualDrawVisitor::processNodeTopDown - 0x7ffbf7d76ea043:; sofa::simulation::graph::DAGNode::executeVisitorTreeTraversal - 0x7ffc1c3199c042:; sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5686,Integrability,Message,MessageDispatcher,5686,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5757,Integrability,Message,MessageDispatcher,5757,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:47,Performance,load,load,47,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:105,Performance,load,loading,105,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:160,Performance,load,loader,160,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5442,Safety,abort,abort,5442,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5606,Safety,abort,abort,5606,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:352,Security,Validat,Validating,352,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:640,Security,validat,validating,640,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5453,Testability,assert,assert,5453,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5677,Testability,log,logging,5677,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5748,Testability,log,logging,5748,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5776,Testability,Log,LoggerStream,5776,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:5791,Testability,Log,LoggerStream,5791,,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:216,Integrability,depend,dependency,216,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:134,Modifiability,inherit,inheriting,134,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:567,Security,expose,expose,567,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:1321,Security,expose,exposed,1321,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:384,Testability,test,test,384,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:820,Usability,usab,usable,820,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:1394,Usability,clear,clear,1394,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498
https://github.com/sofa-framework/sofa/pull/747#issuecomment-536999650:27,Modifiability,plugin,plugin,27,The PR is deprecated since plugin.SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-536999650
https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368:76,Usability,feedback,feedback,76,"Hi @ChristianDuriez, @fjourdes, @EulalieCoevoet, . It would be nice to have feedback on this possible issue because this is related to your PR. If it is not an issue we can close it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:191,Deployability,update,updated,191,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:39,Usability,simpl,simple,39,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:266,Usability,UX,UX,266,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007
https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350:47,Usability,UX,UX,47,"My bad for the video...it is now public. About UX, I'm not sure there exists something like ""the best way"" to do something :) ; So I can only answer that sliding left/right is a very common and appreciated way in software like Blender or Unity3D.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350
https://github.com/sofa-framework/sofa/pull/750#issuecomment-448606215:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-448606215
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:140,Deployability,update,update-on-demand,140,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:501,Deployability,update,update-on-demand,501,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:471,Modifiability,maintainab,maintainability,471,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:672,Modifiability,Refactor,Refactor,672,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:409,Usability,simpl,simplicity,409,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:753,Usability,Simpl,Simplify,753,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:254,Availability,redundant,redundant,254,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:215,Deployability,update,update,215,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:291,Deployability,update,update,291,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:733,Deployability,update,update,733,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1091,Deployability,Update,Update,1091,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:661,Performance,perform,performed,661,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:254,Safety,redund,redundant,254,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:947,Safety,avoid,avoid,947,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:415,Security,access,accessed,415,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1070,Usability,simpl,simplifying,1070,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1136,Usability,simpl,simplifying,1136,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1229,Usability,feedback,feedback,1229,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:281,Deployability,update,update,281,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:331,Deployability,update,update,331,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:351,Deployability,update,updateIfDirty,351,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:246,Usability,clear,clear,246,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:859,Availability,redundant,redundant,859,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:308,Deployability,update,updates,308,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:350,Deployability,update,update,350,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:411,Deployability,update,update,411,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:820,Deployability,update,update,820,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:922,Deployability,update,update,922,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:464,Integrability,depend,dependency,464,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:583,Performance,perform,performance,583,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:859,Safety,redund,redundant,859,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:85,Testability,test,testDataEngine,85,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:107,Testability,test,test,107,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:200,Testability,test,testing,200,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372
https://github.com/sofa-framework/sofa/pull/751#issuecomment-428475069:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-428475069
https://github.com/sofa-framework/sofa/pull/753#issuecomment-414299480:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/753#issuecomment-414299480
https://github.com/sofa-framework/sofa/pull/754#issuecomment-415337674:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-415337674
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180:529,Modifiability,inherit,inherited,529,"Thanks guys for the reviews. Indeed, as @damienmarchal said, I wanted in this PR to remove the need to call parent init() in all BaseObject derived classes. This is more a proposal than a confident solution. . > data fields are conditionally needed when a third one is set to true/false (@damienmarchal). I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. The other data fields should be part of another Component linked to the first one or in an inherited Component. Unfortunately I guess this mechanism is already in a lot of Components... @epernod I understand and agree with your concern that each object should check it's own Datas but I'm not sure it's compatible with the idea of removing the need to call parent init(). I think we have to choose:; 1. removing the need to call parent init() but doing the check outside of the object with a Visitor; 2. doing the check inside the object but keeping the need to call parent init(). I'm open to any proposal combining the pros of 1 and 2.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1389,Availability,error,error,1389,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:694,Integrability,interface,interfaces,694,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:997,Integrability,interface,interface,997,"nti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seem",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1395,Integrability,message,message,1395,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:398,Security,validat,validation,398,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1374,Security,validat,validation,1374,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:166,Testability,log,logic,166,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185:1026,Energy Efficiency,charge,charge,1026,"I'm sorry, I missed part of the conversation on this topic during the sofa-dev meeting. Here's my suggestion:. What if we would set a `Check()` method (and maybe also a `Parse(), Init(), fwdInit(), bwdInit()` and all other method that kind of expect a ""call super"" code smell to work...) in `SOFA_ABSTRACT_CLASS_DECL`, similar to this:. ```cpp; #define SOFA_ABSTRACT_CLASS_DECL \; [...]; void doCheck() { this->check(); static_cast<Inherit1*>(this)->doCheck(); }	\; virtual void Check() { this->doCheck(); }; ```; ; `Check()` would be a virtual method, so that when called from a casted `BaseObject` ptr or from a visitor, the child's method would be called.; `check()` and `doCheck()` on the other hand would not be virtual, so that when called from `this` casted as `Parent*`, the method of the current pointer cast would be called, thus triggering the recursion when static_casting the pointer. . It's the same as the ""call super"" pattern, with the exception that it is this time bug-free, because the API's user is not in charge of calling manually the parent's method. A small example here if you want to test the concept:. ```cpp; #include <iostream>. #define SOFA_BASE_CLASS(T) \; virtual void Init() {} \; void doInit() { this->init(); }. #define SOFA_CLASS(T, Parent) \; typedef Parent Inherit1; \; void doInit() { this->init(); static_cast<Inherit1*>(this)->doInit(); }	\; virtual void Init() { this->doInit(); }; . struct BaseObject; {; SOFA_BASE_CLASS(BaseObject); void init() { std::cout << ""BaseObejct::init()"" << std::endl; }; };. struct A : public BaseObject; {; SOFA_CLASS(A, BaseObject); void init() { std::cout << ""A::init()"" << std::endl; }; };. struct B : public A; {; SOFA_CLASS(B, A); void init() { std::cout << ""B::init()"" << std::endl; }; };. main(); {; BaseObject* b = new B();; b->Init();; }; ```. The imact in terms of implementation would be a bit huge though.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185:1110,Testability,test,test,1110,"I'm sorry, I missed part of the conversation on this topic during the sofa-dev meeting. Here's my suggestion:. What if we would set a `Check()` method (and maybe also a `Parse(), Init(), fwdInit(), bwdInit()` and all other method that kind of expect a ""call super"" code smell to work...) in `SOFA_ABSTRACT_CLASS_DECL`, similar to this:. ```cpp; #define SOFA_ABSTRACT_CLASS_DECL \; [...]; void doCheck() { this->check(); static_cast<Inherit1*>(this)->doCheck(); }	\; virtual void Check() { this->doCheck(); }; ```; ; `Check()` would be a virtual method, so that when called from a casted `BaseObject` ptr or from a visitor, the child's method would be called.; `check()` and `doCheck()` on the other hand would not be virtual, so that when called from `this` casted as `Parent*`, the method of the current pointer cast would be called, thus triggering the recursion when static_casting the pointer. . It's the same as the ""call super"" pattern, with the exception that it is this time bug-free, because the API's user is not in charge of calling manually the parent's method. A small example here if you want to test the concept:. ```cpp; #include <iostream>. #define SOFA_BASE_CLASS(T) \; virtual void Init() {} \; void doInit() { this->init(); }. #define SOFA_CLASS(T, Parent) \; typedef Parent Inherit1; \; void doInit() { this->init(); static_cast<Inherit1*>(this)->doInit(); }	\; virtual void Init() { this->doInit(); }; . struct BaseObject; {; SOFA_BASE_CLASS(BaseObject); void init() { std::cout << ""BaseObejct::init()"" << std::endl; }; };. struct A : public BaseObject; {; SOFA_CLASS(A, BaseObject); void init() { std::cout << ""A::init()"" << std::endl; }; };. struct B : public A; {; SOFA_CLASS(B, A); void init() { std::cout << ""B::init()"" << std::endl; }; };. main(); {; BaseObject* b = new B();; b->Init();; }; ```. The imact in terms of implementation would be a bit huge though.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613:92,Energy Efficiency,energy,energy,92,"As Guillaume open the sofa refactoring pandora box by submitting this PR and we are full of energy after holiday here is a bit unrelated question... . Do we seriously needs bwdInit ? . I looked into the code base and ; init() => 1057 matches; reinit() => 388 matches; bwdInit() => 60 matches. on the 60 match, half of that is for .h, in the 30 remaining... lot of other seems 'weird'. So, should keep this mechanism ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613
https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613:27,Modifiability,refactor,refactoring,27,"As Guillaume open the sofa refactoring pandora box by submitting this PR and we are full of energy after holiday here is a bit unrelated question... . Do we seriously needs bwdInit ? . I looked into the code base and ; init() => 1057 matches; reinit() => 388 matches; bwdInit() => 60 matches. on the 60 match, half of that is for .h, in the 30 remaining... lot of other seems 'weird'. So, should keep this mechanism ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613
https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521:434,Integrability,rout,routine,434,"I personally never used neither fwdInit() nor bwdInit() and with implementations such as; ```cpp; // CollisionModel.h; virtual void bwdInit() override; {; getColor4f(); //init the color to default value; }; ```; I'd say it's most likely optional in most cases :); Plus it makes it much less likely to get a clean init when creating a component on the fly, except if you do the traditional and cumbersome init() / reinit() / bwdInit() routine...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-417004521
https://github.com/sofa-framework/sofa/pull/755#issuecomment-416491215:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/755#issuecomment-416491215
https://github.com/sofa-framework/sofa/pull/755#issuecomment-416647238:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/755#issuecomment-416647238
https://github.com/sofa-framework/sofa/pull/756#issuecomment-416259697:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-416259697
https://github.com/sofa-framework/sofa/pull/756#issuecomment-442199345:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442199345
https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931:27,Testability,test,tests,27,[ci-build][with-regression-tests] :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931
https://github.com/sofa-framework/sofa/pull/756#issuecomment-447029471:23,Testability,test,tests,23,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447029471
https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966
https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966
https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245:105,Deployability,update,update,105,Waiting for CI but I think it's better now:; used enable_if<is_base_of> to compile or not the doUpdate / update methods in the test. should be clean enough,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245
https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245:127,Testability,test,test,127,Waiting for CI but I think it's better now:; used enable_if<is_base_of> to compile or not the doUpdate / update methods in the test. should be clean enough,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424019836:64,Testability,test,tests,64,CI was missing disk space. I relaunch ;); [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424019836
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:194,Performance,perform,performed,194,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:415,Performance,perform,performed,415,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:37,Testability,test,test,37,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:57,Testability,test,test,57,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:637,Testability,assert,assert,637,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:123,Usability,Simpl,SimpleDataEngine,123,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:47,Deployability,update,update,47,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:96,Deployability,update,update,96,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:115,Deployability,update,updateAllInputs,115,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:157,Deployability,update,updateIfDirty,157,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:28,Usability,Simpl,SimpleDataEngine,28,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:741,Usability,Simpl,SimpleDataEngine,741,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403
https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686:27,Deployability,update,update,27,"What about ?; ```cpp; void update() final; {; updateAllInputs(); // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; cleanAllInputsDirty(); // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; cleanAllInputsCounter() // cleaning the counters; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686
https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686:46,Deployability,update,updateAllInputs,46,"What about ?; ```cpp; void update() final; {; updateAllInputs(); // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; cleanAllInputsDirty(); // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; cleanAllInputsCounter() // cleaning the counters; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686
https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686:89,Deployability,update,updateIfDirty,89,"What about ?; ```cpp; void update() final; {; updateAllInputs(); // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; cleanAllInputsDirty(); // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; cleanAllInputsCounter() // cleaning the counters; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-428487686
https://github.com/sofa-framework/sofa/pull/765#issuecomment-418651527:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/765#issuecomment-418651527
https://github.com/sofa-framework/sofa/pull/766#issuecomment-419160373:46,Deployability,install,installation,46,Just had a look and it seems not messing with installation nor packaging :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/766#issuecomment-419160373
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419006953:57,Availability,avail,available,57,@damienmarchal thanks for sharing!; Are your API changes available somewhere in the sofa repository?; I really don't know much about python (almost never used it outside of Sofa...) so I'm a bit puzzled with the syntax here: `m.position[OnDiagonal] = 1.0` / `m.position.apply(function)`; But I sure love the idea of returning an actual Sofa.Data pointer instead of a copied list!; This was all done using python's C-api or did you sneak in some cython? =),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419006953
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1699,Deployability,integrat,integration,1699,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:217,Integrability,rout,routines,217,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1677,Integrability,protocol,protocol,1677,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1699,Integrability,integrat,integration,1699,"ration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_sub",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1052,Security,expose,exposed,1052,"e:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1105,Security,expose,exposed,1105,"e:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:963,Usability,simpl,simple,963,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:3178,Usability,clear,clearly,3178,"ld be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_subscript(o,key,value):; if isinstance(key, slice):; start, stop, step = key.start, key.stop, key.step; for i in xrange(start,stop):; Data_helper(o, i, value); return True; elif callable(key):; g = key(o) ; for i in g:; Data_helper(o, i, value); return True; elif isinstance(key, tuple):; if isinstance(key[0], slice) and isinstance(key[1], slice):; igen = sliceToRange(key[0], o.shape[0]); jgen = sliceToRange(key[1], o.shape[1]); for i in igen:; for j in jgen:; Data_helper(o,(i,j),value) ; return True ; return False; ```. Mixing code to implement a single function is clearly not the way to go. But i found that implementing complete complex function using the C-python api in cython is way more easier than writing them in C.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819
https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166:73,Modifiability,refactor,refactoring,73,I'm closing this issue because this is now handlede into the sofapython3 refactoring.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:93,Availability,error,error,93,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:99,Integrability,message,message,99,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:114,Usability,clear,clear,114,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059
https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304:55,Availability,error,error,55,"you can let it open, we will close this issue when the error message will be added. (very soon)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304
https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304:61,Integrability,message,message,61,"you can let it open, we will close this issue when the error message will be added. (very soon)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-421054304
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705:130,Modifiability,plugin,plugin,130,"@fspadoni i am using this feature for multithreading a RealSense RGB-D camera, through a RealSense grabber component in the image plugin (for which i will prepare another PR :-)), with other components in another plugin for non-rigid tracking goals. And it works well!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705:213,Modifiability,plugin,plugin,213,"@fspadoni i am using this feature for multithreading a RealSense RGB-D camera, through a RealSense grabber component in the image plugin (for which i will prepare another PR :-)), with other components in another plugin for non-rigid tracking goals. And it works well!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923:122,Modifiability,plugin,plugin,122,"@agpetit @fspadoni after discussion, we are wondering whether the declaration type should rather be done within the image plugin instead of the multithreading plugin ? what's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923:159,Modifiability,plugin,plugin,159,"@agpetit @fspadoni after discussion, we are wondering whether the declaration type should rather be done within the image plugin instead of the multithreading plugin ? what's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279:111,Modifiability,plugin,plugin,111,"@hugtalbot , I think it's not possible to move the declaration of the new DataExchange type class in the Image plugin.; The DataExchange component is a template class and it can't be used across the dynamic libraries but it must be instantiate and exported in the library where they are defined for every data type.; For instance in the image plugin the DataExchange template class can't be used to defined the class DataExchange< ImageUC > because the DataExchange template class is defined in another dynamic library. That should be allow only across static libraries.; correct me if I am wrong.; I didn't realize that this morning when we talked about it at the SOFA meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279
https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279:343,Modifiability,plugin,plugin,343,"@hugtalbot , I think it's not possible to move the declaration of the new DataExchange type class in the Image plugin.; The DataExchange component is a template class and it can't be used across the dynamic libraries but it must be instantiate and exported in the library where they are defined for every data type.; For instance in the image plugin the DataExchange template class can't be used to defined the class DataExchange< ImageUC > because the DataExchange template class is defined in another dynamic library. That should be allow only across static libraries.; correct me if I am wrong.; I didn't realize that this morning when we talked about it at the SOFA meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279
https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552:15,Integrability,depend,dependency,15,"To inverse the dependency the registering should be moved into image.cpp; ```cpp; #ifdef SOFA_WITH_MULTITHREADING. int DataExchangeClass = core::RegisterObject(""DataExchange""); .add< DataExchange< sofa::defaulttype::ImageUC> >(); .add< DataExchange< sofa::defaulttype::ImageUS> >(); .add< DataExchange< sofa::defaulttype::ImageF> >();. #endif // SOFA_WITH_MULTITHREADING; ```. About the @fspadoni's answer I think that template can be instantiated as long as the template definition is #included (the .inl or the .h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-422710552
https://github.com/sofa-framework/sofa/pull/771#issuecomment-426624335:237,Testability,test,test,237,"Hi all,. I'm hesitating between the following two design:. ```__getattr__``` returns a DataContainer object implementing lot of operations allowing:; ```python; root = Sofa.Node(""root""); obj = root.createObject(""MechanicalObject"", name=""test"", position=aList). np = numpy.zeros((100,3)). p.position = [[1.0,2.0,3.0]]; p.position = np; p.position += [1.0,2.0,3.0]; p.position += np; p.position += Vec3d((0.,0.0,0.0)). ## To get a numpy array view out the DataContainer it is needed to request it like that:; with p.position.array() as wa: ; wa += np ; wa *= np; # Other numpy.array operation; ```; This syntax guarantee that the beginEditPtr/endEditPtr is correctly called when the data are written. The drawback is that I have to re+implement a lot of operation on the DataContainer object (add,mul, iadd, imul, etc..etc...)which is annoying. The other approach is much lighter in term of code as it is directly a numpy.array out of the ```__getattr__``` function. This allows to do; ```python; np = numpy.zeros((100,3)). p.position = [[1.0,2.0,3.0]]; p.position = np; p.position += [1.0,2.0,3.0]; p.position += np; p.position += Vec3d((0.,0.0,0.0)). ## To get have correct management of begin/end... you should do like that:; with p.WriteAccessor(""position"") as wa:; wa += np ; # Other numpy.array operation; ```; The problem with this version is that doing:; ```; d = p.position; d += np; ```; Will change the data through numpy code without incrementing the data counter which violates the expected semantic of the DataEngine mechanismes. I have tried different solution in the last two days but cannot find one. . So any comment and help is welcomed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-426624335
https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943:352,Testability,Test,Test,352,"I have added a bunch of new functions and a draft on how to implement force field in python. . It taste like that:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs). def addForce(self, m, f, x, v):; n = numpy.ones((1000,1)); f = x * 2 + n; ; class Test(unittest.TestCase):; def test_animation(self):; node = Sofa.Node(""root""); node.addObject(""DefaultAnimationLoop"", name=""loop""); node.addObject(""EulerImplicit""); node.addObject(""CGLinearSolver""); object1 = node.addChild(""object1""); c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000); d = object1.addObject(MyForceField(""customFF"")). SingleSimulation.init(node); for i in range(10):; SingleSimulation.animate(node, 0.01); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943
https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943:366,Testability,Test,TestCase,366,"I have added a bunch of new functions and a draft on how to implement force field in python. . It taste like that:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs). def addForce(self, m, f, x, v):; n = numpy.ones((1000,1)); f = x * 2 + n; ; class Test(unittest.TestCase):; def test_animation(self):; node = Sofa.Node(""root""); node.addObject(""DefaultAnimationLoop"", name=""loop""); node.addObject(""EulerImplicit""); node.addObject(""CGLinearSolver""); object1 = node.addChild(""object1""); c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000); d = object1.addObject(MyForceField(""customFF"")). SingleSimulation.init(node); for i in range(10):; SingleSimulation.animate(node, 0.01); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943
https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449:39,Modifiability,plugin,plugin,39,"Hi all, . I close this PR because this plugin is now here: https://github.com/SofaDefrost/plugin.SofaPython3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449
https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449:90,Modifiability,plugin,plugin,90,"Hi all, . I close this PR because this plugin is now here: https://github.com/SofaDefrost/plugin.SofaPython3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449
https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768:40,Usability,clear,clearing,40,"Olivier's point me that in his code the clearing of the links is really ""perfectible"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768
https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617:42,Usability,clear,clearing,42,"> Olivier's point me that in his code the clearing of the links is really ""perfectible"". It was improved with the last commit, thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617
https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626:107,Usability,clear,clear,107,"Hi @olivier-goury ; The info is in the sofa-dev meeting report but has not been copied here.; --> wip, use clear() instead of removeAt(0) on l_forceField link. @guparan will work on it, no worries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626
https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993:112,Usability,clear,clear,112,"> Hi @olivier-goury; > The info is in the sofa-dev meeting report but has not been copied here.; > --> wip, use clear() instead of removeAt(0) on l_forceField link; > ; > @guparan will work on it, no worries. Ok thanks for the info!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993
https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565:21,Usability,clear,clear,21,Actually there is no clear() method for Links.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565
https://github.com/sofa-framework/sofa/pull/773#issuecomment-422561179:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/773#issuecomment-422561179
https://github.com/sofa-framework/sofa/pull/775#issuecomment-421270150:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775#issuecomment-421270150
https://github.com/sofa-framework/sofa/pull/775#issuecomment-421270443:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775#issuecomment-421270443
https://github.com/sofa-framework/sofa/pull/775#issuecomment-421419883:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775#issuecomment-421419883
https://github.com/sofa-framework/sofa/pull/775#issuecomment-422055771:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775#issuecomment-422055771
https://github.com/sofa-framework/sofa/pull/775#issuecomment-425947598:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775#issuecomment-425947598
https://github.com/sofa-framework/sofa/pull/776#issuecomment-425899875:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/776#issuecomment-425899875
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:40,Testability,test,test,40,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:96,Testability,test,tests,96,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:33,Usability,simpl,simple,33,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644
https://github.com/sofa-framework/sofa/pull/779#issuecomment-423261470:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/779#issuecomment-423261470
https://github.com/sofa-framework/sofa/pull/780#issuecomment-428888825:105,Testability,test,tests,105,"Sure, feel free to do it if you reviewed the latest changes.; Let's not forget the [ci-build][with-scene-tests] though :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/780#issuecomment-428888825
https://github.com/sofa-framework/sofa/pull/780#issuecomment-438590864:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/780#issuecomment-438590864
https://github.com/sofa-framework/sofa/pull/782#issuecomment-424250648:70,Availability,error,error,70,```; modules/SofaMiscFem/TriangularAnisotropicFEMForceField.inl:97:5: error: ‘_topology’ was not declared in this scope; _topology = this->getContext()->getMeshTopology();; ^; ```; Why? :confused:. EDIT: fixed by https://github.com/sofa-framework/sofa/pull/782/commits/b3117ad2cec31a1fcd78ee5c838f78703440dc5d but my question remains... EDIT 2: Tried to build without ccache but result was the same. EDIT 3: answer: https://github.com/SofaDefrost/SoftRobots/blob/master/component/constraint/CableConstraint.h#L141-L152 (thanks @damienmarchal),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/782#issuecomment-424250648
https://github.com/sofa-framework/sofa/pull/782#issuecomment-426171062:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/782#issuecomment-426171062
https://github.com/sofa-framework/sofa/issues/784#issuecomment-424640459:40,Security,hash,hashing,40,I personally really like to use spatial hashing for this kind of things. ; http://matthias-mueller-fischer.ch/publications/tetraederCollision.pdf,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/784#issuecomment-424640459
https://github.com/sofa-framework/sofa/pull/786#issuecomment-425412176:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/786#issuecomment-425412176
https://github.com/sofa-framework/sofa/pull/787#issuecomment-425415370:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/787#issuecomment-425415370
https://github.com/sofa-framework/sofa/pull/788#issuecomment-425420188:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/788#issuecomment-425420188
https://github.com/sofa-framework/sofa/pull/788#issuecomment-449345065:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/788#issuecomment-449345065
https://github.com/sofa-framework/sofa/pull/788#issuecomment-450626642:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/788#issuecomment-450626642
https://github.com/sofa-framework/sofa/pull/789#issuecomment-426261348:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/789#issuecomment-426261348
https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:587,Availability,robust,robust,587,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273
https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:992,Availability,error,error,992,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273
https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:1058,Availability,error,error,1058,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273
https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:1003,Integrability,message,message,1003,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273
https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273:1064,Integrability,message,messages,1064,"Hello, ; so after a quick look at the class the fix to do is not in MechanicalObject but probably in Quater.inl, when the quaternion is converted from string to quaternion:; ```cpp; /// write to an output stream; inline friend std::ostream& operator << ( std::ostream& out, const Quater& v ); {; out<<v._q[0]<<"" ""<<v._q[1]<<"" ""<<v._q[2]<<"" ""<<v._q[3];; return out;; }; /// read from an input stream; inline friend std::istream& operator >> ( std::istream& in, Quater& v ); {; in>>v._q[0]>>v._q[1]>>v._q[2]>>v._q[3];; return in;; }; ```; This is sloppy code that should be made much more robust regarding the input. Instead of reading directly the value, they should be buffered in double, then passed to a function like; this->setFromRawValue(); ; The checking code and normalization should be in this function. Doing that in Quater.inl has the advantage that all quaternion read from string will always be checked and valided. . The drawback (but this is a general drawback in how we handle error with message instead of using exception is how do we report error messages so that user can fix their scene.)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-428510273
https://github.com/sofa-framework/sofa/pull/790#issuecomment-429879592:77,Performance,load,loads,77,I want to make this PR less ambitious by solving the case only when the user loads a scene with a wrong quaternion. ; This does not solve the problem when the user modifies the quaternion wrongly in the GUI.; I let cleverer people fix this issue in the best way...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-429879592
https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:785,Availability,error,error,785,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085
https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:885,Availability,error,error,885,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085
https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:843,Integrability,message,message,843,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085
https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085:215,Safety,detect,detection,215,"Quick summary:; Problem 1: ; Quaternion (when unnormalized) can be used to encode more than juste R3 orientation so we shouldn't force the normalization in the Quaternion operator>>().; We should have normalization detection and renormalization done only on object that we know for sure are R3 orientation. So to me the proper fix should be done in the operator>> of Rigid3Type. Problem 2:; About reporting warning to the users. This cannot be done in the Quater::normalize function. Because normalization is a perfectly valid operation to apply on an un-normalized quaternion and thus there is no meaning to report a warning. Actually it is like printing a warning when we are doing exactly what the function is supposed to do. . Now, the problem goes far beyond this PR as reporting error/exception is a complex issue in Sofa as we rely on 'message' instead of exception and C-style error handling vs exception vs printing (as in sofa) is an as old problem as c++ and in our code base all the approaches have been used.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/790#issuecomment-430591085
https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978:370,Deployability,release,release,370,"defrost-macos1011-0 (Defrost machine): AppleClang 8.0.0.8000042; sofa-ci-dev-macos109-0 (VM): AppleClang 6.0.0.6000051. The machine on which a build was done is printed at the beginning of the log.; Example: ""Building remotely on sofa-ci-dev-macos109-0"" in https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-792/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/1/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978
https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978:193,Testability,log,log,193,"defrost-macos1011-0 (Defrost machine): AppleClang 8.0.0.8000042; sofa-ci-dev-macos109-0 (VM): AppleClang 6.0.0.6000051. The machine on which a build was done is printed at the beginning of the log.; Example: ""Building remotely on sofa-ci-dev-macos109-0"" in https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-792/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/1/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978
https://github.com/sofa-framework/sofa/pull/792#issuecomment-428893320:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428893320
https://github.com/sofa-framework/sofa/pull/792#issuecomment-428993993:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428993993
https://github.com/sofa-framework/sofa/pull/792#issuecomment-429261484:103,Performance,concurren,concurrent,103,@guparan Thanks for the explanation. ; Some of the yesterday build failed were probably caused for the concurrent build. ; May I run one clean build today to be sure the build failed on mac_clang was not affected by that problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-429261484
https://github.com/sofa-framework/sofa/pull/792#issuecomment-429316737:48,Testability,test,tests,48,"Sure, I do it right away: [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-429316737
https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551:56,Modifiability,plugin,plugin,56,"Hi, sorry for the delay. If all the contributors of the plugin agree, I see no objection merging this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551
https://github.com/sofa-framework/sofa/pull/796#issuecomment-431785700:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/796#issuecomment-431785700
https://github.com/sofa-framework/sofa/pull/796#issuecomment-433070047:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/796#issuecomment-433070047
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432568313:61,Availability,error,error,61,"Thanks for this massive PR @EulalieCoevoet :+1:. Here is the error output for CentOS build:; ```; In file included from /usr/include/boost/intrusive_ptr.hpp:16:; /usr/include/boost/smart_ptr/intrusive_ptr.hpp:68:34: error: use of undeclared identifier 'intrusive_ptr_add_ref'; if( px != 0 && add_ref ) intrusive_ptr_add_ref( px );; ^; /builds/workspace/sofa-framework/PR-798/centos_clang-3.4_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/objectmodel/SPtr.h:56:28: note: in instantiation of member function 'boost::intrusive_ptr<sofa::component::mapping::BarycentricMapperEdgeSetTopology<Vec3dTypes, ExtVec3fTypes> >::intrusive_ptr' requested here; New(Args&& ... args) : SPtr( new T(std::forward<Args>(args)...) ) { }; ^; /builds/workspace/sofa-framework/PR-798/centos_clang-3.4_options_release/src/SofaKernel/SofaBase/../modules/SofaBaseMechanics/BarycentricMapping.inl:973:40: note: in instantiation of function template specialization 'sofa::core::objectmodel::New<sofa::component::mapping::BarycentricMapperEdgeSetTopology<Vec3dTypes, ExtVec3fTypes> >::New<sofa::component::topology::EdgeSetTopologyContainer *&, sofa::component::topology::PointSetTopologyContainer *&>' requested here; m_mapper = sofa::core::objectmodel::New<EdgeSetMapper>(t5, toTopoCont);; ^; ```. SofaCUDA seems also to be a problem on Linux build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432568313
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432568313:216,Availability,error,error,216,"Thanks for this massive PR @EulalieCoevoet :+1:. Here is the error output for CentOS build:; ```; In file included from /usr/include/boost/intrusive_ptr.hpp:16:; /usr/include/boost/smart_ptr/intrusive_ptr.hpp:68:34: error: use of undeclared identifier 'intrusive_ptr_add_ref'; if( px != 0 && add_ref ) intrusive_ptr_add_ref( px );; ^; /builds/workspace/sofa-framework/PR-798/centos_clang-3.4_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/objectmodel/SPtr.h:56:28: note: in instantiation of member function 'boost::intrusive_ptr<sofa::component::mapping::BarycentricMapperEdgeSetTopology<Vec3dTypes, ExtVec3fTypes> >::intrusive_ptr' requested here; New(Args&& ... args) : SPtr( new T(std::forward<Args>(args)...) ) { }; ^; /builds/workspace/sofa-framework/PR-798/centos_clang-3.4_options_release/src/SofaKernel/SofaBase/../modules/SofaBaseMechanics/BarycentricMapping.inl:973:40: note: in instantiation of function template specialization 'sofa::core::objectmodel::New<sofa::component::mapping::BarycentricMapperEdgeSetTopology<Vec3dTypes, ExtVec3fTypes> >::New<sofa::component::topology::EdgeSetTopologyContainer *&, sofa::component::topology::PointSetTopologyContainer *&>' requested here; m_mapper = sofa::core::objectmodel::New<EdgeSetMapper>(t5, toTopoCont);; ^; ```. SofaCUDA seems also to be a problem on Linux build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432568313
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:205,Availability,avail,available,205,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:842,Deployability,update,updated,842,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:272,Modifiability,refactor,refactored,272,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:608,Modifiability,refactor,refactor,608,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:803,Modifiability,variab,variables,803,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:889,Modifiability,refactor,refactor,889,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:28,Performance,optimiz,optimize,28,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:186,Performance,optimiz,optimization,186,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:720,Performance,optimiz,optimize,720,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:137,Safety,avoid,avoid,137,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:98,Usability,clear,clear,98,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901
https://github.com/sofa-framework/sofa/pull/797#issuecomment-438594229:48,Availability,error,errors,48,"@EulalieCoevoet Hi, do you plan to fix the CUDA errors?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-438594229
https://github.com/sofa-framework/sofa/pull/797#issuecomment-443634670:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-443634670
https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298:98,Modifiability,refactor,refactor,98,"@EulalieCoevoet ; Thanks for this PR. Just for the record, why ?; `What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298
https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719:172,Modifiability,refactor,refactored,172,On my PC this version does not compile...do the PR 797 is required to be merged before this one ?; On the CI the problem is probably caused by the Cuda version that is not refactored.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719
https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220:222,Deployability,update,updated,222,"No, the PR #797 is included in this one. ; I just wanted to split both contributions to ease the review somehow. ; It compiles on my two computers, isn't it a problem with plugins? The cleaning indeed could break some not updated code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220
https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220:172,Modifiability,plugin,plugins,172,"No, the PR #797 is included in this one. ; I just wanted to split both contributions to ease the review somehow. ; It compiles on my two computers, isn't it a problem with plugins? The cleaning indeed could break some not updated code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220
https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934:48,Usability,feedback,feedback,48,"Hi all,. I think Eulalie's work is done. . Your feedback & review are welcome because it is a big PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934
https://github.com/sofa-framework/sofa/pull/798#issuecomment-444038199:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444038199
https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411:280,Security,hash,hash,280,"Hi again @EulalieCoevoet ; I tried to check the difference with the PR #797; I suppose it is this commit: https://github.com/sofa-framework/sofa/pull/798/commits/5f56d38ac531e7dfd8a0d63eb7d00ddc870c21ea; Could you add in 2 lines in the header, what criteria is used to create the hash table and then which method is used to find element in the table. If already done I apologize, the changes log is very hard to read.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411
https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411:392,Testability,log,log,392,"Hi again @EulalieCoevoet ; I tried to check the difference with the PR #797; I suppose it is this commit: https://github.com/sofa-framework/sofa/pull/798/commits/5f56d38ac531e7dfd8a0d63eb7d00ddc870c21ea; Could you add in 2 lines in the header, what criteria is used to create the hash table and then which method is used to find element in the table. If already done I apologize, the changes log is very hard to read.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411
https://github.com/sofa-framework/sofa/issues/799#issuecomment-592157825:49,Safety,detect,detect,49,"Threshold and epsilon to go ..; However, hard to detect them. Any suggestion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/799#issuecomment-592157825
https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381:47,Testability,test,test,47,- info on time is already dumped at each scene test but not used on the CI.; - State is now tested using the project: https://github.com/sofa-framework/regression; Done in PR #830; Tested in PR #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381
https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381:92,Testability,test,tested,92,- info on time is already dumped at each scene test but not used on the CI.; - State is now tested using the project: https://github.com/sofa-framework/regression; Done in PR #830; Tested in PR #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381
https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381:181,Testability,Test,Tested,181,- info on time is already dumped at each scene test but not used on the CI.; - State is now tested using the project: https://github.com/sofa-framework/regression; Done in PR #830; Tested in PR #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381
https://github.com/sofa-framework/sofa/pull/803#issuecomment-440045839:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/803#issuecomment-440045839
https://github.com/sofa-framework/sofa/pull/805#issuecomment-434438607:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/805#issuecomment-434438607
https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072:67,Integrability,depend,dependency,67,"Wow, very old issue. Indeed CMake generation must tell you if some dependency is not satisfied. I think it has been fixed for a long time but feel free to reopen if not! Cheers :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/807#issuecomment-743072072
https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880:42,Modifiability,plugin,plugins,42,"Default CMake build compiles, now all the plugins, and disabled options that activate code using DataEngines need to be activated to propagate that change.; I'm counting on you...!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880
https://github.com/sofa-framework/sofa/pull/814#issuecomment-438599730:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814#issuecomment-438599730
https://github.com/sofa-framework/sofa/pull/815#issuecomment-438603291:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/815#issuecomment-438603291
https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395:83,Modifiability,Flexible,Flexible,83,"It seems that the Win VM has space issues, while the MacOS does not compile due to Flexible plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395
https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395:92,Modifiability,plugin,plugin,92,"It seems that the Win VM has space issues, while the MacOS does not compile due to Flexible plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395
https://github.com/sofa-framework/sofa/pull/821#issuecomment-438611899:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/821#issuecomment-438611899
https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602:22,Deployability,update,update,22,@marques-bruno Please update/enhance the Doxygen for both methods :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602
https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602:29,Modifiability,enhance,enhance,29,@marques-bruno Please update/enhance the Doxygen for both methods :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602
https://github.com/sofa-framework/sofa/pull/822#issuecomment-440601218:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-440601218
https://github.com/sofa-framework/sofa/pull/822#issuecomment-440602060:108,Deployability,update,updated,108,https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-component/; Doc updated,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-440602060
https://github.com/sofa-framework/sofa/pull/822#issuecomment-441176556:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-441176556
https://github.com/sofa-framework/sofa/pull/823#issuecomment-466042751:396,Testability,test,test,396,"@hugtalbot thanks for the comment.; This PR is not entirely forgotten, but there are still some questions regarding the implementation of such system. First, it relies on the messaging API to work, which I find is not a great approach, not that I have another one.; Second, the question remains as to how this mechanism could be put to good use.; I think the best way to put the mechanism to the test would be through a visual graph of the component's states, which could be done in runSofa2. Sadly there are more important stuff to deal with in runSofa2 for now.; We can surely discuss it on wednesday, but I don't know if there's much to say, and I don't think I'll work on this in the following weeks...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/823#issuecomment-466042751
https://github.com/sofa-framework/sofa/pull/824#issuecomment-440611285:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/824#issuecomment-440611285
https://github.com/sofa-framework/sofa/pull/824#issuecomment-440805769:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/824#issuecomment-440805769
https://github.com/sofa-framework/sofa/pull/824#issuecomment-441599038:810,Integrability,message,message,810,"Current the component says it:; /** ; Impose a motion to all the boundary points of a mesh. The motion of the 4 corners are given in the data m_cornerMovements and the movements of the edge points are computed by linear interpolation. ; */; Which looks wrong and probably the result of copy-pasting. ; But what should it be instead ? . Then I bumped into these two:; ```cpp; , m_beginConstraintTime( initData(&m_beginConstraintTime,""beginConstraintTime"",""Begin time of the bilinear constraint"") ); , m_endConstraintTime( initData(&m_endConstraintTime,""endConstraintTime"",""End time of the bilinear constraint"") ); ```; I dream of a day when this kind of code will be removed (or moved into single ""unique"" component that controls ""activation/deactivation"" of a component according to specific rules (time, key, message whatever)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/824#issuecomment-441599038
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439416548:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439416548
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761:100,Availability,error,errors,100,"@damienmarchal Could you take a look at the 8 failing scene tests?; All of them are ""required data"" errors.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761:60,Testability,test,tests,60,"@damienmarchal Could you take a look at the 8 failing scene tests?; All of them are ""required data"" errors.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:13,Availability,failure,failure,13,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:38,Availability,error,error,38,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:62,Availability,ERROR,ERROR,62,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:235,Availability,error,errors,235,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:44,Integrability,message,messages,44,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829:197,Integrability,message,message,197,"Actually the failure are generated by error messages like: ; [ERROR] [BeamFEMForceField(FEM)] Required data ""poissonRatio"" has not been set. (Current value is 0.49). My first comment is that these message are 'wrong' because they are ""errors"" while there is a default value provided to the field. So because of these default value the fields shouldn't be taggued as ""required"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439893829
https://github.com/sofa-framework/sofa/pull/826#issuecomment-439416578:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826#issuecomment-439416578
https://github.com/sofa-framework/sofa/pull/826#issuecomment-439934513:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826#issuecomment-439934513
https://github.com/sofa-framework/sofa/pull/826#issuecomment-440206225:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826#issuecomment-440206225
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241:268,Performance,cache,cache,268,"I agree that maintaining those ifdef are quite cumbersome and there are probably easier ways to manage this. Just a small remark, while arithmetic operations on double are probably faster than float (well, at least on most of our hardware), using float might minimize cache misses and might, with the help of compiler optimisations, produce faster execution times on memory intensive application (like SOFA) . I think we should test this before removing floats from everywhere. If we got different results, maybe we could set a default floating type for the entire Sofa, and allow modules to change this default value for their components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241:428,Testability,test,test,428,"I agree that maintaining those ifdef are quite cumbersome and there are probably easier ways to manage this. Just a small remark, while arithmetic operations on double are probably faster than float (well, at least on most of our hardware), using float might minimize cache misses and might, with the help of compiler optimisations, produce faster execution times on memory intensive application (like SOFA) . I think we should test this before removing floats from everywhere. If we got different results, maybe we could set a default floating type for the entire Sofa, and allow modules to change this default value for their components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:61,Modifiability,maintainab,maintainability,61,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:151,Performance,perform,performance,151,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:260,Performance,perform,performance,260,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059
https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:356,Performance,perform,performance,356,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059
https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656:16,Usability,feedback,feedback,16,"Thanks for your feedback @jnbrunet @damienmarchal . Meanwhile, this PR is ready, and I suggest reviewing it as a fast-merge since it's not much and fixes a compile-time issue for quite a few people.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:133,Availability,ERROR,ERRORBYDOF,133,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:188,Availability,ERROR,ERRORBYDOF,188,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:356,Availability,ERROR,ERRORBYDOF,356,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:440,Availability,ERROR,ERRORBYDOF,440,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:0,Deployability,Update,Update,0,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:291,Modifiability,plugin,plugin,291,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264
https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640:146,Security,access,accessible,146,This issue is pending since last STC6.; Now that regression test project is tracked as a git submodule. Old historically failing refences will be accessible from git history and will now be replaced (in PR #1061) by new version with only first and last iteration dump.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640
https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640:60,Testability,test,test,60,This issue is pending since last STC6.; Now that regression test project is tracked as a git submodule. Old historically failing refences will be accessible from git history and will now be replaced (in PR #1061) by new version with only first and last iteration dump.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640
https://github.com/sofa-framework/sofa/issues/829#issuecomment-445824183:9,Testability,test,tested,9,Done and tested in #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/829#issuecomment-445824183
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586:181,Deployability,release,release,181,"You can see an example of regression test results here: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-830/11/CI_CONFIG=windows7_vs-2015_amd64,CI_PLUGINS=options,CI_TYPE=release/testReport",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586:37,Testability,test,test,37,"You can see an example of regression test results here: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-830/11/CI_CONFIG=windows7_vs-2015_amd64,CI_PLUGINS=options,CI_TYPE=release/testReport",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586:189,Testability,test,testReport,189,"You can see an example of regression test results here: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-830/11/CI_CONFIG=windows7_vs-2015_amd64,CI_PLUGINS=options,CI_TYPE=release/testReport",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757:58,Testability,test,test,58,This should fix:; regression_test issue: #801; regresison test topology: #829; failing regression test need to be discussed in next dev meeting: #828,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757:98,Testability,test,test,98,This should fix:; regression_test issue: #801; regresison test topology: #829; failing regression test need to be discussed in next dev meeting: #828,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440640198:9,Deployability,update,updated,9,Full doc updated in readme: https://github.com/sofa-framework/regression,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440640198
https://github.com/sofa-framework/sofa/pull/830#issuecomment-440967822:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440967822
https://github.com/sofa-framework/sofa/pull/831#issuecomment-440012058:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/831#issuecomment-440012058
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440045645:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440045645
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222:307,Availability,failure,failure,307,Probably because of the removal of the DataRepository intialization in https://github.com/sofa-framework/sofa/commit/5dad27f7bc374c190042959bc55367532008b25a#diff-876fc7003912f34d0dac92bb413d70a0 ; The tests are failling but as they were not in-heriting from BaseTest/SofaTest this was not reported as test failure.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222:202,Testability,test,tests,202,Probably because of the removal of the DataRepository intialization in https://github.com/sofa-framework/sofa/commit/5dad27f7bc374c190042959bc55367532008b25a#diff-876fc7003912f34d0dac92bb413d70a0 ; The tests are failling but as they were not in-heriting from BaseTest/SofaTest this was not reported as test failure.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222:302,Testability,test,test,302,Probably because of the removal of the DataRepository intialization in https://github.com/sofa-framework/sofa/commit/5dad27f7bc374c190042959bc55367532008b25a#diff-876fc7003912f34d0dac92bb413d70a0 ; The tests are failling but as they were not in-heriting from BaseTest/SofaTest this was not reported as test failure.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317:173,Availability,error,error,173,"Is the topology mandatory for the purpose of `DiagonalMass3_test.checkAttributes`? It seems not when reading the test.; About `DiagonalMass3_test.checkAttributeLoadFromXps` error, you commented `/// Rigid file are not handled only xs3....` [here](https://github.com/sofa-framework/sofa/blob/68cc242dd0140b668485277266d26b0ce9d476cf/SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/DiagonalMass_test.cpp#L813). So maybe you know how to fix the error?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317:454,Availability,error,error,454,"Is the topology mandatory for the purpose of `DiagonalMass3_test.checkAttributes`? It seems not when reading the test.; About `DiagonalMass3_test.checkAttributeLoadFromXps` error, you commented `/// Rigid file are not handled only xs3....` [here](https://github.com/sofa-framework/sofa/blob/68cc242dd0140b668485277266d26b0ce9d476cf/SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/DiagonalMass_test.cpp#L813). So maybe you know how to fix the error?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317:113,Testability,test,test,113,"Is the topology mandatory for the purpose of `DiagonalMass3_test.checkAttributes`? It seems not when reading the test.; About `DiagonalMass3_test.checkAttributeLoadFromXps` error, you commented `/// Rigid file are not handled only xs3....` [here](https://github.com/sofa-framework/sofa/blob/68cc242dd0140b668485277266d26b0ce9d476cf/SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/DiagonalMass_test.cpp#L813). So maybe you know how to fix the error?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440225157:32,Testability,test,tests,32,"This PR is not about fixing the tests, it was to point they are failing since a long time and this was un-noticed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440225157
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:138,Availability,error,error,138,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:222,Availability,Error,Error,222,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:101,Testability,test,test,101,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:282,Testability,test,test,282,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:256,Usability,simpl,simpler,256,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:270,Usability,simpl,simply,270,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295
https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626:108,Modifiability,plugin,plugin,108,"Hi rainvector. . As far as can say there is some fluid implementations that are relatively out-dated in the plugin SofaEulerianFluid. Maybe you will have more answers on the user's forum https://www.sofa-framework.org/community/forum/section/user-forum/. Regards,; Damien.; EDIT1: And you are right, i quickly looked into the plugin and it does not contains documentation.; EDIT2: There is several examples which contains fluids simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626
https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626:326,Modifiability,plugin,plugin,326,"Hi rainvector. . As far as can say there is some fluid implementations that are relatively out-dated in the plugin SofaEulerianFluid. Maybe you will have more answers on the user's forum https://www.sofa-framework.org/community/forum/section/user-forum/. Regards,; Damien.; EDIT1: And you are right, i quickly looked into the plugin and it does not contains documentation.; EDIT2: There is several examples which contains fluids simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626
https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519:99,Availability,avail,available,99,"Hi @RainVector ; Thank you very much for your interest in our open-source project.; Some codes are available in SOFA for fluid simulation but it is not widely developed. You can for instance find: ; - examples in _examples/Components/behaviormodel/_; - and 2 plugins (in _applications/plugins_):; - SofaEulerianFluid ; - SofaSphFluid. Note: for user questions, please the [SOFA online forum](https://www.sofa-framework.org/community/forum/) instead. GitHub is restricted for developer discussions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519
https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519:259,Modifiability,plugin,plugins,259,"Hi @RainVector ; Thank you very much for your interest in our open-source project.; Some codes are available in SOFA for fluid simulation but it is not widely developed. You can for instance find: ; - examples in _examples/Components/behaviormodel/_; - and 2 plugins (in _applications/plugins_):; - SofaEulerianFluid ; - SofaSphFluid. Note: for user questions, please the [SOFA online forum](https://www.sofa-framework.org/community/forum/) instead. GitHub is restricted for developer discussions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519
https://github.com/sofa-framework/sofa/pull/834#issuecomment-440290171:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440290171
https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625:74,Modifiability,plugin,plugins,74,"@EulalieCoevoet , @VannesteFelix can one of you test this branch with our plugins SoftRobots & MOR on the big's felix machine to see if this work well ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625
https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625:48,Testability,test,test,48,"@EulalieCoevoet , @VannesteFelix can one of you test this branch with our plugins SoftRobots & MOR on the big's felix machine to see if this work well ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625
https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131:54,Availability,error,errors,54,"On the BFM it compile perfectly!; There are just some errors related to update & doUpdate function that will need to be fixed but this doesn't come from this MR. (@EulalieCoevoet); I also test some examples and still no error for me, so it should be ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131
https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131:220,Availability,error,error,220,"On the BFM it compile perfectly!; There are just some errors related to update & doUpdate function that will need to be fixed but this doesn't come from this MR. (@EulalieCoevoet); I also test some examples and still no error for me, so it should be ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131
https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131:72,Deployability,update,update,72,"On the BFM it compile perfectly!; There are just some errors related to update & doUpdate function that will need to be fixed but this doesn't come from this MR. (@EulalieCoevoet); I also test some examples and still no error for me, so it should be ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131
https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131:188,Testability,test,test,188,"On the BFM it compile perfectly!; There are just some errors related to update & doUpdate function that will need to be fixed but this doesn't come from this MR. (@EulalieCoevoet); I also test some examples and still no error for me, so it should be ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131
https://github.com/sofa-framework/sofa/pull/834#issuecomment-442793591:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-442793591
https://github.com/sofa-framework/sofa/pull/834#issuecomment-442793591:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-442793591
https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788:168,Modifiability,refactor,refactoring,168,"Process:; - remove all SOFA_WITH_FLOAT sections. ; - remove the #ifdef SOFA_WITH_DOUBLE line.; - replace all Vec3dTypes by Vec3Types (and Mass, and other types) with a refactoring tool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788
https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072:48,Deployability,integrat,integration,48,No need to this PR anymore...because it was for integration into stc5 branch. I will re-open a new one against master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072
https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072:48,Integrability,integrat,integration,48,No need to this PR anymore...because it was for integration into stc5 branch. I will re-open a new one against master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-444484072
https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687
https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687
https://github.com/sofa-framework/sofa/pull/839#issuecomment-444419303:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/839#issuecomment-444419303
https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446:336,Integrability,interface,interface,336,The Data constraintForces is used to provide the intensities of constraint forces in the simulation. We use the constraint forces as the approximation of real contact forces. We use this Data to provide contact information for the catheter insertion. The user can easily check the constraint forces from the GenericConstraint component interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-443204446
https://github.com/sofa-framework/sofa/pull/840#issuecomment-446145645:32,Availability,failure,failure,32,[ci-build] (because of weird CI-failure),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446145645
https://github.com/sofa-framework/sofa/pull/840#issuecomment-446398006:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446398006
https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296:47,Modifiability,variab,variable,47,@damienmarchal Do you still plan to change the variable name?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296
https://github.com/sofa-framework/sofa/pull/841#issuecomment-441300085:25,Testability,test,test,25,"Interesting CI results a test failer I never heard about :). @guparan , @VannesteFelix any idea if this is related to the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/841#issuecomment-441300085
https://github.com/sofa-framework/sofa/pull/841#issuecomment-441711724:12,Availability,error,error,12,"It is.; The error `File size mismatch` appears because in `WriteState_test::createScene` exported files ""particleGravityX.data"" and ""particleGravityY.data"" are different from reference files """"particleGravityX-reference.data"" and ""particleGravityY-reference.data"".; This is due to the change in MechanicalObject adding `std::scientific << std::setprecision(18)`.; Exported files should be like; ```; T= 0; X= 0 0 0; ...; ```; and are now like; ```; T= 0; X= 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00; ...; ```. Solution 1: regenerate the references located in `modules/SofaExporter/SofaExporter_test/files`.; Solution 2: revert MechanicalObject change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/841#issuecomment-441711724
https://github.com/sofa-framework/sofa/pull/841#issuecomment-442198720:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/841#issuecomment-442198720
https://github.com/sofa-framework/sofa/pull/845#issuecomment-444430169:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/845#issuecomment-444430169
https://github.com/sofa-framework/sofa/pull/846#issuecomment-444045155:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/846#issuecomment-444045155
https://github.com/sofa-framework/sofa/pull/847#issuecomment-444253825:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-444253825
https://github.com/sofa-framework/sofa/pull/847#issuecomment-446211193:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446211193
https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947:34,Availability,failure,failures,34,I'm a bit surprised with the test failures;... so i restart ; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947
https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947:29,Testability,test,test,29,I'm a bit surprised with the test failures;... so i restart ; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947
https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947:82,Testability,test,tests,82,I'm a bit surprised with the test failures;... so i restart ; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947
https://github.com/sofa-framework/sofa/pull/848#issuecomment-444047320:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/848#issuecomment-444047320
https://github.com/sofa-framework/sofa/pull/849#issuecomment-446145199:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/849#issuecomment-446145199
https://github.com/sofa-framework/sofa/pull/849#issuecomment-446572298:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/849#issuecomment-446572298
https://github.com/sofa-framework/sofa/pull/850#issuecomment-444254117:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-444254117
https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019:116,Deployability,release,release,116,"**https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2/** warnings4Result/package.-377079774/. \+ . see BUILD_URL/**artifact/parent_dir/build/scene-tests/examples/Components/constraint/FixedLMConstraint.scn/output.txt**. =. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2//artifact/parent_dir/build/scene-tests/examples/Components/forcefield/JointSpringForceField.scn/output.txt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019
https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019:409,Deployability,release,release,409,"**https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2/** warnings4Result/package.-377079774/. \+ . see BUILD_URL/**artifact/parent_dir/build/scene-tests/examples/Components/constraint/FixedLMConstraint.scn/output.txt**. =. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2//artifact/parent_dir/build/scene-tests/examples/Components/forcefield/JointSpringForceField.scn/output.txt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019
https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019:219,Testability,test,tests,219,"**https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2/** warnings4Result/package.-377079774/. \+ . see BUILD_URL/**artifact/parent_dir/build/scene-tests/examples/Components/constraint/FixedLMConstraint.scn/output.txt**. =. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2//artifact/parent_dir/build/scene-tests/examples/Components/forcefield/JointSpringForceField.scn/output.txt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019
https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019:452,Testability,test,tests,452,"**https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2/** warnings4Result/package.-377079774/. \+ . see BUILD_URL/**artifact/parent_dir/build/scene-tests/examples/Components/constraint/FixedLMConstraint.scn/output.txt**. =. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2//artifact/parent_dir/build/scene-tests/examples/Components/forcefield/JointSpringForceField.scn/output.txt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019
https://github.com/sofa-framework/sofa/pull/850#issuecomment-453548599:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-453548599
https://github.com/sofa-framework/sofa/pull/850#issuecomment-454081942:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-454081942
https://github.com/sofa-framework/sofa/pull/850#issuecomment-454081942:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-454081942
https://github.com/sofa-framework/sofa/pull/851#issuecomment-444170207:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/851#issuecomment-444170207
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608:23,Testability,test,tests,23,[ci-build][[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446135454:23,Testability,test,tests,23,[ci-build][[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446135454
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446174036:31,Testability,test,test,31,"Nice work, do you need help to test?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446174036
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:190,Modifiability,plugin,plugins,190,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:139,Security,validat,validate,139,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538
https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:160,Testability,test,testing,160,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538
https://github.com/sofa-framework/sofa/pull/853#issuecomment-447487467:54,Testability,test,tests,54,"I'm very happy to say that it compiles and passes the tests. ; bye bye the sofa float ugliness. ; @guparan, @hugtalbot, @ChristianDuriez, @bcarrez . So now how do we merge ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-447487467
https://github.com/sofa-framework/sofa/pull/853#issuecomment-448388405:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448388405
https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844:201,Modifiability,Flexible,Flexible,201,"To me, here are the important files to review if you agree with the changes made:; In SofaKernel:; - Vec.h; - VecTypes.h; - Mat.h; - Quat.h; - RigidTypes.h; - TemplateAlias.cpp ; - TemplateAlias.h. In Flexible; - StrainTypes; - DeformationGradientTypes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844
https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409:2200,Availability,down,down,2200,"node with amechanical state and a mapping ; if(stopAtMechanicalmapping(node.mapping)); return; fwdMechanicalMapping(node.mapping,);; fwdMappedMechanicalState(node.mstate); ; else; /// We are in a node with amechanical state but without a mapping ; fwdMechanicalState(node.mstate); ...; /// plenty of other scenarios..; ...; for(constraint : node.constraints); fwdConstraintSet(constriant); for(forcefield : node.forcefield); fwdForceField(forcefield); ....; ```; The general idea in this BaseMechanicalVisitor is to implement custom behavior that are triggered wen specific scene ""patterns"" are recognized. The custom behavior are the virtual function (eg: fwdMechanicalState). By default these functions do nothing. It is the responsability of the visitors in-heriting from BaseMechanicalVisitor to override them to match implement the behavior they needs. In the drafted code before... you can notice the line:; ```cpp; stopAtMechanicalmapping(node.mapping); ```; This is also a function implemented in BaseMechanicalVisitor that by default, check the data fields in the provided node.mapping to control if the mechanical action has to be done or stopped. . Let's narrow now down to the constraints. To process the constraints different visitors are used, these visitors inherits from BaseMechanicalVisitors without changing the processNodeTopDown() but instead overiding things in the method fwdConstraintSet(), ; - MechanicalGetConstraintResolutionVisitor ; - MechanicalGetConstraintInfoVisitor; - MechanicalGetConstraintViolationVisitor; - MechanicalAccumulateConstraint2; - MechanicalSetConstraint; - MechanicalAccumulateJacobian. These constraint specific methods are called at the end of the processNodeTopDown() these lines are reached only if the call to stopAtMechanicalMapping() returns false. To make that happens ; all these visitors are overriding stopAtMechanicalMapping() so it returns always false. . The storeLambda was the only one not doing that (which is now fixed with the PR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409
https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409:2296,Modifiability,inherit,inherits,2296,"node with amechanical state and a mapping ; if(stopAtMechanicalmapping(node.mapping)); return; fwdMechanicalMapping(node.mapping,);; fwdMappedMechanicalState(node.mstate); ; else; /// We are in a node with amechanical state but without a mapping ; fwdMechanicalState(node.mstate); ...; /// plenty of other scenarios..; ...; for(constraint : node.constraints); fwdConstraintSet(constriant); for(forcefield : node.forcefield); fwdForceField(forcefield); ....; ```; The general idea in this BaseMechanicalVisitor is to implement custom behavior that are triggered wen specific scene ""patterns"" are recognized. The custom behavior are the virtual function (eg: fwdMechanicalState). By default these functions do nothing. It is the responsability of the visitors in-heriting from BaseMechanicalVisitor to override them to match implement the behavior they needs. In the drafted code before... you can notice the line:; ```cpp; stopAtMechanicalmapping(node.mapping); ```; This is also a function implemented in BaseMechanicalVisitor that by default, check the data fields in the provided node.mapping to control if the mechanical action has to be done or stopped. . Let's narrow now down to the constraints. To process the constraints different visitors are used, these visitors inherits from BaseMechanicalVisitors without changing the processNodeTopDown() but instead overiding things in the method fwdConstraintSet(), ; - MechanicalGetConstraintResolutionVisitor ; - MechanicalGetConstraintInfoVisitor; - MechanicalGetConstraintViolationVisitor; - MechanicalAccumulateConstraint2; - MechanicalSetConstraint; - MechanicalAccumulateJacobian. These constraint specific methods are called at the end of the processNodeTopDown() these lines are reached only if the call to stopAtMechanicalMapping() returns false. To make that happens ; all these visitors are overriding stopAtMechanicalMapping() so it returns always false. . The storeLambda was the only one not doing that (which is now fixed with the PR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409
https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409:225,Performance,perform,perform,225,"Isn't the PR passed to ready, as erik said...""np for the PR"" ? . Here is my understanding (don't trust my word, check what I'm saying). . During simulation the animation loop triggers visitors to traverse the scene graph and perform specific action on the nodes. ; The important thing in a visitor is to override the following function:; - processNodeTopDown(simulation::Node*) to implement a specific behavior when entering in a new node while traversing the scene graph (fwd). ; - processNodeBottomUp(Node*) to implement a specific behavior when entering in a node while traversing the graph from the leaves to the root (bwd). Let's now focus on mechanical aspects. ; In Sofa, a lot of the sofa visitors are in-heriting from BaseMechanicalVisitor. This visitor is implementing a very specific behavior in processNodeTopDown & processNodeBottomUp. ; This behavior is more or less (see in MechanicalVisitor.cpp):; ```cpp; for(s : node.solvers); fwdSolver(s); if(node.mstate !=null); if(node.mapping!=null); /// We are in a node with amechanical state and a mapping ; if(stopAtMechanicalmapping(node.mapping)); return; fwdMechanicalMapping(node.mapping,);; fwdMappedMechanicalState(node.mstate); ; else; /// We are in a node with amechanical state but without a mapping ; fwdMechanicalState(node.mstate); ...; /// plenty of other scenarios..; ...; for(constraint : node.constraints); fwdConstraintSet(constriant); for(forcefield : node.forcefield); fwdForceField(forcefield); ....; ```; The general idea in this BaseMechanicalVisitor is to implement custom behavior that are triggered wen specific scene ""patterns"" are recognized. The custom behavior are the virtual function (eg: fwdMechanicalState). By default these functions do nothing. It is the responsability of the visitors in-heriting from BaseMechanicalVisitor to override them to match implement the behavior they needs. In the drafted code before... you can notice the line:; ```cpp; stopAtMechanicalmapping(node.mapping); ```; This is also",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/854#issuecomment-446583409
https://github.com/sofa-framework/sofa/pull/855#issuecomment-445847655:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/855#issuecomment-445847655
https://github.com/sofa-framework/sofa/pull/855#issuecomment-446551990:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/855#issuecomment-446551990
https://github.com/sofa-framework/sofa/pull/855#issuecomment-447955290:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/855#issuecomment-447955290
https://github.com/sofa-framework/sofa/pull/856#issuecomment-446144389:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-446144389
https://github.com/sofa-framework/sofa/pull/856#issuecomment-446211434:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-446211434
https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176:43,Safety,timeout,timeout,43,"Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; could this be related to the PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176
https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176:78,Testability,test,tests,78,"Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; could this be related to the PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176
https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576:45,Safety,timeout,timeout,45,"> Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; > could this be related to the PR?. Hello Hugo!; Hum, I don't think so, that would be really strange, this PR is purely about cleaning, it does not change the behaviour of the component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576
https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576:80,Testability,test,tests,80,"> Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; > could this be related to the PR?. Hello Hugo!; Hum, I don't think so, that would be really strange, this PR is purely about cleaning, it does not change the behaviour of the component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576
https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968:80,Safety,timeout,timeout,80,"hi @olivier-goury my bad, the regression tests have nothing to do with your PR! timeout are strange but same, not related to the PR ;) sorry about that !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968
https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968:41,Testability,test,tests,41,"hi @olivier-goury my bad, the regression tests have nothing to do with your PR! timeout are strange but same, not related to the PR ;) sorry about that !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968
https://github.com/sofa-framework/sofa/pull/857#issuecomment-445785770:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/857#issuecomment-445785770
https://github.com/sofa-framework/sofa/pull/860#issuecomment-452627583:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/860#issuecomment-452627583
https://github.com/sofa-framework/sofa/pull/862#issuecomment-448167420:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/862#issuecomment-448167420
https://github.com/sofa-framework/sofa/pull/865#issuecomment-447794584:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/865#issuecomment-447794584
https://github.com/sofa-framework/sofa/pull/865#issuecomment-447794584:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/865#issuecomment-447794584
https://github.com/sofa-framework/sofa/pull/866#issuecomment-447045711:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-447045711
https://github.com/sofa-framework/sofa/pull/866#issuecomment-448616851:37,Availability,error,error,37,Not sure about the UINT_MAX used for error handling. How about something like `BaseTopologyObject::INDEX_NOT_FOUND` (secretly equals to UINT_MAX)? Or an exception (cleaner)?. EDIT: There is already a `Topology::InvalidID` :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-448616851
https://github.com/sofa-framework/sofa/pull/866#issuecomment-448620464:124,Modifiability,inherit,inherite,124,yes but it ends in the same discussion as all the other typedefs that are in sofa::core::topology::Topology {}; You need to inherite or at least include that class to be able to use Topology::InvalidID ... ; Maybe a more generic one in sofa::defaultTypes ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-448620464
https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170:356,Modifiability,plugin,plugin,356,"A possible option for a first move towards the use of multiple mesh data structures would be to put all the ""using"" out of the xxxTopologyContainer classes into a traits. `; template <T>; struct Cell { };; `; `; template <>; struct Cell<SofaBaseMesh> {; using Vertex = index_type;; using Edge = index_type;; ....; };; `. The someone else could write (in a plugin); `; template<>; struct Cell<MyOwnMeshDataStructure> {; using Vertex = another_type;; ....; };; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170
https://github.com/sofa-framework/sofa/pull/869#issuecomment-447796343:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869#issuecomment-447796343
https://github.com/sofa-framework/sofa/pull/869#issuecomment-447796343:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869#issuecomment-447796343
https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833:67,Modifiability,plugin,plugins,67,"Hi, ; It looks fine to me, and everything is working well with our plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833
https://github.com/sofa-framework/sofa/issues/871#issuecomment-453591303:180,Availability,alive,alive,180,"Hi Dr Peterlik !. Happy new year :-) . I don’t know why PR #797 <https://github.com/sofa-framework/sofa/pull/797> is breaking our child forcefield (I didn’t know that it was still alive…) but we made an other baby with Olivier Goury :-)) to map the matrix of a forcefield. MechanicalMatrixMapper ; It is generic and is working with ALL mappings, even multi mapping (as soon as they implement applyJt(SparseDerivMatrix…). You should try (an example <https://github.com/sofa-framework/sofa/commit/0452e53c95c73c69d42cb3a8f2358b9423078b40>) ;-). https://github.com/sofa-framework/sofa/commit/9d33c8746e8f60c4f49b21b96198881173109d04 <https://github.com/sofa-framework/sofa/commit/9d33c8746e8f60c4f49b21b96198881173109d04>. Still, it is surprising that the PR on the barycentric is breaking the code. . Christian. > Le 11 janv. 2019 à 17:27, IPeterlik <notifications@github.com> a écrit :; > ; > Hello,; > ; > I am coming back to this issue.; > ; > The problem is this: in general, mappings in SOFA do not propagate stiffness matrix (more precisely MBK matrix) from slave to master, thus, any direct solver (such as LDL) is incompatible with mechanical mapping. Since this situation was in place already in 2010, I implemented at that time (with help of @ChristianDuriez <https://github.com/ChristianDuriez>) a ""temporary"" workaround: a special forcefield, which maps the stiffness matrix from the slave node to the master node. This allowed us to use LDL solvers with mechanical mapping. Otherwise, several papers would have never seen the light of day, e.g., on the composite liver model (sure, I could have done something more useful instead of writing them, but anyway... you get the idea).; > ; > Now, PR #797 <https://github.com/sofa-framework/sofa/pull/797> has brought an end to our happy life with the now almost teenaged temporary solution that is not working anymore with BarycentricMapping which is kind of surprising to me since as long as the mapping produces the correct matrix J, there sho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/871#issuecomment-453591303
https://github.com/sofa-framework/sofa/pull/873#issuecomment-449535931:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-449535931
https://github.com/sofa-framework/sofa/pull/873#issuecomment-450624789:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-450624789
https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383:54,Modifiability,config,configs,54,CI complains about 4 crashing scenes (timeout) on all configs:; ```; examples/Components/collision/RayTraceCollision.scn; examples/Components/misc/MeshTetraStuffing.scn; examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.scn; examples/Tutorials/StepByStep/Dentistry_Python/5_MeshGeneration.scn; ```; Any idea?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383
https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383:38,Safety,timeout,timeout,38,CI complains about 4 crashing scenes (timeout) on all configs:; ```; examples/Components/collision/RayTraceCollision.scn; examples/Components/misc/MeshTetraStuffing.scn; examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.scn; examples/Tutorials/StepByStep/Dentistry_Python/5_MeshGeneration.scn; ```; Any idea?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383
https://github.com/sofa-framework/sofa/pull/873#issuecomment-451901112:189,Testability,test,tests,189,"> I removed a commit by force push. It was failing on some OS.; > Could it be linked to a bad rebuild?. The latest build was manually triggered by you after the force push, including scene tests. So I guess the answer is no.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451901112
https://github.com/sofa-framework/sofa/pull/874#issuecomment-449513145:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/874#issuecomment-449513145
https://github.com/sofa-framework/sofa/pull/875#issuecomment-450670748:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/875#issuecomment-450670748
https://github.com/sofa-framework/sofa/pull/876#issuecomment-451105435:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/876#issuecomment-451105435
https://github.com/sofa-framework/sofa/pull/877#issuecomment-451015281:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/877#issuecomment-451015281
https://github.com/sofa-framework/sofa/pull/878#issuecomment-451015340:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-451015340
https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278:63,Availability,ping,ping,63,"Oups sorry @hugtalbot , I didn't see the notification that you ping me in this thread. I don't know why the triangles were oriented this way. For the breaking part, if someone was using them for BC or collisions, it will definitely break. The next thing I can see is, you are not only changing the orientation of the triangle, but also the ordering of these triangles inside the tetrahedron. If I do `TetrahedronSetTopologyContainer::getLocalTrianglesInTetrahedron (const TriangleID i)`, I no longer have the same triangle as before. That might also break something, although I can't find anything with a quick search in Sofa using it. ~~Finally, these indices are hardcoded in the cpp, and not accessible from the outside. So if someone is using them, it means he copy/pasted them in his source file. They will no longer match the one of the tetra container. This might have weird effects. It could be a good idea to make them available either directly from the header or inside a get function so that in the future, anyone using them will be in sync with the tetra container.~~ They have `getLocalTrianglesInTetrahedron` for this, I'm a little bit tired !. I guess it is ok to go forward with this, but have this PR in mind if you got ""my pressure FF doesn't work anymore, what are you guys doing????"" on the forum :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278
https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278:928,Availability,avail,available,928,"Oups sorry @hugtalbot , I didn't see the notification that you ping me in this thread. I don't know why the triangles were oriented this way. For the breaking part, if someone was using them for BC or collisions, it will definitely break. The next thing I can see is, you are not only changing the orientation of the triangle, but also the ordering of these triangles inside the tetrahedron. If I do `TetrahedronSetTopologyContainer::getLocalTrianglesInTetrahedron (const TriangleID i)`, I no longer have the same triangle as before. That might also break something, although I can't find anything with a quick search in Sofa using it. ~~Finally, these indices are hardcoded in the cpp, and not accessible from the outside. So if someone is using them, it means he copy/pasted them in his source file. They will no longer match the one of the tetra container. This might have weird effects. It could be a good idea to make them available either directly from the header or inside a get function so that in the future, anyone using them will be in sync with the tetra container.~~ They have `getLocalTrianglesInTetrahedron` for this, I'm a little bit tired !. I guess it is ok to go forward with this, but have this PR in mind if you got ""my pressure FF doesn't work anymore, what are you guys doing????"" on the forum :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278
https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278:695,Security,access,accessible,695,"Oups sorry @hugtalbot , I didn't see the notification that you ping me in this thread. I don't know why the triangles were oriented this way. For the breaking part, if someone was using them for BC or collisions, it will definitely break. The next thing I can see is, you are not only changing the orientation of the triangle, but also the ordering of these triangles inside the tetrahedron. If I do `TetrahedronSetTopologyContainer::getLocalTrianglesInTetrahedron (const TriangleID i)`, I no longer have the same triangle as before. That might also break something, although I can't find anything with a quick search in Sofa using it. ~~Finally, these indices are hardcoded in the cpp, and not accessible from the outside. So if someone is using them, it means he copy/pasted them in his source file. They will no longer match the one of the tetra container. This might have weird effects. It could be a good idea to make them available either directly from the header or inside a get function so that in the future, anyone using them will be in sync with the tetra container.~~ They have `getLocalTrianglesInTetrahedron` for this, I'm a little bit tired !. I guess it is ok to go forward with this, but have this PR in mind if you got ""my pressure FF doesn't work anymore, what are you guys doing????"" on the forum :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278
https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878:241,Testability,log,logical,241,thx @jnbrunet for your answer.; Indeed there is a missmatch with the Tetra2TriangleTopologicalMapping but I removed that in another PR. In fact the mapping was inverting the triangles because their orientation in the tetra-container was not logical to have a well oriented surface. . Let see if it breaks something. At least people know on whom to shoot.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878
https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198:26,Testability,test,tests,26,now that I have fixed the tests on tetrahedron yes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198
https://github.com/sofa-framework/sofa/issues/879#issuecomment-451481277:138,Deployability,update,update,138,"Hi @Neustradamus,. Thank you a lot for taking time to report the issue. . I think @guparan is the one to handle this issue.; @guparan any update ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-451481277
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454071028:83,Deployability,install,install,83,"Hi guys, sorry for the late answer. . We do not ship Python with SOFA. You have to install it yourself. ; Be sure to select the appropriate version and platform: [2.7.15_64-bit](https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi) or [2.7.15_32-bit](https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi). ; When asked by the installer, accept to add Python to your PATH. Hope that helps :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454071028
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454071028:344,Deployability,install,installer,344,"Hi guys, sorry for the late answer. . We do not ship Python with SOFA. You have to install it yourself. ; Be sure to select the appropriate version and platform: [2.7.15_64-bit](https://www.python.org/ftp/python/2.7.15/python-2.7.15.amd64.msi) or [2.7.15_32-bit](https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi). ; When asked by the installer, accept to add Python to your PATH. Hope that helps :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454071028
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765:141,Availability,down,download,141,"Why it is not possible to have with?. Solution:; The installer can detect:; - if there is on the machine, good; - if not, inform the user to download the good package...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765:53,Deployability,install,installer,53,"Why it is not possible to have with?. Solution:; The installer can detect:; - if there is on the machine, good; - if not, inform the user to download the good package...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765:67,Safety,detect,detect,67,"Why it is not possible to have with?. Solution:; The installer can detect:; - if there is on the machine, good; - if not, inform the user to download the good package...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454127765
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670:46,Deployability,install,installation,46,"Hi Neustradamus,. Improving the packaging and installation process of binary version of Sofa is something we really would like to improve. @guparan already made great work on that but as we are short on man-power this is very slow, small step are done at each Sofa release. . Thanks for you suggestion to auto-install python (and numpy), this would definitely be nice feature. ; In case you have knowledge to do such a thing and are you interested in helping I think @guparan have dedicated github branches with the additional CMAKE scripts he use for packaging the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670:265,Deployability,release,release,265,"Hi Neustradamus,. Improving the packaging and installation process of binary version of Sofa is something we really would like to improve. @guparan already made great work on that but as we are short on man-power this is very slow, small step are done at each Sofa release. . Thanks for you suggestion to auto-install python (and numpy), this would definitely be nice feature. ; In case you have knowledge to do such a thing and are you interested in helping I think @guparan have dedicated github branches with the additional CMAKE scripts he use for packaging the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670:310,Deployability,install,install,310,"Hi Neustradamus,. Improving the packaging and installation process of binary version of Sofa is something we really would like to improve. @guparan already made great work on that but as we are short on man-power this is very slow, small step are done at each Sofa release. . Thanks for you suggestion to auto-install python (and numpy), this would definitely be nice feature. ; In case you have knowledge to do such a thing and are you interested in helping I think @guparan have dedicated github branches with the additional CMAKE scripts he use for packaging the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670:566,Deployability,release,release,566,"Hi Neustradamus,. Improving the packaging and installation process of binary version of Sofa is something we really would like to improve. @guparan already made great work on that but as we are short on man-power this is very slow, small step are done at each Sofa release. . Thanks for you suggestion to auto-install python (and numpy), this would definitely be nice feature. ; In case you have knowledge to do such a thing and are you interested in helping I think @guparan have dedicated github branches with the additional CMAKE scripts he use for packaging the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670
https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670:207,Energy Efficiency,power,power,207,"Hi Neustradamus,. Improving the packaging and installation process of binary version of Sofa is something we really would like to improve. @guparan already made great work on that but as we are short on man-power this is very slow, small step are done at each Sofa release. . Thanks for you suggestion to auto-install python (and numpy), this would definitely be nice feature. ; In case you have knowledge to do such a thing and are you interested in helping I think @guparan have dedicated github branches with the additional CMAKE scripts he use for packaging the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-454704670
https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:114,Deployability,install,installation,114,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133
https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:156,Usability,clear,clear,156,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133
https://github.com/sofa-framework/sofa/pull/880#issuecomment-451469390:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/880#issuecomment-451469390
https://github.com/sofa-framework/sofa/pull/882#issuecomment-462778005:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/882#issuecomment-462778005
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:16,Integrability,depend,depends,16,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:276,Integrability,depend,depends,276,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:336,Integrability,depend,depends,336,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:550,Integrability,depend,depending,550,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:647,Integrability,depend,depending,647,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:1009,Integrability,depend,dependency,1009,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240:1179,Integrability,interface,interface,1179,Everything here depends on ffmpeg and SOFA can be built with or without ffmpeg. I tried to follow the SOFA_HAVE_FFMPEG conditional statements and add the SOFA_HAVE_FFMPEG_EXEC for the new implementation. I used a different preprocessor definition because the SOFA_HAVE_FFMPEG depends on the ffmpeg libraries while SOFA_HAVE_FFMPEG_EXEC depends only on the ffmpeg executable (one file). . > * do we really want to keep the old version based on libffmepg ?. My proposition for the future is to remove the old version based on libffmepg so all the code depending on SOFA_HAVE_FFMPEG (because the videos capture is much slower) and keep only the code depending on SOFA_HAVE_FFMPEG_EXEC. . > * istn't it possible to have an implementation VideoRecorder that does not leak the implementation details to the other layer so there is no need to have #ifdef in the rest of the code base ?. If it's better not to use any preprocessor definition I can propose two solutions:. 1) provide the ffmpeg executable in external dependency package in SOFA (so we are sure it's always found). It should be only one file for each platform supported and maybe a 32 - 64 bits version. or . 2) create an interface for the video recorder class so that if ffmpeg is found it will be used the ffmpeg implementation otherwise it will be used the screenshots implementation or nothing. This required some changes int the GUI and I never worked on the GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454340240
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454390917:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454390917
https://github.com/sofa-framework/sofa/pull/883#issuecomment-454390917:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-454390917
https://github.com/sofa-framework/sofa/pull/883#issuecomment-458140799:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-458140799
https://github.com/sofa-framework/sofa/pull/883#issuecomment-458140799:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-458140799
https://github.com/sofa-framework/sofa/pull/883#issuecomment-467911971:87,Availability,Error,Error,87,"new bug found : . > [libx264 @ 0x561e20af02c0] height not divisible by 2 (1574x965); > Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-467911971
https://github.com/sofa-framework/sofa/pull/883#issuecomment-467911971:127,Availability,Error,Error,127,"new bug found : . > [libx264 @ 0x561e20af02c0] height not divisible by 2 (1574x965); > Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/883#issuecomment-467911971
https://github.com/sofa-framework/sofa/pull/884#issuecomment-454781345:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/884#issuecomment-454781345
https://github.com/sofa-framework/sofa/pull/884#issuecomment-454781345:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/884#issuecomment-454781345
https://github.com/sofa-framework/sofa/pull/886#issuecomment-453929393:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/886#issuecomment-453929393
https://github.com/sofa-framework/sofa/pull/886#issuecomment-453929393:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/886#issuecomment-453929393
https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268:46,Deployability,install,install,46,"Well to my understanding it's supposed to be `install(DIRECTORY <dir> DESTINATION include/<dir>)`. Taken from [CMake's Doc](https://cmake.org/cmake/help/v3.0/command/install.html):; ""The DIRECTORY form installs contents of one or more directories to a given destination. The directory structure is copied verbatim to the destination."". Obviously though, it's not working in this case. I can't figure out why not",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268
https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268:166,Deployability,install,install,166,"Well to my understanding it's supposed to be `install(DIRECTORY <dir> DESTINATION include/<dir>)`. Taken from [CMake's Doc](https://cmake.org/cmake/help/v3.0/command/install.html):; ""The DIRECTORY form installs contents of one or more directories to a given destination. The directory structure is copied verbatim to the destination."". Obviously though, it's not working in this case. I can't figure out why not",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268
https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268:202,Deployability,install,installs,202,"Well to my understanding it's supposed to be `install(DIRECTORY <dir> DESTINATION include/<dir>)`. Taken from [CMake's Doc](https://cmake.org/cmake/help/v3.0/command/install.html):; ""The DIRECTORY form installs contents of one or more directories to a given destination. The directory structure is copied verbatim to the destination."". Obviously though, it's not working in this case. I can't figure out why not",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887#issuecomment-454019268
https://github.com/sofa-framework/sofa/pull/887#issuecomment-454027302:4,Deployability,install,install,4,"the install(DIRECTORY ... DESTINATION ...) was never called actually, since the pre-check ; `if(""${public_header}"" STREQUAL ""public_header-NOTFOUND"")` returned false because of the set_target_properties(PUBLIC_HEADER) declared before calling the sofa_install_targets macro...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887#issuecomment-454027302
https://github.com/sofa-framework/sofa/pull/887#issuecomment-454029284:112,Deployability,install,installed,112,"This PR now fixes the issue cleanly. It would be interesting though, to figure out how many sofa libs are badly installed because of similar issues...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/887#issuecomment-454029284
https://github.com/sofa-framework/sofa/pull/889#issuecomment-454110671:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/889#issuecomment-454110671
https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219:46,Modifiability,plugin,plugin,46,"More details about he problem. . The geomagic plugin is using:; ```cpp; sofa::component::mapping::RigidMapping< Rigid3dTypes , ExtVec3fTypes >::SPtr mapping;; ```; and; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3dTypes, ExtVec3fTypes > >();; ``` ; This means that the mapping is transforming ```Rigid3dTypes``` (d stand for double) to ```ExtVec3fTypes``` (where f stand for float). Since the removal of SOFA_FLOAT/SOFA_DOUBLE these kind of combination mixing precision have been removed and are not expected to compile anymore. . The only mapping that remains in Sofa using the same precision on both sides that should be written that way: ; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3Types, ExtVec3Types > >();; ``` ; By unifying the types precision this would fix the compilation issues. I don't have geomagic so if you can make the fix and the PR this would be nice. Otherwise maybe @epernod can do that. . Damien, ; PS: I have created an issue to reference all similar problems... its #893",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219
https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565:88,Modifiability,refactor,refactoring,88,"We can close this. it was not a ""real"" regression. ; A PR is PR is waiting to be merged refactoring this part of the codebase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565
https://github.com/sofa-framework/sofa/pull/896#issuecomment-456080215:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/896#issuecomment-456080215
https://github.com/sofa-framework/sofa/pull/896#issuecomment-456080215:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/896#issuecomment-456080215
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9002,Availability,redundant,redundant-expression,9002,Test.html) | [misc-misplaced-const](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9076,Availability,redundant,redundant-expression,9076,g/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15892,Availability,redundant,redundant-void-arg,15892,[modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15969,Availability,redundant,redundant-void-arg,15969,idy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modern,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23587,Availability,down,downcast,23587,-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23683,Availability,down,downcast,23683,lang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-memb,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28229,Availability,redundant,redundant-control-flow,28229,](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readabi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28312,Availability,redundant,redundant-control-flow,28312,ading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28492,Availability,redundant,redundant-declaration,28492,dex](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28574,Availability,redundant,redundant-declaration,28574,isplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28627,Availability,redundant,redundant-smartptr-get,28627,-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [googl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28717,Availability,redundant,redundant-smartptr-get,28717,ity-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28761,Availability,redundant,redundant-function-ptr-dereference,28761,ps://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://cl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28856,Availability,redundant,redundant-function-ptr-dereference,28856,|; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29020,Availability,redundant,redundant-member-init,29020,tra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/ex,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29102,Availability,redundant,redundant-member-init,29102,[google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29243,Availability,redundant,redundant-smartptr-get,29243,](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29326,Availability,redundant,redundant-smartptr-get,29326,dant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29510,Availability,redundant,redundant-string-cstr,29510,ps://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uni,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29592,Availability,redundant,redundant-string-cstr,29592,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29743,Availability,redundant,redundant-string-init,29743,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29825,Availability,redundant,redundant-string-init,29825,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:12881,Deployability,release,release,12881,dy/checks/misc-swapped-arguments.html) |; | [clang-analyzer-core.uninitialized.UndefReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.uninitialized.UndefReturn.html) | [misc-throw-by-value-catch-by-reference](https://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html) |; | [clang-analyzer-cplusplus.NewDelete](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDelete.html) | [misc-unconventional-assign-operator](https://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html) |; | [clang-analyzer-cplusplus.NewDeleteLeaks](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDeleteLeaks.html) | [misc-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/misc-undelegated-constructor.html) |; | [clang-analyzer-cplusplus.SelfAssignment](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.SelfAssignment.html) | [misc-uniqueptr-reset-release](https://clang.llvm.org/extra/clang-tidy/checks/misc-uniqueptr-reset-release.html) |; | [clang-analyzer-deadcode.DeadStores](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-deadcode.DeadStores.html) | [misc-unused-alias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:12958,Deployability,release,release,12958,core.uninitialized.UndefReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.uninitialized.UndefReturn.html) | [misc-throw-by-value-catch-by-reference](https://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html) |; | [clang-analyzer-cplusplus.NewDelete](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDelete.html) | [misc-unconventional-assign-operator](https://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html) |; | [clang-analyzer-cplusplus.NewDeleteLeaks](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.NewDeleteLeaks.html) | [misc-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/misc-undelegated-constructor.html) |; | [clang-analyzer-cplusplus.SelfAssignment](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-cplusplus.SelfAssignment.html) | [misc-uniqueptr-reset-release](https://clang.llvm.org/extra/clang-tidy/checks/misc-uniqueptr-reset-release.html) |; | [clang-analyzer-deadcode.DeadStores](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-deadcode.DeadStores.html) | [misc-unused-alias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30447,Deployability,release,release,30447,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30532,Deployability,release,release,30532,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20910,Integrability,interface,interfaces-global-init,20910,a/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-boun,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20999,Integrability,interface,interfaces-global-init,20999,.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cp,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15507,Modifiability,portab,portability,15507,llableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replac,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15596,Modifiability,portab,portability,15596,nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:25405,Modifiability,inherit,inheritance,25405,cing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; | [google-build-namespaces](https://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html) | [readability-else-after-return](https://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html) |; | [google-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-ar,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:25481,Modifiability,inherit,inheritance,25481,uidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; | [google-build-namespaces](https://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html) | [readability-else-after-return](https://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html) |; | [google-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27352,Modifiability,variab,variable-declaration,27352,.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-r,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27440,Modifiability,variab,variable-declaration,27440,bility-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15260,Performance,perform,performance,15260,/clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15349,Performance,perform,performance,15349,l.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21491,Performance,perform,performance-faster-string-find,21491,ist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21570,Performance,perform,performance-faster-string-find,21570,ng.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21774,Performance,perform,performance-for-range-copy,21774, [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](ht,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:21849,Performance,perform,performance-for-range-copy,21849,tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidel,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22045,Performance,perform,performance-implicit-conversion-in-loop,22045,lang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](ht,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22133,Performance,perform,performance-implicit-conversion-in-loop,22133,|; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22338,Performance,perform,performance-inefficient-algorithm,22338,html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tid,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22420,Performance,perform,performance-inefficient-algorithm,22420,rg/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [per,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22599,Performance,perform,performance-inefficient-string-concatenation,22599,elines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22692,Performance,perform,performance-inefficient-string-concatenation,22692,-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html) |; | [cppcoreguidelines-pro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22884,Performance,perform,performance-inefficient-vector-operation,22884,ro-bounds-constant-array-index](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:22973,Performance,perform,performance-inefficient-vector-operation,22973,checks/cppcoreguidelines-pro-bounds-constant-array-index.html) | [performance-implicit-conversion-in-loop](https://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [perfor,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23161,Performance,perform,performance-move-const-arg,23161,) |; | [cppcoreguidelines-pro-bounds-pointer-arithmetic](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23236,Performance,perform,performance-move-const-arg,23236,ttps://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html) | [performance-inefficient-algorithm](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23420,Performance,perform,performance-move-constructor-init,23420,ent-algorithm.html) |; | [cppcoreguidelines-pro-type-const-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23502,Performance,perform,performance-move-constructor-init,23502,https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html) | [performance-inefficient-string-concatenation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-u,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23701,Performance,perform,performance-noexcept-move-constructor,23701,concatenation.html) |; | [cppcoreguidelines-pro-type-cstyle-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreg,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23787,Performance,perform,performance-noexcept-move-constructor,23787,ps://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23974,Performance,perform,performance-type-promotion-in-math-fn,23974,-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24060,Performance,perform,performance-type-promotion-in-math-fn,24060,(https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24235,Performance,perform,performance-unnecessary-copy-initialization,24235,rg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24327,Performance,perform,performance-unnecessary-copy-initialization,24327,lvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tid,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24492,Performance,perform,performance-unnecessary-value-param,24492,-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24576,Performance,perform,performance-unnecessary-value-param,24576,c-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9002,Safety,redund,redundant-expression,9002,Test.html) | [misc-misplaced-const](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9076,Safety,redund,redundant-expression,9076,g/extra/clang-tidy/checks/misc-misplaced-const.html) |; | [clang-analyzer-core.CallAndMessage](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.CallAndMessage.html) | [misc-misplaced-widening-cast](https://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html) |; | [clang-analyzer-core.DivideZero](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DivideZero.html) | [misc-new-delete-overloads](https://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html) |; | [clang-analyzer-core.DynamicTypePropagation](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.DynamicTypePropagation.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.htm,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:14115,Safety,avoid,avoid-bind,14115,lias-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decls.html) |; | [clang-analyzer-nullability.NullableDereferenced](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableDereferenced.html) | [modernize-avoid-bind](https://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-bind.html) |; | [clang-analyzer-nullability.NullablePassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-C,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:14184,Safety,avoid,avoid-bind,14184,checks/misc-unused-alias-decls.html) |; | [clang-analyzer-llvm.Conventions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-llvm.Conventions.html) | [misc-unused-parameters](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html) |; | [clang-analyzer-nullability.NullPassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullPassedToNonnull.html) | [misc-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html) |; | [clang-analyzer-nullability.NullReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullReturnedFromNonnull.html) | [misc-unused-using-decls](https://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decls.html) |; | [clang-analyzer-nullability.NullableDereferenced](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableDereferenced.html) | [modernize-avoid-bind](https://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-bind.html) |; | [clang-analyzer-nullability.NullablePassedToNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullablePassedToNonnull.html) | [modernize-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html) |; | [clang-analyzer-nullability.NullableReturnedFromNonnull](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-nullability.NullableReturnedFromNonnull.html) | [modernize-loop-convert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15892,Safety,redund,redundant-void-arg,15892,[modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15969,Safety,redund,redundant-void-arg,15969,idy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modern,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20540,Safety,avoid,avoid-nserror-init,20540,y/checks/clang-analyzer-unix.cstring.BadSizeArg.html) | [modernize-use-transparent-functors](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-transparent-functors.html) |; | [clang-analyzer-unix.cstring.NullArg](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20612,Safety,avoid,avoid-nserror-init,20612, [modernize-use-transparent-functors](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-transparent-functors.html) |; | [clang-analyzer-unix.cstring.NullArg](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20797,Safety,avoid,avoid-spinlock,20797,ang-tidy/checks/clang-analyzer-unix.cstring.NullArg.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](htt,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:20865,Safety,avoid,avoid-spinlock,20865,.html) | [modernize-use-using](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html) |; | [clang-analyzer-valist.CopyToSelf](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.CopyToSelf.html) | [mpi-buffer-deref](https://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html) |; | [clang-analyzer-valist.Uninitialized](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Uninitialized.html) | [mpi-type-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html) |; | [clang-analyzer-valist.Unterminated](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-valist.Unterminated.html) | [objc-avoid-nserror-init](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html) |; | [cppcoreguidelines-c-copy-assignment-signature](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html) | [objc-avoid-spinlock](https://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html) |; | [cppcoreguidelines-interfaces-global-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html) | [objc-forbidden-subclassing](https://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html) |; | [cppcoreguidelines-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html) | [objc-property-declaration](https://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html) |; | [cppcoreguidelines-owning-memory](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html) | [performance-faster-string-find](https://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html) |; | [cppcoreguidelines-pro-bounds-array-to-pointer-decay](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html) | [performance-for-range-copy](https://clang.llvm.org/extra/clang-tidy/checks/perform,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24779,Safety,avoid,avoid-const-params-in-decls,24779,formance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:24867,Safety,avoid,avoid-const-params-in-decls,24867,pe-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html) | [readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html) |; | [fuchsia-overloaded-operator](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html) | [readability-container-size-empty](https://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html) |; | [fuchsia-virtual-inheritance](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html) | [readability-delete-null-pointer](https://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html) |; | [google-build-explicit-make-pair](https://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html) | [readability-deleted-default](https://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html) |; |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27084,Safety,avoid,avoid-throwing-exception,27084,le-build-using-namespace](https://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:27169,Safety,avoid,avoid-throwing-exception,27169,cks/google-build-using-namespace.html) | [readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html) |; | [google-default-arguments](https://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html) | [readability-identifier-naming](https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html) |; | [google-explicit-constructor](https://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html) | [readability-implicit-bool-conversion](https://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html) |; | [google-global-names-in-headers](https://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html) | [readability-inconsistent-declaration-parameter-name](https://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html) |; | [google-objc-avoid-throwing-exception](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html) | [readability-misleading-indentation](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28229,Safety,redund,redundant-control-flow,28229,](https://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readabi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28312,Safety,redund,redundant-control-flow,28312,ading-indentation.html) |; | [google-objc-global-variable-declaration](https://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html) | [readability-misplaced-array-index](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-ti,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28492,Safety,redund,redundant-declaration,28492,dex](https://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28574,Safety,redund,redundant-declaration,28574,isplaced-array-index.html) |; | [google-readability-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/cla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28627,Safety,redund,redundant-smartptr-get,28627,-statements](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [googl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28717,Safety,redund,redundant-smartptr-get,28717,ity-braces-around-statements.html) | [readability-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28761,Safety,redund,redundant-function-ptr-dereference,28761,ps://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html) |; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://cl,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:28856,Safety,redund,redundant-function-ptr-dereference,28856,|; | [google-readability-casting](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html) | [readability-non-const-parameter](https://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29020,Safety,redund,redundant-member-init,29020,tra/clang-tidy/checks/readability-non-const-parameter.html) |; | [google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/ex,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29102,Safety,redund,redundant-member-init,29102,[google-readability-function-size](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html) | [readability-redundant-control-flow](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29243,Safety,redund,redundant-smartptr-get,29243,](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [re,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29326,Safety,redund,redundant-smartptr-get,29326,dant-control-flow.html) |; | [google-readability-namespace-comments](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html) | [readability-redundant-declaration](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29510,Safety,redund,redundant-string-cstr,29510,ps://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uni,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29592,Safety,redund,redundant-string-cstr,29592,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29743,Safety,redund,redundant-string-init,29743,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29825,Safety,redund,redundant-string-init,29825,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:1672,Security,access,access-moved,1672,llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html) | [hicpp-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html) |; | [bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html) | [hicpp-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html) |; | [bugprone-integer-division](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html) | [hicpp-new-delete-operators](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html) |; | [bugprone-misplaced-operator-i,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:1747,Security,access,access-moved,1747,.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html) | [hicpp-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html) |; | [bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html) | [hicpp-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html) |; | [bugprone-integer-division](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html) | [hicpp-new-delete-operators](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html) |; | [bugprone-misplaced-operator-in-strlen-in-alloc](https://clang.llvm.org/extra/clang-tidy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15758,Security,secur,security,15758,) |; | [clang-analyzer-optin.cplusplus.VirtualCall](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15847,Security,secur,security,15847,clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-securi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16015,Security,secur,security,16015,ang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16115,Security,secur,security,16115,lyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16290,Security,secur,security,16290,https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16380,Security,secur,security,16380,dding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.ra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16557,Security,secur,security,16557,rg/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-aut,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16646,Security,secur,security,16646,rnize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16824,Security,secur,security,16824,lang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16916,Security,secur,security,16916,nt-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17077,Security,secur,security,17077,lvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-me,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17168,Security,secur,security,17168,.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-t,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17340,Security,secur,security,17340,.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](http,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17429,Security,secur,security,17429, | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17577,Security,secur,security,17577,secureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17668,Security,secur,security,17668,ity.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17836,Security,secur,security,17836,urity.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17926,Security,secur,security,17926,alyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MismatchedDeallocator.html) | [m,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23870,Security,access,access,23870,type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/read,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23958,Security,access,access,23958,://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html) |; | [fuchsia-default-argument,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30117,Security,access,accessed-through-instance,30117,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30210,Security,access,accessed-through-instance,30210,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:861,Testability,assert,assert-side-effect,861,Now is the good time to suggest any other clang-tidy run among:. | _ | _ |; |------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [boost-use-to-string](https://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html) | [hicpp-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html) |; | [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:937,Testability,assert,assert-side-effect,937,Now is the good time to suggest any other clang-tidy run among:. | _ | _ |; |------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [boost-use-to-string](https://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html) | [hicpp-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html) |; | [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4154,Testability,assert,assert,4154,cro](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4222,Testability,assert,assert,4222,/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-dele,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9736,Testability,assert,assert,9736,on.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9803,Testability,assert,assert,9803,ng.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.html) | [misc-suspicious-enum-usage](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17228,Testability,assert,assert,17228,-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17306,Testability,assert,assert,17306,lyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-empla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29980,Usability,simpl,simplify-boolean-expr,29980,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30062,Usability,simpl,simplify-boolean-expr,30062,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651
https://github.com/sofa-framework/sofa/pull/899#issuecomment-456149788:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-456149788
https://github.com/sofa-framework/sofa/pull/899#issuecomment-456149788:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-456149788
https://github.com/sofa-framework/sofa/pull/899#issuecomment-459502721:31,Deployability,update,updated,31,To me this PR is to merge once updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-459502721
https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320:95,Availability,error,error,95,Replacing `#include <math.h>` by `#include <cmath>` produces a `'M_PI': undeclared identifier` error on Windows for `applications/plugins/sofadistancegrid/components/collision/DistanceGridCollisionModel.h` (and only this one).; Any idea how to solve that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320
https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320:130,Modifiability,plugin,plugins,130,Replacing `#include <math.h>` by `#include <cmath>` produces a `'M_PI': undeclared identifier` error on Windows for `applications/plugins/sofadistancegrid/components/collision/DistanceGridCollisionModel.h` (and only this one).; Any idea how to solve that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320
https://github.com/sofa-framework/sofa/issues/900#issuecomment-467039133:11,Deployability,update,updated,11,"Here is an updated version: ; [chainAll2.txt](https://github.com/sofa-framework/sofa/files/2900999/chainAll2.txt); Three main changes:; - decrease the damping,; - set a total mass to the rigid tori; - decrease the time step",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/900#issuecomment-467039133
https://github.com/sofa-framework/sofa/pull/901#issuecomment-456415388:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456415388
https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670:17,Testability,test,tests,17,ok for me if the tests pass but I don't understand what is involved behind between the groups and multi-mapping.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670
https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196:80,Availability,failure,failure,80,"Hi all,. Thank Erik for the review of this PR. It seems there is one scene test failure that may be related ""RuleBaseCollisionManager"". @ChristianDuriez any idea where this could come from ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196
https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196:75,Testability,test,test,75,"Hi all,. Thank Erik for the review of this PR. It seems there is one scene test failure that may be related ""RuleBaseCollisionManager"". @ChristianDuriez any idea where this could come from ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196
https://github.com/sofa-framework/sofa/pull/901#issuecomment-458874329:19,Availability,failure,failure,19,@damienmarchal The failure is related to @epernod work on topologies. Not related to this PR :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-458874329
https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548:59,Availability,error,error,59,"Dashboard said no ^^; At first sight: ParallelFor.h:59:47: error: too many arguments provided to function-like macro invocation; assert(!(_last < _first), ""for range size() error"");",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548
https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548:173,Availability,error,error,173,"Dashboard said no ^^; At first sight: ParallelFor.h:59:47: error: too many arguments provided to function-like macro invocation; assert(!(_last < _first), ""for range size() error"");",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548
https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548:129,Testability,assert,assert,129,"Dashboard said no ^^; At first sight: ParallelFor.h:59:47: error: too many arguments provided to function-like macro invocation; assert(!(_last < _first), ""for range size() error"");",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548
https://github.com/sofa-framework/sofa/pull/902#issuecomment-456372605:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456372605
https://github.com/sofa-framework/sofa/pull/902#issuecomment-456372605:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456372605
https://github.com/sofa-framework/sofa/pull/903#issuecomment-456443546:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/903#issuecomment-456443546
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:193,Integrability,depend,dependencies,193,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:494,Integrability,depend,depend,494,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:99,Modifiability,plugin,plugin,99,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:132,Modifiability,config,config,132,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:171,Modifiability,config,config,171,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:318,Modifiability,config,config,318,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:363,Modifiability,plugin,plugin,363,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:396,Modifiability,config,config,396,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:422,Modifiability,config,config,422,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:457,Modifiability,config,config,457,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:487,Modifiability,plugin,plugin,487,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:560,Modifiability,plugin,plugin,560,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:639,Modifiability,config,config,639,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:712,Modifiability,config,config,712,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928
https://github.com/sofa-framework/sofa/pull/905#issuecomment-458464405:13,Availability,rollback,rollback,13,I'm ready to rollback some of the removals. Does it concern **all** SofaOpenglVisual ones?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-458464405
https://github.com/sofa-framework/sofa/pull/905#issuecomment-458464405:13,Deployability,rollback,rollback,13,I'm ready to rollback some of the removals. Does it concern **all** SofaOpenglVisual ones?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-458464405
https://github.com/sofa-framework/sofa/pull/905#issuecomment-459501981:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-459501981
https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318:108,Availability,error,errors,108,Aaaaaaaand we forgot to handle the scenes using deprecated components. Let's fix those 27-30 new scene test errors now :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318
https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318:103,Testability,test,test,103,Aaaaaaaand we forgot to handle the scenes using deprecated components. Let's fix those 27-30 new scene test errors now :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318
https://github.com/sofa-framework/sofa/pull/906#issuecomment-457599347:23,Testability,test,tests,23,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/906#issuecomment-457599347
https://github.com/sofa-framework/sofa/pull/906#issuecomment-457599347:47,Testability,test,tests,47,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/906#issuecomment-457599347
https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984:60,Availability,error,error,60,"Congrats for your first PR @p-shg :clap: . There is a build error on Windows though (who said it would be quick & easy?):; ```; BTDLinearSolver.inl(84): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(81): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(84): note: definition; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(84): note: existing declarations; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(90): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(87): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(90): note: definition; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: existing declarations; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: 's",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984
https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984:153,Availability,error,error,153,"Congrats for your first PR @p-shg :clap: . There is a build error on Windows though (who said it would be quick & easy?):; ```; BTDLinearSolver.inl(84): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(81): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(84): note: definition; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(84): note: existing declarations; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(90): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(87): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(90): note: definition; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: existing declarations; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: 's",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984
https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984:1129,Availability,error,error,1129,"y?):; ```; BTDLinearSolver.inl(84): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(81): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(84): note: definition; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(84): note: existing declarations; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(84): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; BTDLinearSolver.inl(90): error C2244: 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -': unable to match function definition to an existing declaration; BTDLinearSolver.inl(87): note: see declaration of 'sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -'; BTDLinearSolver.inl(90): note: definition; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,sofa::component::linearsolver::BlocFullMatrix<N,T>::BSIZE,T> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: existing declarations; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(const sofa::defaulttype::Mat<,,real> &) const'; BTDLinearSolver.inl(90): note: 'sofa::defaulttype::Mat<,,real> sofa::component::linearsolver::BlocFullMatrix<N,T>::Bloc::operator -(void) const'; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-458100984
https://github.com/sofa-framework/sofa/pull/907#issuecomment-461843469:39,Testability,test,tests,39,Looks fine now.; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461843469
https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:43,Testability,test,tests,43,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354
https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:71,Usability,simpl,simply,71,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354
https://github.com/sofa-framework/sofa/pull/907#issuecomment-463153519:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-463153519
https://github.com/sofa-framework/sofa/pull/908#issuecomment-458896804:208,Deployability,release,release,208,"Hello Jean-Nicolas,. Thank you for your PR. ; I think we already activate c++11 on all compilers. About the c++ level to use. Guillaume suggest to support the last two version of MSVC. When MSVC 2019 will be release we will switch to something close to c++17.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/908#issuecomment-458896804
https://github.com/sofa-framework/sofa/pull/908#issuecomment-458899387:96,Deployability,release,released,96,"> we will switch to something close to c++17. Can't wait for this, let's hope MSVC 2019 will be released soon !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/908#issuecomment-458899387
https://github.com/sofa-framework/sofa/pull/909#issuecomment-461103556:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/909#issuecomment-461103556
https://github.com/sofa-framework/sofa/pull/909#issuecomment-461103556:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/909#issuecomment-461103556
https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:619,Availability,error,error,619,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168
https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:247,Deployability,update,update,247,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168
https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:328,Integrability,message,message,328,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168
https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168:287,Safety,avoid,avoid,287,"Hi Adrien,. Thank for the PR, and the detailed description. Few comments at first glance:; - are the class Callback & CallbackImpl not equivalent to the std::function and std::bind that are in the c++11 STL ? ; - about the ""if(m_updating)"" in the update function. I think it is there to avoid loops. Does it make sense to add a message warning if this happens ? ; - we don't use #pragma once in SOFA as this is not part of the standard . But I think the decision make sense 10 years ago but as the compiler support is now rather bit maybe we should switch to use it as managing the #include SOFA_SUPPER_LONG_NAME_H..is error prone. @guparan, do you think we can make a script to convert the complete code base for pragma once ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-459511168
https://github.com/sofa-framework/sofa/pull/911#issuecomment-460072009:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460072009
https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030:548,Integrability,wrap,wrap,548,"Hi @courtecuisse , thanks for your PR. Concerning the DataCallback, it seems to me that it is a very similar to the DataTrackerFunctor class in SOFA.; Functors would allow you to trigger a call to your component's method, or any other object that you pass to your functor's ctor. You could also assign multiple functors to a single input data, just like you do with the DataCallback::addCallback() method, or assign only one functor, that then uses a vector of std::functions internally, called successively in its operator().; Sure it requires to wrap your callback method in a struct or class, but the cost is not very high IMHO, compared to adding a new Data tracking class in SOFA, where multiple tracking methods already exist, and aren't well known, nor very used by most users, as this PR, or a quick search in SOFA's codebase proves (DataTrackerCallback, DataTracker, DataTrackerDDGNode, DataTrackerEngine, DataTrackerFunctor, DataEngine.......). Maybe a better alternative would be to provide in SOFA a default functor for the DataTrackerFunctor, taking advantage of C++11's `std::function` function (as @damienmarchal mentioned) to store methods & call them in its operator()?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-460209030
https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674:121,Modifiability,refactor,refactor,121,"Hi folks,. I was just passing by and notice the work done by fred so thanks for the work done. . I made a branch where I refactor the DataCallback to make it use the std lib #include<functional> and lambdas instead of re-implementing a similar system with the class Callback/CallbackImpl. ; See: https://github.com/mimesis-inria/sofa/pull/12. But now this is done I wonder what are the difference with the DataCallback and the existing DataTrackerFunctor implemented in DataTracker.h ? Can you explain a bit ? . To me the differences are:; - the DataTrackerFunctor is allowing one callback and not multiple (but should be easy to change); - the DataTrackerFunctor is templated by the callback (which look not needed to me) ; - the DataTrackerFunctor is not using lambda/functional (but should be easy to change); - the DataTrackerFunctor is passing itself to the functor (which I think is a good idea to access the list of data that have changed, but...lambda are much more easy to work with.); - the DataCallback is storing the tracked data in m_data but this is also done in its parent ""inputs"" is this data duplication useful ? ; - the DataTrackerFunctor is ""hacking"" the setDirtyValue() to trigger the callback while the DataCallback is using notifyEndEdit(). It is unclear to me if this stricly equivalent but the DataTrackerFunctor implementation is shorter. => So this is not equivalent...setDirtyValue is called before the value is changed while notifyendEndif ...when it has changed. . To me the two approach needs to be either unified and/or cleaned so we have a consistent API. . @marques-bruno can you confirm that DataTrackerFunctor is notified before the value is changed, if so this is a big difference (well I wonder what the DataTrackerFunctor is used for)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674
https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674:904,Security,access,access,904,"Hi folks,. I was just passing by and notice the work done by fred so thanks for the work done. . I made a branch where I refactor the DataCallback to make it use the std lib #include<functional> and lambdas instead of re-implementing a similar system with the class Callback/CallbackImpl. ; See: https://github.com/mimesis-inria/sofa/pull/12. But now this is done I wonder what are the difference with the DataCallback and the existing DataTrackerFunctor implemented in DataTracker.h ? Can you explain a bit ? . To me the differences are:; - the DataTrackerFunctor is allowing one callback and not multiple (but should be easy to change); - the DataTrackerFunctor is templated by the callback (which look not needed to me) ; - the DataTrackerFunctor is not using lambda/functional (but should be easy to change); - the DataTrackerFunctor is passing itself to the functor (which I think is a good idea to access the list of data that have changed, but...lambda are much more easy to work with.); - the DataCallback is storing the tracked data in m_data but this is also done in its parent ""inputs"" is this data duplication useful ? ; - the DataTrackerFunctor is ""hacking"" the setDirtyValue() to trigger the callback while the DataCallback is using notifyEndEdit(). It is unclear to me if this stricly equivalent but the DataTrackerFunctor implementation is shorter. => So this is not equivalent...setDirtyValue is called before the value is changed while notifyendEndif ...when it has changed. . To me the two approach needs to be either unified and/or cleaned so we have a consistent API. . @marques-bruno can you confirm that DataTrackerFunctor is notified before the value is changed, if so this is a big difference (well I wonder what the DataTrackerFunctor is used for)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674
https://github.com/sofa-framework/sofa/pull/911#issuecomment-474262477:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-474262477
https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080:19,Testability,test,test,19,"Tried the crashing test on MacOS VM (Assembly_test.testDecomposedString) and it passed several times, crashed one time, then passed again several times...; Can't investigate further atm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080
https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080:51,Testability,test,testDecomposedString,51,"Tried the crashing test on MacOS VM (Assembly_test.testDecomposedString) and it passed several times, crashed one time, then passed again several times...; Can't investigate further atm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080
https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379:147,Modifiability,plugin,plugin,147,"The blinking test crash comes from Assembly_test.cpp:1051`createCompliantString( root, p0, p1, 2, 2.0, 1.0/stiffness, false, 1.0 );` (in Compliant plugin).; Could someone understanding this code investigate further?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379
https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379:13,Testability,test,test,13,"The blinking test crash comes from Assembly_test.cpp:1051`createCompliantString( root, p0, p1, 2, 2.0, 1.0/stiffness, false, 1.0 );` (in Compliant plugin).; Could someone understanding this code investigate further?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379
https://github.com/sofa-framework/sofa/pull/911#issuecomment-480197507:65,Testability,log,logic,65,"Ok for me. . (for the future: I'm still unsure mixing push based logic with the ""on demand"" will not cause more troubles than it solves).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-480197507
https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694:69,Modifiability,plugin,plugins,69,"Hi Guillaume,. Thanks for the PR, contains useful things. About the ""plugins"" directory I personally like the idea of stopping to mix shared libraries with sofa plugin, so it is all right to me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694
https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694:161,Modifiability,plugin,plugin,161,"Hi Guillaume,. Thanks for the PR, contains useful things. About the ""plugins"" directory I personally like the idea of stopping to mix shared libraries with sofa plugin, so it is all right to me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694
https://github.com/sofa-framework/sofa/pull/913#issuecomment-461793708:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461793708
https://github.com/sofa-framework/sofa/issues/914#issuecomment-461026691:44,Testability,test,tested,44,Thanks @tgaugry your PR solves the issue. I tested it on my side.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/914#issuecomment-461026691
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859:26,Usability,feedback,feedback,26,"Hi Erik, . Thanks for the feedback. I reorder the SofaGUI Cmake inclusion order to have it compiling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460073639:56,Modifiability,plugin,plugin,56,what is the goal here in fact? to put all exporter as a plugin in a next PR?; I don't understand the class move from modules/SofaExporter/ to modules/SofaExporter/src/SofaExporter/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460073639
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450:106,Modifiability,plugin,plugin,106,"Hello Erik,. As said in the PR description. This PR is converting the code into a properly package module/plugin. ; The move of the files is to enforce package encapsulation. Currently in Sofa a module/plugin that can be search through the find_package() CMake macro. A lot of ; modules are exporting ""{CMAKE_CURRENT_DIRECTORY}../"" when they are imported. ; Example:; SofaExporter ; SofaPython. If a third module SofaX is just doing find_package(SofaExporter) it is possible to write; ```#include <SofaExporter/aaa.h>```; which is expected....but also ; ```#include <SofaPython/bbb.h>```; This work because of the ../ in SofaExporter allows the SofaX to include SofaPython which is bad as this breaks package encapsulation. . The solution to fix that is to have the files to include in a subdirectory of the module/plugin. ; So in our case SofaExporter is exporing its include path as ""{CMAKE_CURRENT_DIRECTORY}/src/""; If done that we... the SofaX module can still do; ```#include <SofaExporter/aaa.h>```; But the ```#include <SofaPython/bbb.h>``` will fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450:202,Modifiability,plugin,plugin,202,"Hello Erik,. As said in the PR description. This PR is converting the code into a properly package module/plugin. ; The move of the files is to enforce package encapsulation. Currently in Sofa a module/plugin that can be search through the find_package() CMake macro. A lot of ; modules are exporting ""{CMAKE_CURRENT_DIRECTORY}../"" when they are imported. ; Example:; SofaExporter ; SofaPython. If a third module SofaX is just doing find_package(SofaExporter) it is possible to write; ```#include <SofaExporter/aaa.h>```; which is expected....but also ; ```#include <SofaPython/bbb.h>```; This work because of the ../ in SofaExporter allows the SofaX to include SofaPython which is bad as this breaks package encapsulation. . The solution to fix that is to have the files to include in a subdirectory of the module/plugin. ; So in our case SofaExporter is exporing its include path as ""{CMAKE_CURRENT_DIRECTORY}/src/""; If done that we... the SofaX module can still do; ```#include <SofaExporter/aaa.h>```; But the ```#include <SofaPython/bbb.h>``` will fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450:815,Modifiability,plugin,plugin,815,"Hello Erik,. As said in the PR description. This PR is converting the code into a properly package module/plugin. ; The move of the files is to enforce package encapsulation. Currently in Sofa a module/plugin that can be search through the find_package() CMake macro. A lot of ; modules are exporting ""{CMAKE_CURRENT_DIRECTORY}../"" when they are imported. ; Example:; SofaExporter ; SofaPython. If a third module SofaX is just doing find_package(SofaExporter) it is possible to write; ```#include <SofaExporter/aaa.h>```; which is expected....but also ; ```#include <SofaPython/bbb.h>```; This work because of the ../ in SofaExporter allows the SofaX to include SofaPython which is bad as this breaks package encapsulation. . The solution to fix that is to have the files to include in a subdirectory of the module/plugin. ; So in our case SofaExporter is exporing its include path as ""{CMAKE_CURRENT_DIRECTORY}/src/""; If done that we... the SofaX module can still do; ```#include <SofaExporter/aaa.h>```; But the ```#include <SofaPython/bbb.h>``` will fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460786668:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460786668
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431:44,Deployability,pipeline,pipeline,44,I'm a bit confused about config.h inclusion pipeline. Could you explain the necessity of having both initModule.h and config.h headers?; see #904,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431:25,Modifiability,config,config,25,I'm a bit confused about config.h inclusion pipeline. Could you explain the necessity of having both initModule.h and config.h headers?; see #904,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431
https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431:118,Modifiability,config,config,118,I'm a bit confused about config.h inclusion pipeline. Could you explain the necessity of having both initModule.h and config.h headers?; see #904,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431
https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362:50,Modifiability,config,config,50,"To me these have two totally different usages.; ; config.h is containing the different parameters related to the module...and it should be included in every .h of a module because this is where the SOFA_MODULE_API is implemented. Appart from that is the initModule.cpp/initModule.h which contains the defintion/declaration for functions needed to intialize the module. In the past initModule.h was containing the initModule() function...but when it is a real plugin we are using the Plugin API and dlopen for that. If we want to allow people to use the module without using the dynamic library we add into initModule.h the declaration of the ""C"" function that are in initModule.cpp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362
https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362:459,Modifiability,plugin,plugin,459,"To me these have two totally different usages.; ; config.h is containing the different parameters related to the module...and it should be included in every .h of a module because this is where the SOFA_MODULE_API is implemented. Appart from that is the initModule.cpp/initModule.h which contains the defintion/declaration for functions needed to intialize the module. In the past initModule.h was containing the initModule() function...but when it is a real plugin we are using the Plugin API and dlopen for that. If we want to allow people to use the module without using the dynamic library we add into initModule.h the declaration of the ""C"" function that are in initModule.cpp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362
https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362:483,Modifiability,Plugin,Plugin,483,"To me these have two totally different usages.; ; config.h is containing the different parameters related to the module...and it should be included in every .h of a module because this is where the SOFA_MODULE_API is implemented. Appart from that is the initModule.cpp/initModule.h which contains the defintion/declaration for functions needed to intialize the module. In the past initModule.h was containing the initModule() function...but when it is a real plugin we are using the Plugin API and dlopen for that. If we want to allow people to use the module without using the dynamic library we add into initModule.h the declaration of the ""C"" function that are in initModule.cpp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362
https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251:69,Modifiability,config,config,69,"Hi guys :); You could let cmake generate for you for each module the config.h (basically only defines for import/export symbols rules, If I am right) using [generete_export_header](https://cmake.org/cmake/help/v3.7/module/GenerateExportHeader.html).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251
https://github.com/sofa-framework/sofa/pull/915#issuecomment-461230141:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461230141
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:35,Availability,error,error,35,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:112,Availability,error,errors,112,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:129,Deployability,update,updated,129,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:41,Integrability,message,messages,41,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:11,Testability,test,tests,11,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:144,Testability,test,tests,144,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062
https://github.com/sofa-framework/sofa/pull/916#issuecomment-461889018:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461889018
https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812:17,Availability,error,error,17,1 new scene-test error due to serr -> msg_error:; - `RemovingTriangle2EdgeProcess.scn: [EdgePressureForceField(edgePressureFF0)] No mechanical Object linked.`. 2 new unit-test failures due to serr -> msg_error:; - `SceneChecker_test.checkUsingAlias_withAlias: TriangleModel requires a BaseMeshTopology`; - `SceneChecker_test.checkUsingAlias_withoutAlias: TriangleModel requires a BaseMeshTopology`. @epernod I know you encountered and fixed the SceneChecker_test ones. Where is that?; @marques-bruno Can you look at RemovingTriangle2EdgeProcess.scn for a fix?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812
https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812:176,Availability,failure,failures,176,1 new scene-test error due to serr -> msg_error:; - `RemovingTriangle2EdgeProcess.scn: [EdgePressureForceField(edgePressureFF0)] No mechanical Object linked.`. 2 new unit-test failures due to serr -> msg_error:; - `SceneChecker_test.checkUsingAlias_withAlias: TriangleModel requires a BaseMeshTopology`; - `SceneChecker_test.checkUsingAlias_withoutAlias: TriangleModel requires a BaseMeshTopology`. @epernod I know you encountered and fixed the SceneChecker_test ones. Where is that?; @marques-bruno Can you look at RemovingTriangle2EdgeProcess.scn for a fix?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812
https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812:12,Testability,test,test,12,1 new scene-test error due to serr -> msg_error:; - `RemovingTriangle2EdgeProcess.scn: [EdgePressureForceField(edgePressureFF0)] No mechanical Object linked.`. 2 new unit-test failures due to serr -> msg_error:; - `SceneChecker_test.checkUsingAlias_withAlias: TriangleModel requires a BaseMeshTopology`; - `SceneChecker_test.checkUsingAlias_withoutAlias: TriangleModel requires a BaseMeshTopology`. @epernod I know you encountered and fixed the SceneChecker_test ones. Where is that?; @marques-bruno Can you look at RemovingTriangle2EdgeProcess.scn for a fix?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812
https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812:171,Testability,test,test,171,1 new scene-test error due to serr -> msg_error:; - `RemovingTriangle2EdgeProcess.scn: [EdgePressureForceField(edgePressureFF0)] No mechanical Object linked.`. 2 new unit-test failures due to serr -> msg_error:; - `SceneChecker_test.checkUsingAlias_withAlias: TriangleModel requires a BaseMeshTopology`; - `SceneChecker_test.checkUsingAlias_withoutAlias: TriangleModel requires a BaseMeshTopology`. @epernod I know you encountered and fixed the SceneChecker_test ones. Where is that?; @marques-bruno Can you look at RemovingTriangle2EdgeProcess.scn for a fix?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812
https://github.com/sofa-framework/sofa/pull/916#issuecomment-466045293:15,Availability,error,error,15,Looks like the error is fixed. Let's merge?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-466045293
https://github.com/sofa-framework/sofa/pull/917#issuecomment-460713344:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-460713344
https://github.com/sofa-framework/sofa/pull/917#issuecomment-460713344:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-460713344
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461103661:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461103661
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461103661:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461103661
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:119,Energy Efficiency,efficient,efficient,119,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420
https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:61,Usability,clear,clearer,61,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420
https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693:62,Modifiability,inherit,inherited,62,"Concerning backward compatibility:; - The MutationListener is inherited by only 2 classes in the SOFA repository, if we exclude SofaQtQuick for which this PR is profitable anyway:; - GraphListenerQListView, which is used in runSofa to display the scene graph; - ChangeListener: which is an unused & unimplemented class hanging around in SofaKernel/framework/sofa/simulation and should be removed. - Nodes and its child classes (DAGNode & GNode in SOFA, FailNode in Compliant) are the only ones affected by the refactoring, and there's probably not much code inheriting those classes & modifying their notification behavior. So While we can't guarantee that nobody rewrote a GUI using the MutationListener, IMHO we should be able to provide support through the forum / gitter channels if that breaks anything to anyone.; Let's be breaking ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693
https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693:510,Modifiability,refactor,refactoring,510,"Concerning backward compatibility:; - The MutationListener is inherited by only 2 classes in the SOFA repository, if we exclude SofaQtQuick for which this PR is profitable anyway:; - GraphListenerQListView, which is used in runSofa to display the scene graph; - ChangeListener: which is an unused & unimplemented class hanging around in SofaKernel/framework/sofa/simulation and should be removed. - Nodes and its child classes (DAGNode & GNode in SOFA, FailNode in Compliant) are the only ones affected by the refactoring, and there's probably not much code inheriting those classes & modifying their notification behavior. So While we can't guarantee that nobody rewrote a GUI using the MutationListener, IMHO we should be able to provide support through the forum / gitter channels if that breaks anything to anyone.; Let's be breaking ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693
https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693:558,Modifiability,inherit,inheriting,558,"Concerning backward compatibility:; - The MutationListener is inherited by only 2 classes in the SOFA repository, if we exclude SofaQtQuick for which this PR is profitable anyway:; - GraphListenerQListView, which is used in runSofa to display the scene graph; - ChangeListener: which is an unused & unimplemented class hanging around in SofaKernel/framework/sofa/simulation and should be removed. - Nodes and its child classes (DAGNode & GNode in SOFA, FailNode in Compliant) are the only ones affected by the refactoring, and there's probably not much code inheriting those classes & modifying their notification behavior. So While we can't guarantee that nobody rewrote a GUI using the MutationListener, IMHO we should be able to provide support through the forum / gitter channels if that breaks anything to anyone.; Let's be breaking ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693
https://github.com/sofa-framework/sofa/pull/917#issuecomment-463149295:22,Testability,test,tests,22,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-463149295
https://github.com/sofa-framework/sofa/pull/917#issuecomment-463149295:45,Testability,test,tests,45,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-463149295
https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145:365,Modifiability,inherit,inherited,365,"Hi Bruno . I forgot to say that few weeks ago during the meeting was asked why not naming ""doXXX"" the methods to override to receive event. I think there is a good reason for that...it is because those are not delegates...those are more like ""events"". . So to me I expect this convention:; - doXXXX when there is an XXX method called delegating some part to the an inherited class; - onXXXX to do something when the XXX ""event is received. . I'm sorry to remind me that so late as I see you have changes all the names in your PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145
https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138:161,Testability,test,tests,161,"@damienmarchal that does make sense, indeed. With all the qml I've been doing I could have thought of that.. I'll change it again :). I'd love your input on the tests also, if possible.; I would like to test the change in behavior compared to the previous implementation but I don't know how I could do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138
https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138:203,Testability,test,test,203,"@damienmarchal that does make sense, indeed. With all the qml I've been doing I could have thought of that.. I'll change it again :). I'd love your input on the tests also, if possible.; I would like to test the change in behavior compared to the previous implementation but I don't know how I could do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138
https://github.com/sofa-framework/sofa/pull/917#issuecomment-477056957:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-477056957
https://github.com/sofa-framework/sofa/pull/917#issuecomment-477646368:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-477646368
https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436:67,Performance,load,loader,67,"I think the layout is ok now, . I only want o re-implement the xsp loader using the code from MeshXspLoader that is stl instead of good old C. . There is new tests including one that fails (because ...well the implementation is broken and the test is right ;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436
https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436:158,Testability,test,tests,158,"I think the layout is ok now, . I only want o re-implement the xsp loader using the code from MeshXspLoader that is stl instead of good old C. . There is new tests including one that fails (because ...well the implementation is broken and the test is right ;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436
https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436:243,Testability,test,test,243,"I think the layout is ok now, . I only want o re-implement the xsp loader using the code from MeshXspLoader that is stl instead of good old C. . There is new tests including one that fails (because ...well the implementation is broken and the test is right ;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465261562:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465261562
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555:201,Availability,error,error,201,The [ReadState test](https://github.com/sofa-framework/sofa/blob/0da3f6e1aef69318838c4a363e017d7901f14483/modules/SofaGeneralLoader/SofaGeneralLoader_test/ReadState_test.cpp#L76) is not passing due to error not emitted. and all scenes with XspLoader are crashing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555:15,Testability,test,test,15,The [ReadState test](https://github.com/sofa-framework/sofa/blob/0da3f6e1aef69318838c4a363e017d7901f14483/modules/SofaGeneralLoader/SofaGeneralLoader_test/ReadState_test.cpp#L76) is not passing due to error not emitted. and all scenes with XspLoader are crashing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:159,Availability,error,error,159,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:165,Integrability,message,message,165,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:188,Performance,load,load,188,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:90,Testability,test,test,90,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648
https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:234,Testability,test,tests,234,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648
https://github.com/sofa-framework/sofa/pull/920#issuecomment-461757258:27,Testability,test,tests,27,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/920#issuecomment-461757258
https://github.com/sofa-framework/sofa/pull/920#issuecomment-461757258:45,Testability,test,tests,45,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/920#issuecomment-461757258
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461346646:26,Availability,error,error,26,"Hi guillaume,. is there a error/warning when someone is using a removed componet saying that the component has been removed ...and need to contact us for re-adding it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461346646
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:263,Availability,error,error,263,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:385,Availability,error,error,385,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:414,Availability,Error,Errors,414,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:628,Deployability,release,release,628,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:329,Testability,test,test,329,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:672,Testability,test,tests,672,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086
https://github.com/sofa-framework/sofa/pull/922#issuecomment-461373002:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461373002
https://github.com/sofa-framework/sofa/pull/923#issuecomment-462281287:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/923#issuecomment-462281287
https://github.com/sofa-framework/sofa/pull/923#issuecomment-463153712:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/923#issuecomment-463153712
https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724:37,Safety,detect,detected,37,"ok for me, just a shame this was not detected automatically by the tests...; Maybe @damienmarchal or @EulalieCoevoet you could put an issue on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724
https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724:67,Testability,test,tests,67,"ok for me, just a shame this was not detected automatically by the tests...; Maybe @damienmarchal or @EulalieCoevoet you could put an issue on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724
https://github.com/sofa-framework/sofa/pull/925#issuecomment-465043442:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/925#issuecomment-465043442
https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:294,Availability,avail,availability,294,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812
https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:151,Modifiability,plugin,plugin,151,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812
https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:419,Modifiability,plugin,plugin,419,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812
https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:317,Testability,test,tested,317,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812
https://github.com/sofa-framework/sofa/pull/927#issuecomment-467950328:12,Testability,test,tested,12,"As far as I tested, it works :+1:; -> ready imho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-467950328
https://github.com/sofa-framework/sofa/issues/928#issuecomment-466451014:35,Testability,Test,Test,35,I'm on it...but first I'm making a Test suite. . PR on its way.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/928#issuecomment-466451014
https://github.com/sofa-framework/sofa/pull/933#issuecomment-465130703:20,Testability,test,tests,20,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/933#issuecomment-465130703
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,Deployability,integrat,integration,107,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:107,Integrability,integrat,integration,107,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:151,Usability,simpl,simplify,151,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:433,Availability,mainten,maintenance,433,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:95,Deployability,integrat,integration,95,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:213,Deployability,integrat,integration,213,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:590,Deployability,integrat,integration,590,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1109,Deployability,integrat,integration,1109,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:95,Integrability,integrat,integration,95,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:213,Integrability,integrat,integration,213,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:590,Integrability,integrat,integration,590,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1109,Integrability,integrat,integration,1109,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:514,Modifiability,Inherit,Inheritance,514,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:534,Modifiability,plugin,plugin,534,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:691,Modifiability,extend,extended,691,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:1064,Modifiability,inherit,inheritance,1064,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:856,Usability,simpl,simplify,856,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:1065,Availability,mainten,maintenance,1065,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:376,Deployability,integrat,integration,376,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:829,Deployability,integrat,integration,829,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:376,Integrability,integrat,integration,376,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:829,Integrability,integrat,integration,829,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:33,Modifiability,inherit,inheritance,33,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:128,Modifiability,variab,variable,128,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359
https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683:625,Deployability,integrat,integration,625,"@hdeling, @guparan, I think the idea would be to combine both the use of OptionsGroup with the wrapping of enums as described in the link Guillaume posted. Wouldn't something like this POC address your problem without manipulating strings from the C++?:. ```cpp; #include <sofa/helper/OptionsGroup.h>; #include <sofa/core/objectmodel/Data.h>. struct NumericalIntegrationMethod : public sofa::core::objectmodel::BaseObject; {; struct Method {; enum; {; One = 1,; Two,; Last; };; };. Data<sofa::helper::OptionsGroup> d_method;. NumericalIntegrationMethod(); : d_method(initData(&d_method, ""method"",; ""sets the chosen numerical integration method"")); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNames(2, ""One"", ""Two"");; o->setSelectedItem(Method::One);; d_method.endEdit();; }. unsigned method() { return d_method->getSelectedID(); }; void setMethod(unsigned m) { d_method->setSelectedItem(m); }; };. struct NewNumericalIntegrationMethod : public NumericalIntegrationMethod; {; struct Method : public NumericalIntegrationMethod::Method{; enum; {; Three = NumericalIntegrationMethod::Method::Last,; Last; };; };. NewNumericalIntegrationMethod(); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNbItems(NumericalIntegrationMethod::Method::Last + 1);; o->setItemName(3, ""Three"");; o->setSelectedItem(NewNumericalIntegrationMethod::Method::Three);; d_method.endEdit();; }. };. /*; /// From C++; NewNumericalIntegrationMethod method;; method->setMethod(NewNumericalIntegrationMethod::Method::Two);. # in Pyhton || XML:; <NewNumericalIntegrationMethod method=""Two"" />; */; ```. (I coded this quickly, didn't try nor compile it, but this should work I believe)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683
https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683:95,Integrability,wrap,wrapping,95,"@hdeling, @guparan, I think the idea would be to combine both the use of OptionsGroup with the wrapping of enums as described in the link Guillaume posted. Wouldn't something like this POC address your problem without manipulating strings from the C++?:. ```cpp; #include <sofa/helper/OptionsGroup.h>; #include <sofa/core/objectmodel/Data.h>. struct NumericalIntegrationMethod : public sofa::core::objectmodel::BaseObject; {; struct Method {; enum; {; One = 1,; Two,; Last; };; };. Data<sofa::helper::OptionsGroup> d_method;. NumericalIntegrationMethod(); : d_method(initData(&d_method, ""method"",; ""sets the chosen numerical integration method"")); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNames(2, ""One"", ""Two"");; o->setSelectedItem(Method::One);; d_method.endEdit();; }. unsigned method() { return d_method->getSelectedID(); }; void setMethod(unsigned m) { d_method->setSelectedItem(m); }; };. struct NewNumericalIntegrationMethod : public NumericalIntegrationMethod; {; struct Method : public NumericalIntegrationMethod::Method{; enum; {; Three = NumericalIntegrationMethod::Method::Last,; Last; };; };. NewNumericalIntegrationMethod(); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNbItems(NumericalIntegrationMethod::Method::Last + 1);; o->setItemName(3, ""Three"");; o->setSelectedItem(NewNumericalIntegrationMethod::Method::Three);; d_method.endEdit();; }. };. /*; /// From C++; NewNumericalIntegrationMethod method;; method->setMethod(NewNumericalIntegrationMethod::Method::Two);. # in Pyhton || XML:; <NewNumericalIntegrationMethod method=""Two"" />; */; ```. (I coded this quickly, didn't try nor compile it, but this should work I believe)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683
https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683:625,Integrability,integrat,integration,625,"@hdeling, @guparan, I think the idea would be to combine both the use of OptionsGroup with the wrapping of enums as described in the link Guillaume posted. Wouldn't something like this POC address your problem without manipulating strings from the C++?:. ```cpp; #include <sofa/helper/OptionsGroup.h>; #include <sofa/core/objectmodel/Data.h>. struct NumericalIntegrationMethod : public sofa::core::objectmodel::BaseObject; {; struct Method {; enum; {; One = 1,; Two,; Last; };; };. Data<sofa::helper::OptionsGroup> d_method;. NumericalIntegrationMethod(); : d_method(initData(&d_method, ""method"",; ""sets the chosen numerical integration method"")); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNames(2, ""One"", ""Two"");; o->setSelectedItem(Method::One);; d_method.endEdit();; }. unsigned method() { return d_method->getSelectedID(); }; void setMethod(unsigned m) { d_method->setSelectedItem(m); }; };. struct NewNumericalIntegrationMethod : public NumericalIntegrationMethod; {; struct Method : public NumericalIntegrationMethod::Method{; enum; {; Three = NumericalIntegrationMethod::Method::Last,; Last; };; };. NewNumericalIntegrationMethod(); {; sofa::helper::OptionsGroup* o = d_method.beginEdit();; o->setNbItems(NumericalIntegrationMethod::Method::Last + 1);; o->setItemName(3, ""Three"");; o->setSelectedItem(NewNumericalIntegrationMethod::Method::Three);; d_method.endEdit();; }. };. /*; /// From C++; NewNumericalIntegrationMethod method;; method->setMethod(NewNumericalIntegrationMethod::Method::Two);. # in Pyhton || XML:; <NewNumericalIntegrationMethod method=""Two"" />; */; ```. (I coded this quickly, didn't try nor compile it, but this should work I believe)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-474781683
https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:134,Deployability,integrat,integration,134,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361
https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:134,Integrability,integrat,integration,134,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361
https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:160,Modifiability,inherit,inheritance,160,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361
https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140:243,Deployability,integrat,integration,243,"@jnbrunet have you taken a look at this PR?. Latest proposal of Damien is to have:; - Unique identifier for topologies (as Datafield); - Create QuadratureMethod component (datafield method, datafield topology → datafield function pointer with integration points)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140
https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140:243,Integrability,integrat,integration,243,"@jnbrunet have you taken a look at this PR?. Latest proposal of Damien is to have:; - Unique identifier for topologies (as Datafield); - Create QuadratureMethod component (datafield method, datafield topology → datafield function pointer with integration points)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-600522140
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465052635:22,Testability,test,tests,22,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465052635
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135:226,Performance,load,loadFromMemory,226,"So I think I found a clean way to run the SceneChecks by using SceneLoader::Listener.; SceneChecks are now run on every GUI (batch, classic) and every SceneLoader (XML, Python).; They are also triggered in unit tests that use loadFromMemory but that is maybe too much... What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135:211,Testability,test,tests,211,"So I think I found a clean way to run the SceneChecks by using SceneLoader::Listener.; SceneChecks are now run on every GUI (batch, classic) and every SceneLoader (XML, Python).; They are also triggered in unit tests that use loadFromMemory but that is maybe too much... What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130:42,Performance,load,loader,42,So apparently SceneLoaderPY (Python scene loader) needs to call notifyLoadingScene at a specific moment because using my new `doLoad` delegate messes with the unit test SofaPython_test/python/moduleReload.py. @damienmarchal Could you tell me if you see a fix to that?. We still can stick to the old `load` override and ignore `doLoad` in SceneLoaderPY.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130:300,Performance,load,load,300,So apparently SceneLoaderPY (Python scene loader) needs to call notifyLoadingScene at a specific moment because using my new `doLoad` delegate messes with the unit test SofaPython_test/python/moduleReload.py. @damienmarchal Could you tell me if you see a fix to that?. We still can stick to the old `load` override and ignore `doLoad` in SceneLoaderPY.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130:164,Testability,test,test,164,So apparently SceneLoaderPY (Python scene loader) needs to call notifyLoadingScene at a specific moment because using my new `doLoad` delegate messes with the unit test SofaPython_test/python/moduleReload.py. @damienmarchal Could you tell me if you see a fix to that?. We still can stick to the old `load` override and ignore `doLoad` in SceneLoaderPY.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130
https://github.com/sofa-framework/sofa/pull/938#issuecomment-465698728:127,Performance,load,loaded,127,Actually the SceneListener was specifically designed for the python modules/scripts to be cleaned/reloaded when a new scene is loaded. This that few years ago so I forgot a bit how it work. But I'm sure it is important not to break it :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465698728
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465172616:56,Availability,error,error,56,">> the modified ""arg""; are also reported by caller's as error. what do you mean by the caller's ? This means it is not counted as error anymore?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465172616
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465172616:130,Availability,error,error,130,">> the modified ""arg""; are also reported by caller's as error. what do you mean by the caller's ? This means it is not counted as error anymore?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465172616
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:172,Availability,error,error,172,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:262,Availability,error,error,262,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578
